{"version":3,"sources":["constants/app.ts","components/shared/Header.tsx","constants/links.ts","components/shared/MainNav.tsx","components/shared/Footer.tsx","components/shared/Layout.tsx","constants/routes.ts","components/shared/ErrorBoundary.tsx","utils/url.ts","components/world/utils/events.ts","components/world/controllers/CarJoystickController.tsx","hooks/useKeyPress.ts","components/world/constants/world.ts","components/world/controllers/CarKeyboardController.tsx","components/shared/FadeIn.tsx","components/world/World.tsx","components/world/surroundings/Ground.tsx","components/world/constants/models.ts","components/world/utils/models.ts","libs/math/floats.ts","libs/math/polynomial.ts","libs/math/sigmoid.ts","libs/math/geometry.ts","libs/carGenetic.ts","components/world/car/constants.ts","components/world/utils/materials.ts","components/world/car/ChassisModel.tsx","components/world/car/SensorRay.tsx","components/world/constants/performance.ts","components/world/car/Sensors.tsx","components/world/car/CarLabel.tsx","components/world/car/ChassisModelSimple.tsx","components/world/car/Chassis.tsx","components/world/car/WheelModel.tsx","components/world/car/WheelModelSimple.tsx","components/world/car/Wheel.tsx","utils/logger.ts","utils/storage.ts","components/world/constants/parking.ts","components/evolution/utils/evolution.ts","components/evolution/constants/evolution.ts","components/world/car/Car.tsx","components/world/cars/StaticCars.tsx","components/world/utils/uuid.ts","components/world/constants/cars.ts","components/world/cars/DynamicCars.tsx","components/world/utils/controllers.ts","utils/colors.ts","components/world/surroundings/ParkingSpot.tsx","components/world/parkings/ParkingManual.tsx","components/evolution/EvolutionTabManual.tsx","libs/math/probability.ts","libs/genetic.ts","components/shared/FormElementsRow.tsx","components/shared/Hint.tsx","components/shared/Row.tsx","components/evolution/EvolutionBoardParams.tsx","components/evolution/PopulationTable.tsx","components/shared/Timer.tsx","components/evolution/EvolutionTiming.tsx","components/evolution/LossHistory.tsx","components/evolution/GenomePreview.tsx","components/evolution/BestGenomes.tsx","components/evolution/EvolutionAnalytics.tsx","components/world/parkings/ParkingAutomatic.tsx","components/evolution/EvolutionCheckpointSaver.tsx","components/evolution/EvolutionTabEvolution.tsx","components/evolution/constants/genomes.ts","components/evolution/AutomaticParkingAnalytics.tsx","components/evolution/EvolutionTabAutomatic.tsx","components/evolution/EvolutionTabs.tsx","components/screens/HomeScreen.tsx","App.tsx","index.tsx"],"names":["APP_BASE_PATH","Header","style","margin","onClick","document","location","href","textDecoration","cursor","$style","fontWeight","textTransform","display","alignItems","flexWrap","size","marginTop","GITHUB_LINK","ARTICLE_LINK","MainNav","linkStyle","marginRight","marginBottom","iconStyle","IconLink","props","url","title","Icon","marginLeft","color","Footer","flexDirection","justifyContent","FaTwitter","FaGithub","RiFilePaper2Fill","engine","Styletron","Layout","children","value","theme","LightTheme","span","routes","path","ErrorBoundary","state","hasError","error","errorInfo","console","this","setState","kind","KIND","negative","overrides","Body","width","React","Component","getSearchParam","name","getSearchParams","get","setSearchParam","searchParams","set","relativeURL","toString","hash","window","history","pushState","deleteSearchParam","delete","searchQuery","search","substring","URLSearchParams","getIntSearchParam","defaultValue","searchParam","parseInt","carEvents","trigger","eventType","data","event","CustomEvent","detail","dispatchEvent","on","listener","addEventListener","off","removeEventListener","CarJoystickController","nippleSize","delta","onMoveThrottled","throttle","angle","degree","leading","trailing","onEndThrottled","throttleTimeout","height","Math","floor","position","options","dynamicPage","mode","top","left","onMove","onEnd","useKeyPress","target","useState","keyPressed","setKeyPressed","downHandlerCallback","useCallback","key","includes","upHandlerCallback","useEffect","WORLD_CONTAINER_HEIGHT","CarKeyboardController","forward","backward","right","brake","paddingLeft","FadeIn","className","worldBackgroundColor","WorldSpinner","withStyle","StyledSpinnerNext","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","borderTopColor","WorldContainer","styled","boxSizing","borderStyle","borderColor","borderWidth","World","withJoystickControl","withKeyboardControl","version","performanceBoost","stats","Stats","showPanel","preLoader","backgroundColor","joystickController","keyboardController","cameraFov","innerWidth","environment","Environment","background","preset","overflow","shadows","PerspectiveCamera","makeDefault","fov","OrbitControls","attach","args","intensity","groundColor","THREE","penumbra","shadow-mapSize-width","shadow-mapSize-height","castShadow","step","gravity","iterations","defaultContactMaterial","friction","restitution","contactEquationRelaxation","broadphase","allowSleep","AdaptiveDpr","pixelated","Ground","usePlane","type","rotation","PI","ref","receiveShadow","opacity","MODEL_BASE_PATH","getModelPath","modelFileName","precisionConfigs","signBitsCount","exponentBitsCount","fractionBitsCount","totalBitsCount","bitsToFloat","bits","precisionConfig","sign","exponentBias","exponent","slice","reduce","exponentSoFar","currentBit","bitIndex","fraction","fractionSoFar","linearPolynomial","coefficients","variables","length","Error","result","forEach","coefficient","coefficientIndex","sigmoid","x","E","sigmoidToCategories","sigmoidValue","aroundZeroMargin","euclideanDistance","from","to","fromX","fromZ","toX","toZ","sqrt","GENES_PER_NUMBER","ENGINE_FORMULA_GENES_NUM","WHEELS_FORMULA_GENES_NUM","GENOME_LENGTH","carLoss","params","wheelsPosition","parkingLotCorners","flWheel","fl","frWheel","fr","brWheel","br","blWheel","bl","flCorner","frCorner","brCorner","blCorner","carLossToFitness","loss","alpha","decodeGenome","genome","engineGenes","wheelsGenes","engineFormulaCoefficients","genomeToNumbers","wheelsFormulaCoefficients","genesPerNumber","numbers","numberIndex","number","push","WHEEL_MODEL_PATH","CHASSIS_OBJECT_NAME","CHASSIS_WIDTH","CHASSIS_SIZE","CHASSIS_BASE_COLOR","CHASSIS_GROUND_CLEARANCE","CHASSIS_MODEL_PATH","CHASSIS_RELATIVE_POSITION","CAR_MAX_STEER_VALUE","getSteel","metalness","roughness","getRubber","getPlastic","getGlass","transmission","transparent","ChassisModel","bodyProps","wireframe","baseColor","useGLTF","nodes","materials","Object","keys","geometryKey","startsWith","geometry","boundsTree","MeshBVH","material","chassis_1","chassis_2","chassis_3","chassis_4","chassis_5","chassis_6","chassis_7","chassis_8","chassis_9","chassis_10","chassis_11","chassis_12","chassis_13","chassis_14","chassis_15","chassis_16","beamColor","beamWarningColor","beamDangerColor","prototype","raycast","acceleratedRaycast","SensorRay","index","angleX","obstacles","visible","onRay","distance","lineRef","useRef","positionRef","directionRef","raycasterRef","intersectObjectsThrottledRef","onRayCallbackThrottledRef","intersectionRef","current","near","far","firstHitOnly","intersectObjects","useFrame","getWorldPosition","getWorldDirection","undefined","SENSOR_DISTANCE","onUnmount","cancel","rotateY","lineGeometry","setFromPoints","linewidth","Sensors","visibleSensors","sensorsNum","onSensors","sensorDistances","Array","fill","scene","useThree","onSensorsCallbackThrottledRef","filter","object","map","getObjectByName","userData","isSensorObstacle","angleStep","sensorRays","_","CarLabel","content","Html","padding","borderRadius","fontSize","whiteSpace","ChassisModelSimple","boxArgs","CHASSIS_HEIGHT","CHASSIS_LENGTH","Chassis","forwardRef","movable","withSensors","weight","label","chassisPosition","collisionFilterGroup","collisionFilterMask","onCollide","boxSize","useBox","mass","groupProps","sensors","carLabel","chassisModel","WheelModel","tire","wheel_1","disc","wheel_2","cap","wheel_3","tireMaterial","Rubber","discMaterial","capMaterial","Chrom","WheelModelSimple","cylinderArgs","Wheel","radius","segments","isLeft","wheelSize","useCylinder","wheelModel","logToConsole","loggerBuilder","context","info","message","optionalParams","log","warn","write","logger","stringifiedData","JSON","stringify","localStorage","setItem","read","getItem","parse","remove","removeItem","PARKING_SPOT_POSITION","y","z","innerW","innerL","innerX","innerZ","PARKING_SPOT_OUTER_CORNERS","PARKING_SPOT_POINTS","GENERATION_STORAGE_KEY","GENERATION_INDEX_STORAGE_KEY","LOSS_HISTORY_INDEX_STORAGE_KEY","AVG_LOSS_HISTORY_INDEX_STORAGE_KEY","generationToCars","generationIndex","generation","onLossUpdate","cars","genomeIndex","licencePlate","genomeIdx","generateLicencePlate","onEngine","formulaOutput","rawResult","normalizedResult","engineFormula","cleanUpSensors","onWheel","wheelsFormula","wheelsPoints","onHit","sensor","formatLossValue","lossValue","ceil","genomeStringToGenome","genomeString","split","geneString","loadGenerationFromStorage","lossHistory","avgLossHistory","saveGenerationToStorage","keySuccess","generationSuccess","lossHistorySuccess","avgLossHistorySuccess","FITNESS_ALPHA","Car","uuid","wheelRadius","withLabel","onCarReady","onCarDestroy","car","chassis","apiRef","wheelsRef","wheelsPositionRef","setCarLoss","onUpdateLabelThrottledRef","onMoveThrottledRef","wheels","wheelInfos","wheelInfo","isFrontWheel","directionLocal","axleLocal","chassisConnectionPointLocal","suspensionStiffness","suspensionRestLength","maxSuspensionForce","maxSuspensionTravel","dampingRelaxation","dampingCompression","frictionSlip","rollInfluence","useCustomSlidingRotationalSpeed","customSlidingRotationalSpeed","flWheelInfo","frWheelInfo","CHASSIS_WHEEL_WIDTH","blWheelInfo","brWheelInfo","useRaycastVehicle","chassisBody","indexForwardAxis","indexRightAxis","indexUpAxis","vehicle","vehicleAPI","wheelMetaData","wheelBodyProps","carMetaData","api","wheelsNum","wheelsPositions","getCarLoss","wheelPositions","toArray","distanceColor","StaticCars","rows","cols","skipCells","carBaseColors","setCarBaseColors","carBaseColorsRef","touchedCarUUID","newCarBaseColors","staticCarPositions","row","col","find","skipRow","skipCol","staticCars","DYNAMIC_CARS_POSITION_MIDDLE","DYNAMIC_CARS_POSITION_FRONT","DynamicCars","withLabels","controllable","withRandomColors","withRandomStartingPoint","carsPosition","carsUUIDs","carsAPIs","activeCars","onForward","carAPI","wheelIdx","setBrake","applyEngineForce","onEngineForward","onBackward","onEngineBackward","onNeutral","onLeft","setSteeringValue","onRight","onStraight","onBreak","onPressBreak","onBreakRelease","onReleaseBreak","random","styledCar","carColor","flatColors","colors","flat","getRandomColor","angularVelocity","ParkingSpot","Line","points","lineWidth","dashed","ParkingManual","EvolutionTabManual","weightedRandom","items","weights","cumulativeWeights","i","randomNumber","item","createGeneration","generationSize","genomeLength","mutate","mutationProbability","geneIndex","gene","mutatedGene","mate","father","mother","firstChild","secondChild","marginX","FormElementsRow","buttons","alignBottom","node","nodeIndex","flex","buttonsRow","Hint","hint","accessibilityType","shape","BUTTON_SHAPE","round","BUTTON_KIND","minimal","BaseButton","paddingTop","paddingBottom","paddingRight","Row","GENERATION_SIZES","BATCH_SIZES","EvolutionBoardParams","batchSize","generationLifetime","longLivingChampionsPercentage","onGenerationSizeChange","onBatchSizeChange","onGenerationLifetimeChange","onMutationProbabilityChange","onLongLivingChampionsPercentageChange","onPerformanceBoost","onReset","mutationProbabilityInternal","setMutationProbabilityInternal","generationLifetimeInternal","setGenerationLifetimeInternal","longLivingChampionsPercentageInternal","setLongLivingChampionsPercentageInternal","confirmationModalOpen","setConfirmationModalOpen","onConfirmationModalClose","generationSizeCurrentValue","id","generationSizes","generationSizeSelector","onChange","labelKey","valueKey","SELECT_SIZE","compact","clearable","searchable","batchSizeCurrentValue","batchSizes","batchSizeSelector","sliderOverrides","TickBar","InnerThumb","$value","$thumbIndex","Fragment","ThumbValue","Thumb","generationLifetimeChanger","caption","marks","persistentThumb","min","max","onFinalChange","valueToLabel","genesToBeMutated","mutationProbabilityChanger","longLivingChampionsCount","longLivingChampionsChanger","resetButton","BUTTON_SIZE","pill","startEnhancer","performanceBooster","checked","e","labelPlacement","LABEL_PLACEMENT","resetConfirmationModal","onClose","closeable","isOpen","animate","autoFocus","SIZE","default","role","ROLE","dialog","NOTIFICATION_KIND","warning","tertiary","primary","CellSpinner","carsLoss","hasOwnProperty","PopulationTable","carsInProgress","rowsData","values","sort","carA","carB","lossA","lossB","licencePlateCell","TAG_KIND","neutral","variant","TAG_VARIANT","light","carLossFormatted","carLossColor","lossCell","fitnessValue","getCarFitness","columns","emptyMessage","divider","DIVIDER","grid","TABLE_SIZE","Root","maxHeight","TableBodyCell","verticalAlign","formatTime","timeMs","timeSec","secPrefix","timeMin","Timer","timeout","interval","timePassed","setTimePassed","timePassedRef","timerRef","reversedTime","onIntervalCallback","clearInterval","setInterval","formattedTime","TimingColumn","textAlign","EvolutionTiming","batchIndex","totalBatches","generationLifetimeMs","batchVersion","worldVersion","retry","groupLabel","batchLifetimeLabel","batchesCounter","generationInfo","solid","groupInfo","groupLifetime","worldAge","InnerContainer","LossHistory","avgHistory","showAvgHistory","setShowAvgHistory","showMinLoss","setShowMinLoss","historyData","Infinity","avgHistoryData","chartData","minLossSeriesId","avgLossSeriesId","chart","bottom","xScale","yScale","yFormat","curve","axisBottom","legend","legendOffset","legendPosition","axisLeft","pointSize","pointColor","datum","pointBorderWidth","pointBorderColor","useMesh","enableCrosshair","enableSlices","tooltip","point","serieId","boxShadow","xFormatted","yFormatted","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","chartControls","disabled","fontFamily","commonGenomeStyles","lineHeight","Coefficients","shortNumbers","coefficientsString","formatCoefficient","join","CodeBlock","border","GenomePreview","editable","onGenomeEdit","shortEngineFormula","shortWheelsFormula","isEditableGenome","setIsEditableGenome","editedGenome","setEditedGenome","genomeError","setGenomeError","genomeCaption","genomeEditButtonIcon","genomeSaveButtonIcon","genomeEditButtons","genomePreviewLabel","genomePreviewOutput","editedGenomeString","genomeEditableOutput","genomeFromString","trim","onGenomeUpdate","Input","genomeOutput","decodedEngineFormula","decodedWheelsFormula","blocksMarginBottom","GENOME_PANELS","BestGenomes","bestGenomePanelTitle","bestGenome","bestCarLicencePlate","minLoss","secondBestGenomePanelTitle","secondBestGenome","secondBestCarLicencePlate","secondMinLoss","onBestGenomeEdit","genomeExpandedTabs","setGenomeExpandedTabs","bestGenomePreview","secondBestGenomePreview","panels","firstBestGenomePanel","secondBestGenomePanel","expanded","newGenomeExpandedTabs","openedTabIndex","indexOf","splice","EvolutionAnalytics","carsBatchIndex","needToRetry","worldIndex","carsBatchSize","timingDetails","evolutionParams","lossHistoryChart","populationTable","ParkingAutomatic","withVisibleSensors","EvolutionCheckpointSaver","onRestoreFromCheckpoint","onCheckpointToFile","showCheckpointModal","setShowCheckpointModal","checkpointIsProcessing","setCheckpointIsProcessing","checkpointErrorMessage","setCheckpointErrorMessage","onCheckpointModalClose","checkpointError","checkpointModal","secondary","demoCheckpoint","onCancel","onDrop","acceptedFiles","fileReader","FileReader","onload","checkpoint","readAsText","accept","multiple","progressMessage","fileName","checkpointString","checkpointBlob","Blob","saveAs","GENERATION_SIZE_URL_PARAM","GROUP_SIZE_URL_PARAM","GENERATION_LIFETIME_URL_PARAM","MUTATION_PROBABILITY_URL_PARAM","LONG_LIVING_CHAMPIONS_URL_PARAM","PERFORMANCE_BOOST_URL_PARAM","EvolutionTabEvolution","enqueue","useSnackbar","toLowerCase","getBooleanSearchParam","setPerformanceBoost","setWorldIndex","setGenerationSize","restoredFromGenerationIndex","setRestoredFromGenerationIndex","setGenerationIndex","setGeneration","setGenerationLifetime","setCars","carsBatch","setCarsBatch","setCarsBatchSize","setCarsBatchIndex","carsRef","setBestGenome","setMinLoss","setBestCarLicencePlate","setSecondBestGenome","setSecondMinLoss","setSecondBestCarLicencePlate","dynamicCarsPosition","batchTimer","carsLossRef","setCarsLoss","setLossHistory","setAvgLossHistory","genomeLossRef","parseFloat","getFloatSearchParam","setMutationProbability","setLongLivingChampionsPercentage","badSimulationRetriesNum","setBadSimulationRetriesNum","carsBatchesTotal","batch","generateWorldVersion","onEvolutionRestart","cancelBatchTimer","onCarLossUpdate","licensePlate","carGenomeIndex","carGenomeKey","clearTimeout","isValidGenerationFromStorage","getGenerationIndexFromStorage","generationFromStorage","generationIndexFromStorage","startEvolution","generationStartIndex","lossHistoryFromStorage","getLossHistoryFromStorage","avgLossHistoryFromStorage","getAvgLossHistoryFromStorage","createFirstGeneration","firstGeneration","debugGenerationSize","debugGenomeLength","err","getGenerationFromStorage","DURATION","medium","mateExistingGeneration","newGeneration","fitness","oldGeneration","genomeA","genomeB","fitnessA","fitnessB","longLiversCount","longLivingGenome","fitnessPerOldGenome","fatherGenomeIndex","matherGenomeIndex","randomFather","randomFatherGenomeIndex","select","genomeKey","carFitnessFunction","exceptionMessage","onBatchLifetimeEnd","cloneDeep","generationLoss","newLossHistory","minVal","currVal","newAvgLossHistory","nonNullLosses","ascSortedGenerationLoss","a","b","aTuned","bTuned","lossSum","sum","syncLossHistory","bestLicensePlateSoFar","secondBestCarLicensePlate","secondBestGenomeIndex","syncSecondBestGenome","bestCarLicensePlate","bestGenomeIndex","syncBestGenome","nextBatchIndex","createCarsFromGeneration","batchStart","batchEnd","generateNextCarsBatch","onLifetimeEnd","setTimeout","probability","time","percentage","reload","dateTime","Date","toISOString","BEST_GENOMES","AutomaticParkingAnalytics","genomes","selectedGenomeIndex","onCarsPositionChange","onChangeGenomeIndex","carLicencePlates","carsSwitcher","selectedCarsPosition","carsStartPositionChanger","BUTTON_GROUP_MODE","radio","BUTTON_GROUP_SIZE","selected","_event","positionIndex","GENOME_IDX_URL_PARAM","START_POSITION_URL_PARAM","DEFAULT_START_POSITION","EvolutionTabAutomatic","bestTrainedCarLossRef","onTrainedCarLossUpdate","setSelectedGenomeIndex","carPositionFromUrl","getStringSearchParam","getCarsPositionFromURL","setDynamicCarsPosition","bestDefaultTrainedGeneration","bestTrainedCarLoss","setBestTrainedCarLoss","bestTrainedCarCycleIndex","setBestTrainedCarCycleIndex","bestTrainedGeneration","setBestTrainedGeneration","bestTrainedCars","setBestTrainedCars","automaticParkingLifetimeTimer","automaticWorldVersion","onAutomaticCycleLifetimeEnd","cancelAutomaticCycleTimer","countDownAutomaticParkingCycleLifetime","TRAINED_CAR_GENERATION_LIFETIME","updatedGeneration","WORLD_SEARCH_PARAM","TAB_KEYS","evolution","automatic","manual","tabBarStyle","tabContentStyle","tabStyle","TabTitle","icon","EvolutionTabs","worldKey","activeWorldKey","setActiveWorldKey","TabBar","TabContent","Tab","activeKey","HomeScreen","App","exact","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6e938c48.chunk.js","sourcesContent":["export const APP_BASE_PATH = '/self-parking-car-evolution';\n","import React from 'react';\nimport { H5, Paragraph3 } from 'baseui/typography';\nimport { StyledLink } from 'baseui/link';\nimport { GiDna2 } from 'react-icons/all';\nimport { APP_BASE_PATH } from '../../constants/app';\n\nfunction Header() {\n  const onClick = () => {\n    document.location.href = APP_BASE_PATH;\n  };\n\n  return (\n    <div style={{ margin: '30px 0' }}>\n      <StyledLink\n        onClick={onClick}\n        style={{ textDecoration: 'none', cursor: 'pointer' }}\n      >\n        <H5\n          $style={{\n            fontWeight: 800,\n            textTransform: 'uppercase',\n            display: 'flex',\n            alignItems: 'center',\n            flexWrap: 'wrap',\n            margin: '0',\n          }}\n        >\n          Self-Parking Car <GiDna2 size={30} style={{ margin: '0 10px' }} /> Evolution\n        </H5>\n      </StyledLink>\n      <Paragraph3 $style={{ marginTop: '5px' }}>\n        Training the car to do self-parking using genetic algorithm\n      </Paragraph3>\n    </div>\n  );\n}\n\nexport default Header;\n","export const TWITTER_LINK = 'https://twitter.com/Trekhleb';\nexport const GITHUB_LINK = 'https://github.com/trekhleb/self-parking-car-evolution';\nexport const CHECKPOINTS_PATH = 'https://github.com/trekhleb/self-parking-car-evolution/tree/master/src/checkpoints';\nexport const ARTICLE_LINK = 'https://trekhleb.dev/blog/2021/self-parking-car-evolution/';\n","import React, { CSSProperties } from 'react';\nimport { StyledLink } from 'baseui/link';\nimport { RiFilePaper2Fill, SiGithub } from 'react-icons/all';\nimport { ARTICLE_LINK, GITHUB_LINK } from '../../constants/links';\n\nfunction MainNav() {\n  const linkStyle: CSSProperties = {\n    display: 'flex',\n    alignItems: 'center',\n    marginRight: '20px',\n    marginBottom: '10px',\n  };\n\n  const iconStyle: CSSProperties = {\n    marginRight: '5px',\n  };\n\n  return (\n    <nav style={{ display: 'flex', marginBottom: '20px' }}>\n      <StyledLink href={ARTICLE_LINK} style={linkStyle}>\n        <RiFilePaper2Fill style={iconStyle} /> How it works\n      </StyledLink>\n      <StyledLink href={GITHUB_LINK} style={linkStyle}>\n        <SiGithub style={iconStyle} /> Source-code\n      </StyledLink>\n    </nav>\n  );\n}\n\nexport default MainNav;\n","import React from 'react';\nimport { Block } from 'baseui/block';\nimport { FaGithub, FaTwitter, RiFilePaper2Fill } from 'react-icons/all';\nimport { IconType } from 'react-icons/lib';\n\nimport { ARTICLE_LINK, GITHUB_LINK, TWITTER_LINK } from '../../constants/links';\n\nfunction Footer() {\n  return (\n    <Block\n      marginBottom=\"50px\"\n      marginTop=\"50px\"\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"center\"\n    >\n      <IconLink\n        url={TWITTER_LINK}\n        title=\"Trekhleb on Twitter\"\n        Icon={FaTwitter}\n      />\n      <IconLink\n        url={GITHUB_LINK}\n        title=\"Project on GitHub\"\n        Icon={FaGithub}\n      />\n      <IconLink\n        url={ARTICLE_LINK}\n        title=\"How the algorithm works\"\n        Icon={RiFilePaper2Fill}\n      />\n    </Block>\n  );\n}\n\ntype IconLinkProps = {\n  url: string,\n  title: string,\n  Icon: IconType,\n};\n\nfunction IconLink(props: IconLinkProps) {\n  const {url, title, Icon} = props;\n  return (\n    <Block marginLeft=\"10px\" marginRight=\"10px\">\n      <a href={url} style={{color: 'black'}} title={title}>\n        <Icon size={20} />\n      </a>\n    </Block>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport { Client as Styletron } from 'styletron-engine-atomic';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { BaseProvider, LightTheme } from 'baseui';\nimport { Cell, Grid } from 'baseui/layout-grid';\nimport { SnackbarProvider } from 'baseui/snackbar';\n\nimport './Layout.css';\nimport Header from './Header';\nimport MainNav from './MainNav';\nimport Footer from './Footer';\n\nconst engine = new Styletron();\n\ntype LayoutProps = {\n  children: React.ReactNode,\n};\n\nfunction Layout(props: LayoutProps) {\n  const { children } = props;\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={LightTheme}>\n        <SnackbarProvider>\n          <Grid>\n            <Cell span={[4, 8, 12]}>\n              <Header />\n              <MainNav />\n            </Cell>\n            <Cell span={[4, 8, 12]}>\n              {children}\n            </Cell>\n            <Cell span={[4, 8, 12]}>\n              <Footer />\n            </Cell>\n          </Grid>\n        </SnackbarProvider>\n      </BaseProvider>\n    </StyletronProvider>\n  );\n}\n\nexport default Layout;\n","type RouteID = 'home';\n\ntype Route = {\n  path: string,\n};\n\ntype Routes = Record<RouteID, Route>;\n\nexport const routes: Routes = {\n  home: {\n    path: '/',\n  },\n};\n","import React, { ErrorInfo } from 'react';\nimport { Notification, KIND } from 'baseui/notification';\n\ntype Props = {\n  children: React.ReactNode,\n};\n\ntype State = {\n  hasError: boolean,\n};\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  static getDerivedStateFromError(): State {\n    // Update state so the next render will show the fallback UI.\n    return {\n      hasError: true,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    // You can also log the error to an error reporting service.\n    // eslint-disable-next-line no-console\n    console.error(error, errorInfo);\n    this.setState({ hasError: true });\n  }\n\n  render(): React.ReactNode {\n    const { children } = this.props;\n    const { hasError } = this.state;\n\n    if (hasError) {\n      // You can render any custom fallback UI\n      return (\n        <Notification\n          kind={KIND.negative}\n          overrides={{\n            Body: {style: {width: 'auto'}},\n          }}\n        >\n          Component has crashed\n        </Notification>\n      );\n    }\n\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n","export const getSearchParam = (name: string): string | null => {\n  const searchParams = getSearchParams();\n  return searchParams.get(name);\n};\n\nexport const setSearchParam = (name: string, value: string): void => {\n  const searchParams = getSearchParams();\n  searchParams.set(name, value);\n  const relativeURL = '?' + searchParams.toString() + document.location.hash;\n  window.history.pushState(null, '', relativeURL);\n};\n\nexport const deleteSearchParam = (name: string): void => {\n  const searchParams = getSearchParams();\n  searchParams.delete(name);\n  const relativeURL = '?' + searchParams.toString() + document.location.hash;\n  window.history.pushState(null, '', relativeURL);\n};\n\nconst getSearchParams = (): URLSearchParams => {\n  const searchQuery = document.location.search.substring(1);\n  return new URLSearchParams(searchQuery);\n};\n\nexport const getStringSearchParam = (name: string, defaultValue: string): string => {\n  const searchParam: string | null = getSearchParam(name);\n  if (searchParam === null) {\n    return defaultValue;\n  }\n  return searchParam;\n};\n\nexport const getIntSearchParam = (name: string, defaultValue: number): number => {\n  const searchParam: string | null = getSearchParam(name);\n  if (searchParam === null) {\n    return defaultValue;\n  }\n  return parseInt(searchParam);\n};\n\nexport const getFloatSearchParam = (name: string, defaultValue: number): number => {\n  const searchParam: string | null = getSearchParam(name);\n  if (searchParam === null) {\n    return defaultValue;\n  }\n  return parseFloat(searchParam);\n};\n\nexport const getBooleanSearchParam = (name: string, defaultValue: boolean): boolean => {\n  const searchParam: string | null = getSearchParam(name);\n  if (searchParam === null) {\n    return defaultValue;\n  }\n  return searchParam.toLowerCase() === 'true' ? true : false;\n};\n","// @see: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n\ntype CarEvent = 'engineforward' | 'enginebackward' | 'engineneutral' | 'wheelsleft' | 'wheelsright' | 'wheelsstraight' | 'pressbreak' | 'releasebreak';\n\ntype CarEvents = Record<string, CarEvent>;\n\nexport const carEvents: CarEvents = {\n  engineForward: 'engineforward',\n  engineBackward: 'enginebackward',\n  engineNeutral: 'engineneutral',\n  wheelsLeft: 'wheelsleft',\n  wheelsRight: 'wheelsright',\n  wheelsStraight: 'wheelsstraight',\n  pressBreak: 'pressbreak',\n  releaseBreak: 'releasebreak',\n};\n\nexport const trigger = (eventType: CarEvent, data: any = {}) => {\n  const event = new CustomEvent(eventType, { detail: data });\n  document.dispatchEvent(event);\n};\n\nexport const on = (eventType: CarEvent, listener: (evt: Event) => void) => {\n  document.addEventListener(eventType, listener);\n};\n\nexport const off = (eventType: CarEvent, listener: (evt: Event) => void) => {\n  document.removeEventListener(eventType, listener);\n};\n","import React from 'react';\nimport throttle from 'lodash/throttle';\nimport ReactNipple from 'react-nipple';\n\nimport { carEvents, trigger } from '../utils/events';\n\nfunction CarJoystickController() {\n  const nippleSize = 100;\n  const delta = 30;\n  const throttleTimeout = 250;\n\n  const onMove = (event: any, data: any) => {\n    const angle = data.angle.degree;\n    if (angle < (90 - delta) || angle > (270 + delta)) {\n      trigger(carEvents.wheelsRight);\n    } else if (angle > (90 + delta) && angle < (270 - delta)) {\n      trigger(carEvents.wheelsLeft);\n    }\n    if (angle > delta && angle < (180 - delta)) {\n      trigger(carEvents.engineForward);\n    } else if (angle > (180 + delta) && angle < (360 - delta)) {\n      trigger(carEvents.engineBackward);\n    }\n  };\n\n  const onMoveThrottled = throttle(onMove, throttleTimeout, {\n    leading: false,\n    trailing: true,\n  });\n\n  const onEnd = (event: any, data: any) => {\n    trigger(carEvents.releaseBreak);\n    trigger(carEvents.engineNeutral);\n    trigger(carEvents.wheelsStraight);\n  };\n\n  const onEndThrottled = throttle(onEnd, throttleTimeout + 10, {\n    leading: false,\n    trailing: true,\n  });\n\n  return <ReactNipple\n    style={{\n      width: nippleSize,\n      height: nippleSize,\n      marginTop: -nippleSize - 20,\n      marginLeft: `calc(50% - ${Math.floor(nippleSize / 2)}px)`,\n      position: 'absolute',\n    }}\n    // @see: https://github.com/yoannmoinet/nipplejs#options\n    options={{\n      dynamicPage: true,\n      color: 'white',\n      mode: 'static',\n      size: nippleSize,\n      position: { top: '50%', left: '50%' },\n    }}\n    // @see: https://github.com/yoannmoinet/nipplejs#start\n    onMove={onMoveThrottled}\n    onEnd={onEndThrottled}\n  />\n}\n\nexport default CarJoystickController;\n","import { useCallback, useEffect, useState } from 'react';\n\nexport function useKeyPress(target: string[]): boolean {\n  const [keyPressed, setKeyPressed] = useState(false)\n\n  const downHandler = ({ key }: KeyboardEvent) => {\n    if (target.includes(key)) {\n      setKeyPressed(true);\n    }\n  };\n\n  const downHandlerCallback = useCallback(downHandler, [target]);\n\n  const upHandler = ({ key }: KeyboardEvent) => {\n    if (target.includes(key)) {\n      setKeyPressed(false);\n    }\n  };\n\n  const upHandlerCallback = useCallback(upHandler, [target]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandlerCallback)\n    window.addEventListener('keyup', upHandlerCallback)\n    return () => {\n      window.removeEventListener('keydown', downHandlerCallback)\n      window.removeEventListener('keyup', upHandlerCallback)\n    }\n  }, [upHandlerCallback, downHandlerCallback]);\n\n  return keyPressed;\n}\n","export const WORLD_CONTAINER_HEIGHT = 400;\nexport const WIDER_CAMERA_SCREEN_MAX_WIDTH = 600;\n","import { Paragraph4 } from 'baseui/typography';\nimport React, { useEffect } from 'react';\n\nimport { useKeyPress } from '../../../hooks/useKeyPress';\nimport { trigger, carEvents } from '../utils/events';\nimport { Block } from 'baseui/block';\nimport { WORLD_CONTAINER_HEIGHT } from '../constants/world';\n\nfunction CarKeyboardController() {\n  // const forward = useKeyPress(['w', 'ArrowUp']);\n  // const backward = useKeyPress(['s', 'ArrowDown']);\n  // const left = useKeyPress(['a', 'ArrowLeft']);\n  // const right = useKeyPress(['d', 'ArrowRight']);\n  // const brake = useKeyPress([' ']);\n\n  const forward = useKeyPress(['w']);\n  const backward = useKeyPress(['s']);\n  const left = useKeyPress(['a']);\n  const right = useKeyPress(['d']);\n  const brake = useKeyPress([' ']);\n\n  useEffect(() => {\n    // Left-right.\n    if (left && !right) {\n      trigger(carEvents.wheelsLeft);\n    } else if (right && !left) {\n      trigger(carEvents.wheelsRight);\n    } else {\n      trigger(carEvents.wheelsStraight);\n    }\n\n    // Front-back.\n    if (forward && !backward) {\n      trigger(carEvents.engineForward);\n    } else if (backward && !forward) {\n      trigger(carEvents.engineBackward);\n    } else {\n      trigger(carEvents.engineNeutral);\n    }\n\n    // Break.\n    if (brake) {\n      trigger(carEvents.pressBreak);\n    }\n    if (!brake) {\n      trigger(carEvents.releaseBreak);\n    }\n  }, [forward, backward, left, right, brake]);\n\n  return (\n    <Block\n      position=\"relative\"\n      marginTop={`${-WORLD_CONTAINER_HEIGHT}px`}\n      paddingLeft=\"15px\"\n    >\n      <Paragraph4 $style={{color: 'white'}}>\n        {/*<code>WASD</code> or <code>↑→↓←</code> to drive. <code>SPACE</code> to break.*/}\n        <code>WASD</code> keys to drive. <code>SPACE</code> to break.\n      </Paragraph4>\n    </Block>\n  );\n}\n\nexport default CarKeyboardController;\n","import * as React from 'react';\n\nimport './FadeIn.css';\n\ntype FadeInProps = {\n  children: React.ReactNode,\n};\n\nfunction FadeIn(props: FadeInProps) {\n  const {children} = props;\n  return (\n    <div className=\"component-fade-in\">\n      {children}\n    </div>\n  );\n}\n\nexport default FadeIn\n","import React, { useState } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Stats, Environment, AdaptiveDpr, PerspectiveCamera } from '@react-three/drei';\nimport { Physics } from '@react-three/cannon';\nimport * as THREE from 'three';\nimport { styled, withStyle } from 'baseui';\nimport { StyledSpinnerNext } from 'baseui/spinner';\nimport { Block } from 'baseui/block';\n\nimport CarJoystickController from './controllers/CarJoystickController';\nimport CarKeyboardController from './controllers/CarKeyboardController';\nimport { WIDER_CAMERA_SCREEN_MAX_WIDTH, WORLD_CONTAINER_HEIGHT } from './constants/world';\nimport FadeIn from '../shared/FadeIn';\nimport { getSearchParam } from '../../utils/url';\n\ntype WorldProps = {\n  children: React.ReactNode,\n  withJoystickControl?: boolean,\n  withKeyboardControl?: boolean,\n  version?: string,\n  performanceBoost?: boolean, \n};\n\nconst worldBackgroundColor = 'lightblue';\n\nconst WorldSpinner = withStyle(StyledSpinnerNext, {\n  width: '30px',\n  height: '30px',\n  borderLeftWidth: '6px',\n  borderRightWidth: '6px',\n  borderTopWidth: '6px',\n  borderBottomWidth: '6px',\n  borderTopColor: 'black',\n});\n\nconst STAT_SEARCH_PARAM_NAME = 'debug';\n\nfunction World(props: WorldProps) {\n  const {\n    children,\n    withJoystickControl = false,\n    withKeyboardControl = false,\n    version = '0',\n    performanceBoost = false,\n  } = props;\n\n  const [withStat] = useState<boolean>(!!getSearchParam(STAT_SEARCH_PARAM_NAME));\n\n  const stats = withStat ? (\n    <Stats showPanel={0} />\n  ) : null;\n\n  const preLoader = (\n    <div style={{\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      position: 'absolute',\n      width: '100%',\n      boxSizing: 'border-box',\n      height: `${WORLD_CONTAINER_HEIGHT}px`,\n      borderStyle: 'dashed',\n      borderColor: 'rgb(220, 220, 220)',\n      borderLeftWidth: 0,\n      borderRightWidth: 0,\n      borderBottomWidth: 0,\n      borderTopWidth: 0,\n      backgroundColor: worldBackgroundColor,\n    }}>\n      <FadeIn>\n        <WorldSpinner />\n      </FadeIn>\n    </div>\n  );\n\n  const joystickController = withJoystickControl ? (\n    <CarJoystickController />\n  ) : null;\n\n  const keyboardController = withKeyboardControl ? (\n    <CarKeyboardController />\n  ) : null;\n\n  const cameraFov = window.innerWidth < WIDER_CAMERA_SCREEN_MAX_WIDTH ? 30 : 25;\n\n  const environment = performanceBoost ? null : (\n    <Environment background={false} preset={'night'} />\n  );\n\n  return (\n    <Block position=\"relative\" overflow=\"hidden\" display=\"block\" height={`${WORLD_CONTAINER_HEIGHT}px`}>\n      {preLoader}\n      <WorldContainer>\n        <Canvas shadows key={version}>\n          <PerspectiveCamera\n            makeDefault\n            fov={cameraFov}\n            position={[-20, 20, 0]}\n          />\n          <OrbitControls />\n          <color attach=\"background\" args={[worldBackgroundColor]} />\n          <hemisphereLight intensity={1} groundColor={new THREE.Color( 0x080820 )} />\n          <spotLight\n            position={[-10, 20, 10]}\n            angle={0.8}\n            penumbra={1}\n            intensity={1.5}\n            shadow-mapSize-width={2048}\n            shadow-mapSize-height={2048}\n            castShadow\n          />\n          <Physics\n            step={1 / 60}\n            gravity={[0, -10, 0]}\n            iterations={10}\n            defaultContactMaterial={{\n              friction: 0.01,\n              restitution: 0.01,\n              contactEquationRelaxation: 4,\n            }}\n            broadphase=\"SAP\"\n            allowSleep\n          >\n            {environment}\n            {children}\n          </Physics>\n\n          {/* @see: https://docs.pmnd.rs/drei/performance/adaptive-dpr */}\n          <AdaptiveDpr pixelated />\n        </Canvas>\n      </WorldContainer>\n      {joystickController}\n      {keyboardController}\n      {stats}\n    </Block>\n  );\n}\n\nconst WorldContainer = styled('div', {\n  height: `${WORLD_CONTAINER_HEIGHT}px`,\n  boxSizing: 'border-box',\n  borderStyle: 'dashed',\n  borderColor: 'rgb(220, 220, 220)',\n  borderWidth: 0,\n});\n\nexport default World;\n","import React from 'react';\nimport { usePlane, PlaneProps, } from '@react-three/cannon';\nimport { NumVec2 } from '../../../types/vectors';\n\nfunction Ground(props: PlaneProps) {\n  const args: NumVec2 = [200, 200];\n  const [ref] = usePlane(() => ({\n    type: 'Static',\n    rotation: [-Math.PI / 2, 0, 0],\n    args,\n    ...props,\n  }))\n  return (\n    <mesh ref={ref} receiveShadow>\n      <planeBufferGeometry args={args} />\n      <shadowMaterial color=\"#225380\" opacity={0.4} />\n    </mesh>\n  )\n}\n\nexport default Ground;\n","import { APP_BASE_PATH } from '../../../constants/app';\n\nexport const MODEL_BASE_PATH = `${APP_BASE_PATH}/models`;\n","import { MODEL_BASE_PATH } from '../constants/models';\n\nexport const getModelPath = (modelFileName: string): string => {\n  return `${MODEL_BASE_PATH}/${modelFileName}`;\n};\n","export type Bit = 0 | 1;\n\nexport type Bits = Bit[];\n\nexport type PrecisionConfig = {\n  signBitsCount: number,\n  exponentBitsCount: number,\n  fractionBitsCount: number,\n  totalBitsCount: number,\n};\n\nexport type PrecisionConfigs = {\n  custom: PrecisionConfig,\n  half: PrecisionConfig,\n  single: PrecisionConfig,\n  double: PrecisionConfig,\n};\n\n/*\n  ┌───────────────── sign bit\n  │   ┌───────────── exponent bits\n  │   │       ┌───── fraction bits\n  │   │       │\n  X XXXXX XXXXXXXXXX\n\n  @see: https://trekhleb.dev/blog/2021/binary-floating-point/\n */\nexport const precisionConfigs: PrecisionConfigs = {\n  // Custom-made 10-bits precision for faster evolution progress.\n  custom: {\n    signBitsCount: 1,\n    exponentBitsCount: 4,\n    fractionBitsCount: 5,\n    totalBitsCount: 10,\n  },\n  // @see: https://en.wikipedia.org/wiki/Half-precision_floating-point_format\n  half: {\n    signBitsCount: 1,\n    exponentBitsCount: 5,\n    fractionBitsCount: 10,\n    totalBitsCount: 16,\n  },\n  // @see: https://en.wikipedia.org/wiki/Single-precision_floating-point_format\n  single: {\n    signBitsCount: 1,\n    exponentBitsCount: 8,\n    fractionBitsCount: 23,\n    totalBitsCount: 32,\n  },\n  // @see: https://en.wikipedia.org/wiki/Double-precision_floating-point_format\n  double: {\n    signBitsCount: 1,\n    exponentBitsCount: 11,\n    fractionBitsCount: 52,\n    totalBitsCount: 64,\n  },\n};\n\n// Converts the binary representation of the floating point number to decimal float number.\nfunction bitsToFloat(bits: Bits, precisionConfig: PrecisionConfig): number {\n  const { signBitsCount, exponentBitsCount } = precisionConfig;\n\n  // Figuring out the sign.\n  const sign = (-1) ** bits[0]; // -1^1 = -1, -1^0 = 1\n\n  // Calculating the exponent value.\n  const exponentBias = 2 ** (exponentBitsCount - 1) - 1;\n  const exponentBits = bits.slice(signBitsCount, signBitsCount + exponentBitsCount);\n  const exponentUnbiased = exponentBits.reduce(\n    (exponentSoFar: number, currentBit: Bit, bitIndex: number) => {\n      const bitPowerOfTwo = 2 ** (exponentBitsCount - bitIndex - 1);\n      return exponentSoFar + currentBit * bitPowerOfTwo;\n    },\n    0,\n  );\n  const exponent = exponentUnbiased - exponentBias;\n\n  // Calculating the fraction value.\n  const fractionBits = bits.slice(signBitsCount + exponentBitsCount);\n  const fraction = fractionBits.reduce(\n    (fractionSoFar: number, currentBit: Bit, bitIndex: number) => {\n      const bitPowerOfTwo = 2 ** -(bitIndex + 1);\n      return fractionSoFar + currentBit * bitPowerOfTwo;\n    },\n    0,\n  );\n\n  // Putting all parts together to calculate the final number.\n  return sign * (2 ** exponent) * (1 + fraction);\n}\n\n// Converts the 16-bit binary representation of the floating point number to decimal float number.\nexport function bitsToFloat16(bits: Bits): number {\n  return bitsToFloat(bits, precisionConfigs.half);\n}\n\n// Converts the 8-bit binary representation of the floating point number to decimal float number.\nexport function bitsToFloat10(bits: Bits): number {\n  return bitsToFloat(bits, precisionConfigs.custom);\n}\n","export const linearPolynomial = (coefficients: number[], variables: number[]): number => {\n  if (coefficients.length !== (variables.length + 1)) {\n    throw new Error(`Incompatible number polynomial coefficients and variables: ${coefficients.length} and ${variables.length}`);\n  }\n  let result = 0;\n  coefficients.forEach((coefficient: number, coefficientIndex: number) => {\n    if (coefficientIndex < variables.length) {\n      result += coefficient * variables[coefficientIndex];\n    } else {\n      result += coefficient\n    }\n  });\n  return result;\n};\n","export const sigmoid = (x: number): number => {\n  return 1 / (1 + Math.E ** -x);\n};\n\nexport const sigmoidToCategories = (\n  sigmoidValue: number,\n  aroundZeroMargin: number = 0.49999, // Value between 0 and 0.5:  [0 ... (0.5 - margin) ... 0.5 ... (0.5 + margin) ... 1]\n): -1 | 0 | 1 => {\n  if (sigmoidValue < (0.5 - aroundZeroMargin)) {\n    return -1;\n  }\n  if (sigmoidValue > (0.5 + aroundZeroMargin)) {\n    return 1;\n  }\n  return 0;\n};\n","import { NumVec3 } from '../../types/vectors';\n\n// Calculates the XZ distance between two points in space.\n// The vertical Y distance is not being taken into account.\nexport const euclideanDistance = (from: NumVec3, to: NumVec3) => {\n  const fromX = from[0];\n  const fromZ = from[2];\n  const toX = to[0];\n  const toZ = to[2];\n  return Math.sqrt((fromX - toX) ** 2 + (fromZ - toZ) ** 2);\n};\n","import { RectanglePoints } from '../types/vectors';\nimport { Gene, Genome } from './genetic';\nimport { bitsToFloat10, precisionConfigs } from './math/floats';\nimport { linearPolynomial } from './math/polynomial';\nimport { sigmoid, sigmoidToCategories } from './math/sigmoid';\nimport { euclideanDistance } from './math/geometry';\n\n// Car has 16 distance sensors.\nexport const CAR_SENSORS_NUM = 8;\n\n// Additional formula coefficient that is not connected to a sensor.\nexport const BIAS_UNITS = 1;\n\n// How many genes we need to encode each numeric parameter for the formulas.\nexport const GENES_PER_NUMBER = precisionConfigs.custom.totalBitsCount;\n\n// Based on 8 distance sensors we need to provide two formulas that would define car's behaviour:\n// 1. Engine formula (input: 8 sensors; output: -1 (backward), 0 (neutral), +1 (forward))\n// 2. Wheels formula (input: 8 sensors; output: -1 (left), 0 (straight), +1 (right))\nexport const ENGINE_FORMULA_GENES_NUM = (CAR_SENSORS_NUM + BIAS_UNITS) * GENES_PER_NUMBER;\nexport const WHEELS_FORMULA_GENES_NUM = (CAR_SENSORS_NUM + BIAS_UNITS) * GENES_PER_NUMBER;\n\n// The length of the binary genome of the car.\nexport const GENOME_LENGTH = ENGINE_FORMULA_GENES_NUM + WHEELS_FORMULA_GENES_NUM;\n\ntype LossParams = {\n  wheelsPosition: RectanglePoints,\n  parkingLotCorners: RectanglePoints,\n};\n\n// Loss function calculates how far the car is from the parking lot\n// by comparing the wheels positions with parking lot corners positions.\nexport const carLoss = (params: LossParams): number => {\n  const { wheelsPosition, parkingLotCorners } = params;\n\n  const {\n    fl: flWheel,\n    fr: frWheel,\n    br: brWheel,\n    bl: blWheel,\n  } = wheelsPosition;\n\n  const {\n    fl: flCorner,\n    fr: frCorner,\n    br: brCorner,\n    bl: blCorner,\n  } = parkingLotCorners;\n\n  const flDistance = euclideanDistance(flWheel, flCorner);\n  const frDistance = euclideanDistance(frWheel, frCorner);\n  const brDistance = euclideanDistance(brWheel, brCorner);\n  const blDistance = euclideanDistance(blWheel, blCorner);\n\n  return (flDistance + frDistance + brDistance + blDistance) / 4;\n};\n\nexport const carLossToFitness = (loss: number, alpha: number = 1): number => {\n  return 1 / (alpha * loss + 1);\n};\n\nexport type SensorValues = number[];\n\nexport type FormulaCoefficients = number[];\n\nexport type FormulaResult = -1 | 0 | 1;\n\ntype DecodedGenome = {\n  engineFormulaCoefficients: FormulaCoefficients,\n  wheelsFormulaCoefficients: FormulaCoefficients,\n}\n\nexport const decodeGenome = (genome: Genome): DecodedGenome => {\n  const engineGenes: Gene[] = genome.slice(0, ENGINE_FORMULA_GENES_NUM);\n  const wheelsGenes: Gene[] = genome.slice(\n    ENGINE_FORMULA_GENES_NUM,\n    ENGINE_FORMULA_GENES_NUM + WHEELS_FORMULA_GENES_NUM,\n  );\n\n  const engineFormulaCoefficients: FormulaCoefficients = genomeToNumbers(engineGenes, GENES_PER_NUMBER);\n  const wheelsFormulaCoefficients: FormulaCoefficients = genomeToNumbers(wheelsGenes, GENES_PER_NUMBER);\n\n  return {\n    engineFormulaCoefficients,\n    wheelsFormulaCoefficients,\n  };\n};\n\nexport const genomeToNumbers = (genome: Genome, genesPerNumber: number): number[] => {\n  if (genome.length % genesPerNumber !== 0) {\n    throw new Error('Wrong number of genes in the numbers genome');\n  }\n  const numbers: number[] = [];\n  for (let numberIndex = 0; numberIndex < genome.length; numberIndex += genesPerNumber) {\n    const number: number = bitsToFloat10(genome.slice(numberIndex, numberIndex + genesPerNumber));\n    numbers.push(number);\n  }\n  return numbers;\n};\n\nexport const engineFormula = (genome: Genome, sensors: SensorValues): FormulaResult => {\n  const {engineFormulaCoefficients} = decodeGenome(genome);\n  const rawResult = linearPolynomial(engineFormulaCoefficients, sensors);\n  const normalizedResult = sigmoid(rawResult);\n  return sigmoidToCategories(normalizedResult);\n};\n\nexport const wheelsFormula = (genome: Genome, sensors: SensorValues): FormulaResult => {\n  const {wheelsFormulaCoefficients} = decodeGenome(genome);\n  const rawResult = linearPolynomial(wheelsFormulaCoefficients, sensors);\n  const normalizedResult = sigmoid(rawResult);\n  return sigmoidToCategories(normalizedResult);\n};\n","import { NumVec3 } from '../../../types/vectors';\nimport { getModelPath } from '../utils/models';\nimport { CAR_SENSORS_NUM } from '../../../libs/carGenetic';\n\n// Wheels.\nexport const WHEEL_OBJECT_NAME = 'wheel';\nexport const WHEEL_MASS = 0.1;\nexport const WHEEL_RADIUS = 0.3;\nexport const WHEEL_WIDTH = 0.5;\nexport const WHEEL_MODEL_PATH = getModelPath('wheel.glb');\nexport const WHEEL_SUSPENSION_STIFFNESS = 30;\nexport const WHEEL_SUSPENSION_REST_LENGTH = 0.3;\nexport const WHEEL_MAX_SUSPENSION_FORCE = 10000;\nexport const WHEEL_MAX_SUSPENSION_TRAVEL = 0.3;\nexport const WHEEL_DAMPING_RELAXATION = 2.3;\nexport const WHEEL_DAMPING_COMPRESSION = 4.4;\nexport const WHEEL_FRICTION_SLIP = 5;\nexport const WHEEL_ROLL_INFLUENCE = 0.01;\nexport const WHEEL_CUSTOM_SLIDING_ROTATION_SPEED = -30;\n\n// Roughly the cars' visual dimensions.\nexport const CHASSIS_OBJECT_NAME = 'chassis';\nexport const CHASSIS_LENGTH = 4;\nexport const CHASSIS_WIDTH = 1.5;\nexport const CHASSIS_HEIGHT = 1;\nexport const CHASSIS_SIZE: NumVec3 = [CHASSIS_WIDTH, CHASSIS_HEIGHT, CHASSIS_LENGTH];\nexport const CHASSIS_MASS = 3; // kg\nexport const CHASSIS_BASE_COLOR = '#FFFFFF';\nexport const CHASSIS_SIMPLIFIED_BASE_COLOR = 'orange';\nexport const CHASSIS_BASE_TOUCHED_COLOR = '#FF1111';\nexport const CHASSIS_FRONT_WHEEL_SHIFT = 1.3;\nexport const CHASSIS_BACK_WHEEL_SHIFT = -1.15;\nexport const CHASSIS_GROUND_CLEARANCE = -0.04;\nexport const CHASSIS_WHEEL_WIDTH = 1.2;\nexport const CHASSIS_MODEL_PATH = getModelPath('beetle.glb');\nexport const CHASSIS_RELATIVE_POSITION: NumVec3 = [0, -0.6, 0];\n\n// Sensors.\nexport const SENSORS_NUM = CAR_SENSORS_NUM;\nexport const SENSOR_HEIGHT = -0.15;\nexport const SENSOR_DISTANCE = 4;\nexport const SENSOR_DISTANCE_FALLBACK = 0;\n\n// Car.\nexport const CAR_MAX_STEER_VALUE = 0.6;\nexport const CAR_MAX_FORCE = 2;\nexport const CAR_MAX_BREAK_FORCE = 2;\n","import * as THREE from 'three';\nimport { Material } from 'three/src/materials/Material';\nimport { MeshStandardMaterialParameters } from 'three/src/materials/MeshStandardMaterial';\nimport { MeshPhysicalMaterialParameters } from 'three';\n\nexport const getSteel = (props: MeshStandardMaterialParameters): Material => {\n  return new THREE.MeshStandardMaterial({\n    metalness: 0.9,\n    roughness: 0.1,\n    ...props,\n  });\n};\n\nexport const getRubber = (props: MeshStandardMaterialParameters): Material => {\n  return new THREE.MeshStandardMaterial({\n    ...props,\n  });\n};\n\nexport const getPlastic = (props: MeshStandardMaterialParameters): Material => {\n  return new THREE.MeshStandardMaterial({\n    ...props,\n  });\n};\n\nexport const getGlass = (props: MeshPhysicalMaterialParameters): Material => {\n  return new THREE.MeshPhysicalMaterial({\n    metalness: 0.5,\n    roughness: 0,\n    transmission: 0.9,\n    ...props,\n    transparent: true,\n    color: '#FFFFFF',\n  });\n};\n","import React from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { GroupProps } from '@react-three/fiber';\nimport { MeshBVH } from 'three-mesh-bvh';\n\nimport { ModelData } from '../types/models';\nimport { getPlastic, getRubber, getSteel, getGlass } from '../utils/materials';\nimport { CHASSIS_MODEL_PATH } from './constants';\n\n// Preview the model: https://sandbox.babylonjs.com/\n// @see: https://github.com/pmndrs/drei#usegltf\n// useGLTF.preload(CHASSIS_MODEL_PATH);\n\ntype ChassisModelProps = {\n  bodyProps?: GroupProps,\n  wireframe?: boolean,\n  castShadow?: boolean,\n  receiveShadow?: boolean,\n  styled?: boolean,\n  baseColor?: string,\n};\n\nfunction ChassisModel(props: ChassisModelProps) {\n  const {\n    bodyProps = {},\n    wireframe = false,\n    styled = true,\n    castShadow = true,\n    receiveShadow = true,\n    baseColor: color,\n  } = props;\n\n  const { nodes, materials }: ModelData = useGLTF(CHASSIS_MODEL_PATH);\n\n  Object.keys(nodes).forEach((geometryKey) => {\n    if (geometryKey.startsWith('chassis_')) {\n      // @ts-ignore\n      nodes[geometryKey].geometry.boundsTree = new MeshBVH(nodes[geometryKey].geometry);\n    }\n  });\n\n  return (\n    <group {...bodyProps}>\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Black paint'] : getSteel({wireframe, color: '#000000'})}\n        geometry={nodes.chassis_1.geometry}\n      />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Rubber'] : getRubber({wireframe, color: '#000000'})}\n        geometry={nodes.chassis_2.geometry}\n      />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Paint'] : getSteel({wireframe, color})}\n        geometry={nodes.chassis_3.geometry}\n      />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Underbody'] : getSteel({wireframe, color: '#000000'})}\n        geometry={nodes.chassis_4.geometry}\n      />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Chrom'] : getSteel({wireframe, color})}\n        geometry={nodes.chassis_5.geometry}\n      />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Interior (dark)'] : getPlastic({wireframe, color: '#000000'})}\n        geometry={nodes.chassis_6.geometry}\n      />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Interior (light)'] : getPlastic({wireframe, color})}\n        geometry={nodes.chassis_7.geometry}\n      />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Reflector'] : getPlastic({wireframe, color})}\n        geometry={nodes.chassis_8.geometry}\n      />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Glass'] : getGlass({wireframe, color})}\n        geometry={nodes.chassis_9.geometry} />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Steel'] : getSteel({wireframe, color})}\n        geometry={nodes.chassis_10.geometry}\n      />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Black plastic'] : getPlastic({wireframe, color: '#000000'})}\n        geometry={nodes.chassis_11.geometry}\n      />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Headlight'] : getGlass({wireframe, color})}\n        geometry={nodes.chassis_12.geometry}\n      />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Reverse lights'] : getGlass({wireframe, color})}\n        geometry={nodes.chassis_13.geometry} />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Orange plastic'] : getPlastic({wireframe, color})}\n        geometry={nodes.chassis_14.geometry}\n      />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['Tail lights'] : getGlass({wireframe, color})}\n        geometry={nodes.chassis_15.geometry}\n      />\n      <mesh\n        receiveShadow={receiveShadow}\n        castShadow={castShadow}\n        material={styled ? materials['License Plate'] : getSteel({wireframe, color})}\n        geometry={nodes.chassis_16.geometry}\n      />\n    </group>\n  )\n}\n\nexport default ChassisModel;\n","import React, { useEffect, useRef } from 'react';\nimport { Line2 } from 'three/examples/jsm/lines/Line2';\nimport * as THREE from 'three';\nimport { useFrame } from '@react-three/fiber';\nimport throttle from 'lodash/throttle';\nimport { RootState } from '@react-three/fiber/dist/declarations/src/core/store';\nimport { Intersection } from 'three/src/core/Raycaster';\nimport { acceleratedRaycast } from 'three-mesh-bvh';\nimport { DebouncedFunc } from 'lodash';\n\nimport { NumVec3 } from '../../../types/vectors';\nimport { SENSOR_DISTANCE } from './constants';\nimport { INTERSECT_THROTTLE_TIMEOUT, ON_RAY_THROTTLE_TIMEOUT } from '../constants/performance';\n\nconst beamColor = new THREE.Color(0x009900);\nconst beamWarningColor = new THREE.Color(0xFFFF00);\nconst beamDangerColor = new THREE.Color(0xFF0000);\nconst lineWidth = 0.5;\n\nTHREE.Mesh.prototype.raycast = acceleratedRaycast;\n\ntype SensorRayProps = {\n  index: number,\n  from: NumVec3,\n  to: NumVec3,\n  angleX: number,\n  obstacles?: THREE.Object3D[],\n  visible?: boolean,\n  onRay?: (index: number, distance: number | undefined) => void,\n};\n\nconst SensorRay = (props: SensorRayProps) => {\n  const {\n    index,\n    from,\n    to,\n    angleX,\n    obstacles = [],\n    visible = false,\n    onRay = (index, distance) => {},\n  } = props;\n\n  const lineRef = useRef<Line2>();\n\n  const positionRef = useRef<THREE.Vector3>(new THREE.Vector3());\n  const directionRef = useRef<THREE.Vector3>(new THREE.Vector3());\n  const raycasterRef = useRef<THREE.Raycaster>(new THREE.Raycaster());\n\n  const intersectObjectsThrottledRef = useRef<DebouncedFunc<(...args: any[]) => any> | null>(null);\n  const onRayCallbackThrottledRef = useRef<DebouncedFunc<(...args: any[]) => any> | null>(null);\n\n  const intersectionRef = useRef<Intersection[]>([]);\n  raycasterRef.current.near = 0;\n  raycasterRef.current.far = SENSOR_DISTANCE;\n\n  // @ts-ignore\n  raycasterRef.current.firstHitOnly = true;\n\n  const intersectObjects = () => {\n    intersectionRef.current = raycasterRef.current.intersectObjects(obstacles, true);\n  };\n\n  // if (!intersectObjectsThrottledRef.current) {\n  //   intersectObjectsThrottledRef.current = throttle(intersectObjects, INTERSECT_THROTTLE_TIMEOUT, {\n  //     leading: true,\n  //     trailing: true,\n  //   });\n  // }\n  intersectObjectsThrottledRef.current = throttle(intersectObjects, INTERSECT_THROTTLE_TIMEOUT, {\n    leading: true,\n    trailing: true,\n  });\n\n  const onRayCallback = (index: number, distance: number | undefined): void => {\n    onRay(index, distance);\n  };\n\n  if (!onRayCallbackThrottledRef.current) {\n    onRayCallbackThrottledRef.current = throttle(onRayCallback, ON_RAY_THROTTLE_TIMEOUT, {\n      leading: true,\n      trailing: true,\n    });\n  }\n\n  useFrame((state: RootState, delta: number) => {\n    if (!lineRef?.current) {\n      return;\n    }\n\n    lineRef.current.getWorldPosition(positionRef.current);\n    lineRef.current.getWorldDirection(directionRef.current);\n\n    raycasterRef.current.set(positionRef.current, directionRef.current);\n\n    if (intersectObjectsThrottledRef.current) {\n      intersectObjectsThrottledRef.current();\n    }\n\n    const distance = intersectionRef.current.length\n      ? intersectionRef.current[0].distance\n      : undefined;\n\n    if (onRayCallbackThrottledRef.current) {\n      onRayCallbackThrottledRef.current(index, distance);\n    }\n\n    if (distance === undefined) {\n      lineRef.current.material.color = beamColor;\n    } else if (distance > (SENSOR_DISTANCE - SENSOR_DISTANCE / 4)) {\n      lineRef.current.material.color = beamWarningColor;\n    } else {\n      lineRef.current.material.color = beamDangerColor;\n    }\n  });\n\n  const onUnmount = () => {\n    if (intersectObjectsThrottledRef.current) {\n      intersectObjectsThrottledRef.current.cancel();\n    }\n    if (onRayCallbackThrottledRef.current) {\n      onRayCallbackThrottledRef.current.cancel();\n    }\n  };\n\n  useEffect(() => {\n    return onUnmount;\n  }, [])\n\n  useEffect(() => {\n    if (!lineRef.current) {\n      return;\n    }\n    lineRef.current.rotateY(angleX);\n  }, [angleX]);\n\n  const lineGeometry = new THREE.BufferGeometry().setFromPoints([\n    new THREE.Vector3(...from),\n    new THREE.Vector3(...to),\n  ]);\n\n  return (\n    <group>\n      {/* @ts-ignore */}\n      <line ref={lineRef} geometry={lineGeometry}>\n        <lineBasicMaterial\n          attach=\"material\"\n          color={beamColor}\n          linewidth={lineWidth}\n          visible={visible}\n        />\n      </line>\n    </group>\n  )\n};\n\nexport default SensorRay;\n","// Throttle the check of the ray intersection with other objects.\nexport const INTERSECT_THROTTLE_TIMEOUT = 100;\n\n// Throttle the onRay sensor events.\nexport const ON_RAY_THROTTLE_TIMEOUT = 100;\n\n// Throttle the onSensors sensor events.\nexport const ON_SENSORS_THROTTLE_TIMEOUT = 100;\n\n// Throttle the onMove events.\nexport const ON_MOVE_THROTTLE_TIMEOUT = 100;\n\n// Throttle the update cat label events.\nexport const ON_UPDATE_LABEL_THROTTLE_TIMEOUT = 600;\n","import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport throttle from 'lodash/throttle';\nimport { DebouncedFunc } from 'lodash';\nimport { useThree } from '@react-three/fiber';\n\nimport { CHASSIS_OBJECT_NAME, SENSOR_DISTANCE, SENSOR_HEIGHT } from './constants';\nimport SensorRay from './SensorRay';\nimport { CarMetaData, SensorValuesType } from '../types/car';\nimport { ON_SENSORS_THROTTLE_TIMEOUT } from '../constants/performance';\n\ntype SensorsProps = {\n  sensorsNum: number,\n  visibleSensors?: boolean,\n  onSensors?: (sensors: SensorValuesType) => void,\n};\n\nconst Sensors = (props: SensorsProps) => {\n  const { visibleSensors = false, sensorsNum, onSensors = () => {} } = props;\n  const obstacles = useRef<THREE.Object3D[]>([]);\n  const sensorDistances = useRef<SensorValuesType>(new Array(sensorsNum).fill(undefined));\n  const { scene } = useThree();\n  const onSensorsCallbackThrottledRef = useRef<DebouncedFunc<(...args: any[]) => any> | null>(null);\n\n  const onSensorsCallback = () => {\n    onSensors(sensorDistances.current);\n  };\n\n  if (!onSensorsCallbackThrottledRef.current) {\n    onSensorsCallbackThrottledRef.current = throttle(onSensorsCallback, ON_SENSORS_THROTTLE_TIMEOUT, {\n      leading: true,\n      trailing: true,\n    });\n  }\n\n  const onRay = (index: number, distance: number | undefined): void => {\n    sensorDistances.current[index] = typeof distance === 'number'\n      ? distance\n      : null;\n    if (onSensorsCallbackThrottledRef.current) {\n      onSensorsCallbackThrottledRef.current();\n    }\n  };\n\n  // @ts-ignore\n  obstacles.current = scene.children\n    .filter((object: THREE.Object3D) => object.type === 'Group')\n    .map((object: THREE.Object3D) => object.getObjectByName(CHASSIS_OBJECT_NAME))\n    .filter((object: THREE.Object3D | undefined) => {\n      if (!object || !object.userData) {\n        return false;\n      }\n      // @ts-ignore\n      const userData: CarMetaData = object.userData;\n      return userData?.isSensorObstacle;\n    });\n\n  const angleStep = 2 * Math.PI / sensorsNum;\n  const sensorRays = new Array(sensorsNum).fill(null).map((_, index) => {\n    return (\n      <SensorRay\n        key={index}\n        index={index}\n        from={[0, SENSOR_HEIGHT, 0]}\n        to={[0, SENSOR_HEIGHT, SENSOR_DISTANCE]}\n        angleX={angleStep * index}\n        visible={visibleSensors}\n        obstacles={obstacles.current}\n        onRay={onRay}\n      />\n    );\n  });\n\n  const onUnmount = () => {\n    if (onSensorsCallbackThrottledRef.current) {\n      onSensorsCallbackThrottledRef.current.cancel();\n    }\n  };\n\n  useEffect(() => {\n    return onUnmount;\n  }, []);\n\n  return (\n    <>\n      {sensorRays}\n    </>\n  )\n};\n\nexport default Sensors;\n","import React, { CSSProperties } from 'react';\nimport { Html } from '@react-three/drei';\n\ntype CarLabelProps = {\n  content: React.ReactNode,\n};\n\nfunction CarLabel(props: CarLabelProps) {\n  const { content } = props;\n\n  const labelStyle: CSSProperties = {\n    backgroundColor: 'rgba(255, 255, 255, 0.7)',\n    padding: '0px 5px',\n    borderRadius: '10px',\n    color: 'black',\n    fontSize: '10px',\n    whiteSpace: 'nowrap',\n  };\n\n  return (\n    <Html position={[0, 2.5, 0]}>\n      <div style={labelStyle}>\n        {content}\n      </div>\n    </Html>\n  )\n}\n\nexport default CarLabel;\n","import React from 'react';\nimport { GroupProps } from '@react-three/fiber';\n\nimport { CHASSIS_HEIGHT, CHASSIS_LENGTH, CHASSIS_WIDTH } from './constants';\n\ntype ChassisModelSimpleProps = {\n  bodyProps?: GroupProps,\n  wireframe?: boolean,\n  castShadow?: boolean,\n  receiveShadow?: boolean,\n  styled?: boolean,\n  baseColor?: string,\n};\n\nfunction ChassisModelSimple(props: ChassisModelSimpleProps) {\n  const {\n    castShadow = true,\n    receiveShadow = true,\n    baseColor: color,\n  } = props;\n\n  const boxArgs: number[] = [\n    CHASSIS_WIDTH - 0.2,\n    CHASSIS_HEIGHT - 0.4,\n    CHASSIS_LENGTH - 0.2,\n  ];\n\n  return (\n    <mesh castShadow={castShadow} receiveShadow={receiveShadow} >\n      {/* @ts-ignore */}\n      <boxBufferGeometry args={boxArgs} />\n      <meshPhysicalMaterial color={color} />\n    </mesh>\n  );\n}\n\nexport default ChassisModelSimple;\n","import { BoxProps, useBox } from '@react-three/cannon';\nimport React, { forwardRef } from 'react';\nimport * as THREE from 'three';\nimport { GroupProps } from '@react-three/fiber';\n\nimport { CHASSIS_MASS, CHASSIS_OBJECT_NAME, CHASSIS_SIZE } from './constants';\nimport { NumVec3 } from '../../../types/vectors';\nimport ChassisModel from './ChassisModel';\nimport Sensors from './Sensors';\nimport CarLabel from './CarLabel';\nimport { SensorValuesType } from '../types/car';\nimport ChassisModelSimple from './ChassisModelSimple';\n\ntype ChassisProps = {\n  sensorsNum: number,\n  weight?: number,\n  wireframe?: boolean,\n  castShadow?: boolean,\n  receiveShadow?: boolean,\n  withSensors?: boolean,\n  visibleSensors?: boolean,\n  styled?: boolean,\n  label?: React.ReactNode,\n  movable?: boolean,\n  baseColor?: string,\n  chassisPosition: NumVec3,\n  bodyProps: BoxProps,\n  onCollide?: (event: any) => void,\n  userData?: Record<string, any>,\n  collisionFilterGroup?: number,\n  collisionFilterMask?: number,\n  onSensors?: (sensors: SensorValuesType) => void,\n  performanceBoost: boolean,\n}\n\nconst Chassis = forwardRef<THREE.Object3D | undefined, ChassisProps>((props, ref) => {\n  const {\n    sensorsNum,\n    wireframe = false,\n    styled = true,\n    castShadow = true,\n    receiveShadow = true,\n    movable = true,\n    withSensors = false,\n    visibleSensors = false,\n    weight = CHASSIS_MASS,\n    label = null,\n    baseColor,\n    chassisPosition,\n    bodyProps,\n    userData = {},\n    collisionFilterGroup,\n    collisionFilterMask,\n    onCollide = () => {},\n    onSensors = () => {},\n    performanceBoost,\n  } = props;\n\n  const boxSize = CHASSIS_SIZE;\n  useBox(\n    () => ({\n      mass: weight,\n      allowSleep: false,\n      args: boxSize,\n      collisionFilterGroup,\n      collisionFilterMask,\n      onCollide,\n      userData,\n      type: movable ? 'Dynamic' : 'Static',\n      ...bodyProps,\n    }),\n    // @ts-ignore\n    ref\n  )\n\n  const groupProps: GroupProps = {\n    position: chassisPosition,\n  };\n\n  const sensors = withSensors ? (\n    <Sensors\n      visibleSensors={visibleSensors}\n      sensorsNum={sensorsNum}\n      onSensors={onSensors}\n    />\n  ) : null;\n\n  const carLabel = label ? (\n    <CarLabel content={label} />\n  ) : null;\n\n  const chassisModel = performanceBoost ? (\n    <ChassisModelSimple\n      bodyProps={groupProps}\n      castShadow={castShadow}\n      receiveShadow={receiveShadow}\n      baseColor={baseColor}\n    />\n  ) : (\n    <ChassisModel\n      bodyProps={groupProps}\n      castShadow={castShadow}\n      receiveShadow={receiveShadow}\n      wireframe={wireframe}\n      styled={styled}\n      baseColor={baseColor}\n    />\n  );\n\n  return (\n    <group ref={ref} name={CHASSIS_OBJECT_NAME}>\n      <mesh>\n        {chassisModel}\n      </mesh>\n      {sensors}\n      {carLabel}\n    </group>\n  )\n})\n\nexport default Chassis;\n","import React from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { GroupProps } from '@react-three/fiber';\n\nimport { ModelData } from '../types/models';\nimport { getRubber, getSteel } from '../utils/materials';\nimport { WHEEL_MODEL_PATH } from './constants';\n\n// Preview the model.\n// @see: https://github.com/pmndrs/drei#usegltf\n// useGLTF.preload(WHEEL_MODEL_PATH);\n\ntype WheelModelProps = {\n  castShadow?: boolean,\n  receiveShadow?: boolean,\n  groupProps?: GroupProps,\n  styled?: boolean,\n  wireframe?: boolean,\n  baseColor?: string,\n};\n\nfunction WheelModel(props: WheelModelProps) {\n  const {\n    castShadow = true,\n    receiveShadow = true,\n    groupProps = {},\n    styled = true,\n    wireframe = false,\n    baseColor: color,\n  } = props;\n\n  const { nodes, materials }: ModelData = useGLTF(WHEEL_MODEL_PATH);\n\n  const tire = nodes.wheel_1?.geometry;\n  const disc = nodes.wheel_2?.geometry;\n  const cap = nodes.wheel_3?.geometry;\n\n  const tireMaterial = styled\n    ? materials.Rubber\n    : getRubber({ wireframe, color: '#000000' });\n\n  // const discMaterial = styled\n  //   ? materials.Steel\n  //   : getSteel({ wireframe });\n\n  const discMaterial = getSteel({ wireframe, color });\n\n  const capMaterial = styled\n    ? materials.Chrom\n    : getSteel({ wireframe, color });\n\n  return (\n    <group {...groupProps}>\n      <mesh\n        geometry={tire}\n        material={tireMaterial}\n        castShadow={castShadow}\n        receiveShadow={receiveShadow}\n      />\n      <mesh\n        geometry={disc}\n        material={discMaterial}\n        castShadow={castShadow}\n        receiveShadow={receiveShadow}\n      />\n      <mesh\n        geometry={cap}\n        material={capMaterial}\n        castShadow={castShadow}\n        receiveShadow={receiveShadow}\n      />\n    </group>\n  )\n}\n\nexport default WheelModel;\n","import React from 'react';\nimport { GroupProps } from '@react-three/fiber';\n\nimport { WHEEL_WIDTH, WHEEL_RADIUS } from './constants';\n\ntype WheelModelSimpleProps = {\n  castShadow?: boolean,\n  receiveShadow?: boolean,\n  groupProps?: GroupProps,\n  styled?: boolean,\n  wireframe?: boolean,\n  baseColor?: string,\n};\n\nfunction WheelModelSimple(props: WheelModelSimpleProps) {\n  const {\n    castShadow = true,\n    receiveShadow = true,\n    baseColor: color,\n  } = props;\n\n  const cylinderArgs: [number, number, number, number] = [\n    WHEEL_RADIUS,\n    WHEEL_RADIUS,\n    WHEEL_WIDTH,\n    20,\n  ];\n\n  return (\n    <mesh castShadow={castShadow} receiveShadow={receiveShadow} >\n      <cylinderBufferGeometry args={cylinderArgs} />\n      <meshPhysicalMaterial color={color} />\n    </mesh>\n  );\n}\n\nexport default WheelModelSimple;\n","import React, { forwardRef } from 'react';\nimport { useCylinder, CylinderProps } from '@react-three/cannon';\nimport * as THREE from 'three';\n\nimport { NumVec3, NumVec4 } from '../../../types/vectors';\nimport { WHEEL_MASS, WHEEL_OBJECT_NAME, WHEEL_WIDTH } from './constants';\nimport WheelModel from './WheelModel';\nimport WheelModelSimple from './WheelModelSimple';\n\ntype WheelProps = {\n  radius: number,\n  mass?: number,\n  width?: number,\n  segments?: number,\n  castShadow?: boolean,\n  receiveShadow?: boolean,\n  isLeft?: boolean,\n  styled?: boolean,\n  wireframe?: boolean,\n  baseColor?: string,\n  collisionFilterGroup?: number,\n  collisionFilterMask?: number,\n  bodyProps?: CylinderProps,\n  performanceBoost: boolean,\n}\n\nconst Wheel = forwardRef<THREE.Object3D | undefined, WheelProps>((props, ref) => {\n  const {\n    radius,\n    width = WHEEL_WIDTH,\n    mass = WHEEL_MASS,\n    segments = 16,\n    castShadow = true,\n    receiveShadow = true,\n    isLeft = false,\n    styled = true,\n    wireframe = false,\n    bodyProps = {},\n    baseColor,\n    performanceBoost\n  } = props;\n\n  const wheelSize: NumVec4 = [radius, radius, width, segments];\n\n  // The rotation should be applied to the shape (not the body).\n  const rotation: NumVec3 = [0, 0, ((isLeft ? 1 : -1) * Math.PI) / 2];\n\n  useCylinder(\n    () => ({\n      mass,\n      type: 'Kinematic',\n      collisionFilterGroup: 0,\n      args: wheelSize,\n      ...bodyProps,\n    }),\n    // @ts-ignore\n    ref,\n  )\n\n  const wheelModel = performanceBoost ? (\n    <WheelModelSimple\n      castShadow={castShadow}\n      receiveShadow={receiveShadow}\n      baseColor={baseColor}\n    />\n  ) : (\n    <WheelModel\n      castShadow={castShadow}\n      receiveShadow={receiveShadow}\n      styled={styled}\n      wireframe={wireframe}\n      baseColor={baseColor}\n    />\n  );\n\n  return (\n    <mesh ref={ref} name={WHEEL_OBJECT_NAME}>\n      <mesh rotation={rotation}>\n        {wheelModel}\n      </mesh>\n    </mesh>\n  )\n})\n\nexport default Wheel;\n","import { getSearchParam } from './url';\n\nconst LOG_SEARCH_PARAM_NAME = 'debug';\n\nconst logToConsole = !!getSearchParam(LOG_SEARCH_PARAM_NAME);\n\ntype LoggerParams = {\n  context: string,\n};\n\ntype LoggerCallback = (...params: any[]) => void;\n\ntype Logger = {\n  info: LoggerCallback,\n  warn: LoggerCallback,\n  error: LoggerCallback,\n};\n\nexport const loggerBuilder = (params: LoggerParams): Logger => {\n  const { context } = params;\n\n  const info: LoggerCallback = (message, ...optionalParams) => {\n    if (!logToConsole) {\n      return;\n    }\n    console.log(\n      `%c${context}`,\n      'background: orange; color: white; padding: 0 3px; border-radius: 3px;',\n      '→',\n      message,\n      ...optionalParams\n    );\n  };\n\n  const warn: LoggerCallback = (message, ...optionalParams) => {\n    if (!logToConsole) {\n      return;\n    }\n    console.info(\n      `%c${context}`,\n      'background: red; color: white; padding: 0 3px; border-radius: 3px;',\n      '→',\n      message,\n      ...optionalParams\n    );\n  };\n\n  const error: LoggerCallback = (message, ...optionalParams) => {\n    if (!logToConsole) {\n      return;\n    }\n    console.error(context, message, ...optionalParams);\n  };\n\n  return { info, warn, error };\n};\n","import { loggerBuilder } from './logger';\n\nexport const write = (key: string, data: any): boolean => {\n  const logger = loggerBuilder({context: 'storage::write'});\n  try {\n    const stringifiedData = JSON.stringify(data);\n    localStorage.setItem(key, stringifiedData);\n    logger.info(`Wrote data with the key \"${key}\" to storage successfully`);\n  } catch (error) {\n    logger.error('Cannot write data to storage', error);\n    return false;\n  }\n  return true;\n};\n\nexport const read = (key: string): any | null => {\n  const logger = loggerBuilder({context: 'storage::read'});\n  try {\n    const stringifiedData: string | null = localStorage.getItem(key);\n    logger.info(`Read data with the key \"${key}\" from storage successfully`);\n    if (!stringifiedData) {\n      return stringifiedData;\n    }\n    return JSON.parse(stringifiedData);\n  } catch (error) {\n    logger.error('Cannot read data to storage', error);\n    return null;\n  }\n};\n\nexport const remove = (key: string): void => {\n  const logger = loggerBuilder({context: 'storage::remove'});\n  localStorage.removeItem(key);\n  logger.info(`Removed data with the key \"${key}\" from storage`);\n};\n","import { NumVec3, RectanglePoints } from '../../../types/vectors';\nimport { CHASSIS_WIDTH, CHASSIS_LENGTH } from '../car/constants';\n\n// @TODO: Parking lot size should be a configurable from the outside.\n// Move this constants to the component parameters.\n\n// const PARKING_SPOT_POSITION: NumVec3 = [-0.91, 0, -2];\nconst PARKING_SPOT_POSITION: NumVec3 = [-3.6, 0, -2.1];\n\nconst [x, y, z] = PARKING_SPOT_POSITION;\n\nconst outerW = CHASSIS_WIDTH + 0.3;\nconst outerL = CHASSIS_LENGTH + 0.3;\n\nconst innerW = 1.2;\nconst innerL = 2.44;\n\nconst innerX = x + (outerW - innerW) / 2;\nconst innerY = y;\nconst innerZ = z + (outerL - innerL) / 2;\n\nexport const PARKING_SPOT_OUTER_CORNERS: [number, number, number][] = [\n  [x + outerW, y, z + outerL], // Front-left\n  [x, y, z + outerL], // Front-right\n  [x, y, z], // Back-right\n  [x + outerW, y, z], // Back-left\n];\n\nexport const PARKING_SPOT_INNER_CORNERS: [number, number, number][] = [\n  [innerX + innerW, innerY, innerZ + innerL], // Front-left\n  [innerX, innerY, innerZ + innerL], // Front-right\n  [innerX, innerY, innerZ], // Back-right\n  [innerX + innerW, innerY, innerZ], // Back-left\n];\n\nexport const PARKING_SPOT_POINTS: RectanglePoints = {\n  fl: [innerX + innerW, innerY, innerZ + innerL],\n  fr: [innerX, innerY, innerZ + innerL],\n  br: [innerX, innerY, innerZ],\n  bl: [innerX + innerW, innerY, innerZ],\n};\n","import { Gene, Generation, Genome } from '../../../libs/genetic';\nimport {\n  CarLicencePlateType,\n  CarsType,\n  EngineOptionsType,\n  SensorValuesType, SensorValueType,\n  WheelOptionsType\n} from '../../world/types/car';\nimport { RectanglePoints } from '../../../types/vectors';\nimport { CAR_SENSORS_NUM, engineFormula, carLoss, wheelsFormula } from '../../../libs/carGenetic';\nimport { SENSOR_DISTANCE_FALLBACK } from '../../world/car/constants';\nimport { read, remove, write } from '../../../utils/storage';\nimport { PARKING_SPOT_POINTS } from '../../world/constants/parking';\n\nconst GENERATION_STORAGE_KEY = 'generation';\nconst GENERATION_INDEX_STORAGE_KEY = 'generation-index';\nconst LOSS_HISTORY_INDEX_STORAGE_KEY = 'loss-history';\nconst AVG_LOSS_HISTORY_INDEX_STORAGE_KEY = 'avg-loss-history';\n\nconst generateLicencePlate = (\n  generationIndex: number | null,\n  genomeIndex: number\n): CarLicencePlateType => {\n  const generationIdx = generationIndex !== null ? (generationIndex + 1) : '';\n  const genomeIdx = genomeIndex + 1;\n  return `CAR-${generationIdx}-${genomeIdx}`;\n};\n\ntype GenerationToCarsProps = {\n  generationIndex: number | null,\n  generation: Generation,\n  onLossUpdate?: (licencePlate: CarLicencePlateType, loss: number) => void,\n};\n\nexport const generationToCars = (props: GenerationToCarsProps): CarsType => {\n  const {\n    generationIndex,\n    generation,\n    onLossUpdate = () => {},\n  } = props;\n  const cars: CarsType = {};\n  generation.forEach((genome: Genome, genomeIndex) => {\n    const licencePlate = generateLicencePlate(generationIndex, genomeIndex);\n\n    const onEngine = (sensors: SensorValuesType): EngineOptionsType => {\n      const formulaOutput = engineFormula(genome, cleanUpSensors(sensors));\n      if (formulaOutput === -1) {\n        return 'backwards';\n      }\n      if (formulaOutput === 1) {\n        return 'forward'\n      }\n      return 'neutral';\n    };\n\n    const onWheel = (sensors: SensorValuesType): WheelOptionsType => {\n      const formulaOutput = wheelsFormula(genome, cleanUpSensors(sensors));\n      if (formulaOutput === -1) {\n        return 'left';\n      }\n      if (formulaOutput === 1) {\n        return 'right'\n      }\n      return 'straight';\n    };\n\n    const onMove = (wheelsPoints: RectanglePoints) => {\n      const loss = carLoss({\n        wheelsPosition: wheelsPoints,\n        parkingLotCorners: PARKING_SPOT_POINTS,\n      });\n      onLossUpdate(licencePlate, loss);\n    };\n\n    cars[licencePlate] = {\n      licencePlate,\n      generationIndex: generationIndex !== null ? generationIndex : -1,\n      sensorsNum: CAR_SENSORS_NUM,\n      genomeIndex,\n      onEngine,\n      onWheel,\n      onMove,\n      onHit: () => {},\n    };\n  });\n  return cars;\n};\n\nconst cleanUpSensors = (sensors: SensorValuesType): number[] => {\n  return sensors.map((sensor: SensorValueType) => {\n    if (sensor === null || sensor === undefined) {\n      return SENSOR_DISTANCE_FALLBACK;\n    }\n    return sensor;\n  });\n};\n\nexport const formatLossValue = (lossValue: number | null | undefined): number | null => {\n  if (typeof lossValue !== 'number') {\n    return null;\n  }\n  return Math.ceil(lossValue * 100) / 100;\n};\n\nexport const generateWorldVersion = (\n  generationIndex: number | null,\n  batchIndex: number | null\n): string => {\n  const generation = generationIndex === null ? -1 : generationIndex;\n  const batch = batchIndex === null ? -1: batchIndex;\n  return `world-${generation}-${batch}`;\n};\n\nexport const genomeStringToGenome = (genomeString: string): Genome => {\n  return genomeString\n    .split(' ')\n    .map<Gene>((geneString: string) => {\n      const gene: Gene = parseInt(geneString, 10) === 1 ? 1 : 0;\n      return gene;\n    });\n};\n\ntype GenerationDataInStorage = {\n  generation: Generation | null,\n  generationIndex: number | null,\n  lossHistory: number[] | null,\n  avgLossHistory: number[] | null,\n};\n\nexport const loadGenerationFromStorage = (): GenerationDataInStorage => {\n  const generationIndex: number | null = read(GENERATION_INDEX_STORAGE_KEY)\n  const generation: Generation | null = read(GENERATION_STORAGE_KEY);\n  const lossHistory: number[] | null = read(LOSS_HISTORY_INDEX_STORAGE_KEY);\n  const avgLossHistory: number[] | null = read(AVG_LOSS_HISTORY_INDEX_STORAGE_KEY);\n  return {\n    generation,\n    generationIndex,\n    lossHistory,\n    avgLossHistory,\n  };\n};\n\nexport const saveGenerationToStorage = (data: GenerationDataInStorage): boolean => {\n  const {\n    generation,\n    generationIndex,\n    lossHistory,\n    avgLossHistory,\n  } = data;\n\n  if (!generation || !generation.length || !generationIndex || !lossHistory || !avgLossHistory) {\n    return false;\n  }\n\n  const keySuccess = write(GENERATION_INDEX_STORAGE_KEY, generationIndex);\n  const generationSuccess = write(GENERATION_STORAGE_KEY, generation);\n  const lossHistorySuccess = write(LOSS_HISTORY_INDEX_STORAGE_KEY, lossHistory);\n  const avgLossHistorySuccess = write(AVG_LOSS_HISTORY_INDEX_STORAGE_KEY, avgLossHistory);\n\n  return keySuccess && generationSuccess && lossHistorySuccess && avgLossHistorySuccess;\n};\n\nexport const removeGenerationFromStorage = (): void => {\n  remove(GENERATION_STORAGE_KEY);\n  remove(GENERATION_INDEX_STORAGE_KEY);\n  remove(LOSS_HISTORY_INDEX_STORAGE_KEY);\n  remove(AVG_LOSS_HISTORY_INDEX_STORAGE_KEY);\n};\n","export const LOSS_VALUE_GOOD_THRESHOLD = 1;\nexport const LOSS_VALUE_BAD_THRESHOLD = 2;\n\nexport const FITNESS_ALPHA = 0.5;\n\nexport const BAD_SIMULATION_RETRIES_ENABLED = true;\nexport const BAD_SIMULATION_BATCH_INDEX_CHECK = 1;\nexport const BAD_SIMULATION_RETRIES_NUM = 1;\nexport const BAD_SIMULATION_MIN_LOSS_INCREASE_PERCENTAGE = 110;\n","import React, { MutableRefObject, useEffect, useRef, useState } from 'react';\nimport { BoxProps, CylinderProps, useRaycastVehicle } from '@react-three/cannon';\nimport * as THREE from 'three';\nimport { DebouncedFunc } from 'lodash';\nimport { useFrame } from '@react-three/fiber';\nimport { RootState } from '@react-three/fiber/dist/declarations/src/core/store';\nimport throttle from 'lodash/throttle';\n\nimport Chassis from './Chassis';\nimport Wheel from './Wheel';\nimport {\n  CHASSIS_BACK_WHEEL_SHIFT,\n  CHASSIS_BASE_COLOR,\n  CHASSIS_FRONT_WHEEL_SHIFT,\n  CHASSIS_GROUND_CLEARANCE,\n  CHASSIS_RELATIVE_POSITION,\n  CHASSIS_WHEEL_WIDTH,\n  SENSORS_NUM,\n  WHEEL_CUSTOM_SLIDING_ROTATION_SPEED,\n  WHEEL_DAMPING_COMPRESSION,\n  WHEEL_DAMPING_RELAXATION,\n  WHEEL_FRICTION_SLIP,\n  WHEEL_MAX_SUSPENSION_FORCE,\n  WHEEL_MAX_SUSPENSION_TRAVEL,\n  WHEEL_RADIUS,\n  WHEEL_ROLL_INFLUENCE,\n  WHEEL_SUSPENSION_REST_LENGTH,\n  WHEEL_SUSPENSION_STIFFNESS\n} from './constants';\nimport {\n  CarMetaData,\n  CarType,\n  RaycastVehiclePublicApi,\n  SensorValuesType,\n  userCarUUID,\n  WheelInfoOptions,\n} from '../types/car';\nimport { ON_MOVE_THROTTLE_TIMEOUT, ON_UPDATE_LABEL_THROTTLE_TIMEOUT } from '../constants/performance';\nimport { formatLossValue } from '../../evolution/utils/evolution';\nimport { RectanglePoints, ThreeRectanglePoints } from '../../../types/vectors';\nimport { carLoss as getCarLoss } from '../../../libs/carGenetic';\nimport { LOSS_VALUE_BAD_THRESHOLD, LOSS_VALUE_GOOD_THRESHOLD } from '../../evolution/constants/evolution';\nimport { PARKING_SPOT_POINTS } from '../constants/parking';\n\nexport type OnCarReadyArgs = {\n  api: RaycastVehiclePublicApi,\n  chassis: THREE.Object3D,\n  wheelsNum: number,\n};\n\ntype CarProps = {\n  uuid: userCarUUID,\n  bodyProps: BoxProps,\n  wheelRadius?: number,\n  wireframe?: boolean,\n  styled?: boolean,\n  movable?: boolean,\n  withSensors?: boolean,\n  withLabel?: boolean,\n  visibleSensors?: boolean,\n  baseColor?: string,\n  onCollide?: (carMetaData: CarMetaData, event: any) => void,\n  onSensors?: (sensors: SensorValuesType) => void,\n  onMove?: (wheelsPositions: RectanglePoints) => void,\n  collisionFilterGroup?: number,\n  collisionFilterMask?: number,\n  onCarReady?: (args: OnCarReadyArgs) => void,\n  onCarDestroy?: () => void,\n  car?: CarType,\n  performanceBoost?: boolean,\n}\n\nconst flWheelIndex = 0;\nconst frWheelIndex = 1;\nconst blWheelIndex = 2;\nconst brWheelIndex = 3;\n\nfunction Car(props: CarProps) {\n  const {\n    uuid,\n    wheelRadius = WHEEL_RADIUS,\n    wireframe = false,\n    withLabel = false,\n    styled = true,\n    withSensors = false,\n    visibleSensors = false,\n    movable = false,\n    baseColor = CHASSIS_BASE_COLOR,\n    collisionFilterGroup,\n    collisionFilterMask,\n    bodyProps = {},\n    onCollide = () => {},\n    onCarReady = () => {},\n    onCarDestroy = () => {},\n    onSensors = () => {},\n    onMove = () => {},\n    car = { licencePlate: '', generationIndex: 0, genomeIndex: 0 },\n    performanceBoost = false,\n  } = props;\n\n  const chassis = useRef<THREE.Object3D | undefined>();\n  const apiRef = useRef<RaycastVehiclePublicApi | undefined>();\n  const wheelsRef = useRef<MutableRefObject<THREE.Object3D | undefined>[]>([]);\n  const wheelsPositionRef = useRef<ThreeRectanglePoints>({\n    fl: new THREE.Vector3(),\n    fr: new THREE.Vector3(),\n    bl: new THREE.Vector3(),\n    br: new THREE.Vector3(),\n  });\n  const [carLoss, setCarLoss] = useState<number | null>(null);\n  const onUpdateLabelThrottledRef = useRef<DebouncedFunc<(...args: any[]) => any> | null>(null);\n  const onMoveThrottledRef = useRef<DebouncedFunc<(...args: any[]) => any> | null>(null);\n\n  const wheels: MutableRefObject<THREE.Object3D | undefined>[] = [];\n  const wheelInfos: WheelInfoOptions[] = [];\n\n  const wheelInfo = {\n    isFrontWheel: false,\n    radius: wheelRadius,\n    directionLocal: [0, -1, 0], // Same as Physics gravity.\n    axleLocal: [-1, 0, 0], // wheel rotates around X-axis, invert if wheels rotate the wrong way\n    chassisConnectionPointLocal: [1, 0, 1],\n    suspensionStiffness: WHEEL_SUSPENSION_STIFFNESS,\n    suspensionRestLength: WHEEL_SUSPENSION_REST_LENGTH,\n    maxSuspensionForce: WHEEL_MAX_SUSPENSION_FORCE,\n    maxSuspensionTravel: WHEEL_MAX_SUSPENSION_TRAVEL,\n    dampingRelaxation: WHEEL_DAMPING_RELAXATION,\n    dampingCompression: WHEEL_DAMPING_COMPRESSION,\n    frictionSlip: WHEEL_FRICTION_SLIP,\n    rollInfluence: WHEEL_ROLL_INFLUENCE,\n    useCustomSlidingRotationalSpeed: true,\n    customSlidingRotationalSpeed: WHEEL_CUSTOM_SLIDING_ROTATION_SPEED,\n  };\n\n  // FrontLeft [-X, Y, Z].\n  const flWheel = useRef<THREE.Object3D | undefined>();\n  const flWheelInfo = {\n    ...wheelInfo,\n    isFrontWheel: true,\n    chassisConnectionPointLocal: [\n      -CHASSIS_WHEEL_WIDTH / 2,\n      CHASSIS_GROUND_CLEARANCE,\n      CHASSIS_FRONT_WHEEL_SHIFT,\n    ],\n  };\n\n  // FrontRight [X, Y, Z].\n  const frWheel = useRef<THREE.Object3D | undefined>();\n  const frWheelInfo = {\n    ...wheelInfo,\n    isFrontWheel: true,\n    chassisConnectionPointLocal: [\n      CHASSIS_WHEEL_WIDTH / 2,\n      CHASSIS_GROUND_CLEARANCE,\n      CHASSIS_FRONT_WHEEL_SHIFT\n    ],\n  };\n\n  // BackLeft [-X, Y, -Z].\n  const blWheel = useRef<THREE.Object3D | undefined>();\n  const blWheelInfo = {\n    ...wheelInfo,\n    isFrontWheel: false,\n    chassisConnectionPointLocal: [\n      -CHASSIS_WHEEL_WIDTH / 2,\n      CHASSIS_GROUND_CLEARANCE,\n      CHASSIS_BACK_WHEEL_SHIFT,\n    ],\n  };\n\n  // BackRight [X, Y, -Z].\n  const brWheel = useRef<THREE.Object3D | undefined>();\n  const brWheelInfo = {\n    ...wheelInfo,\n    isFrontWheel: false,\n    chassisConnectionPointLocal: [\n      CHASSIS_WHEEL_WIDTH / 2,\n      CHASSIS_GROUND_CLEARANCE,\n      CHASSIS_BACK_WHEEL_SHIFT,\n    ],\n  };\n\n  wheels[flWheelIndex] = flWheel;\n  wheels[frWheelIndex] = frWheel;\n  wheels[blWheelIndex] = blWheel;\n  wheels[brWheelIndex] = brWheel;\n\n  wheelInfos[flWheelIndex] = flWheelInfo;\n  wheelInfos[frWheelIndex] = frWheelInfo;\n  wheelInfos[blWheelIndex] = blWheelInfo;\n  wheelInfos[brWheelIndex] = brWheelInfo;\n\n  const isSensorObstacle = !movable;\n\n  const [vehicle, vehicleAPI] = useRaycastVehicle(() => ({\n    chassisBody: chassis,\n    wheels,\n    wheelInfos,\n    indexForwardAxis: 2,\n    indexRightAxis: 0,\n    indexUpAxis: 1,\n  }));\n\n  const wheelMetaData: CarMetaData = {\n    uuid: 'wheel',\n    type: 'wheel',\n    isSensorObstacle,\n  };\n\n  const wheelBodyProps: CylinderProps = {\n    position: bodyProps.position,\n    userData: wheelMetaData,\n  };\n\n  const carMetaData: CarMetaData = {\n    uuid,\n    type: 'chassis',\n    isSensorObstacle,\n  };\n\n  apiRef.current = vehicleAPI;\n  wheelsRef.current = wheels;\n\n  const onUnmount = () => {\n    if (onUpdateLabelThrottledRef.current) {\n      onUpdateLabelThrottledRef.current.cancel();\n    }\n    if (onMoveThrottledRef.current) {\n      onMoveThrottledRef.current.cancel();\n    }\n    onCarDestroy();\n  };\n\n  useEffect(() => {\n    if (!apiRef.current || !chassis.current) {\n      return onUnmount;\n    }\n    onCarReady({\n      api: apiRef.current,\n      chassis: chassis.current,\n      wheelsNum: wheelsRef.current.length,\n    });\n    return onUnmount;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (!onMoveThrottledRef.current) {\n    onMoveThrottledRef.current = throttle(onMove, ON_MOVE_THROTTLE_TIMEOUT, {\n      leading: true,\n      trailing: true,\n    });\n  }\n\n  // @TODO: Move the logic of label content population to the evolution components.\n  // Car shouldn't know about the evolution loss function.\n  const onUpdateLabel = (wheelsPositions: RectanglePoints) => {\n    const loss = getCarLoss({\n      wheelsPosition: wheelsPositions,\n      parkingLotCorners: PARKING_SPOT_POINTS,\n    });\n    setCarLoss(loss);\n  };\n\n  if (!onUpdateLabelThrottledRef.current) {\n    onUpdateLabelThrottledRef.current = throttle(onUpdateLabel, ON_UPDATE_LABEL_THROTTLE_TIMEOUT, {\n      leading: false,\n      trailing: true,\n    });\n  }\n\n  useFrame((state: RootState, delta: number) => {\n    if (!wheels || wheels.length !== 4) {\n      return;\n    }\n    if (\n      !wheels[flWheelIndex].current ||\n      !wheels[frWheelIndex].current ||\n      !wheels[blWheelIndex].current ||\n      !wheels[brWheelIndex].current\n    ) {\n      return;\n    }\n\n    // @ts-ignore\n    wheels[flWheelIndex].current.getWorldPosition(wheelsPositionRef.current.fr);\n    // @ts-ignore\n    wheels[frWheelIndex].current.getWorldPosition(wheelsPositionRef.current.fl);\n    // @ts-ignore\n    wheels[blWheelIndex].current.getWorldPosition(wheelsPositionRef.current.br);\n    // @ts-ignore\n    wheels[brWheelIndex].current.getWorldPosition(wheelsPositionRef.current.bl);\n\n    const {fl, fr, bl, br} = wheelsPositionRef.current;\n    const wheelPositions: RectanglePoints = {\n      fl: fl.toArray(),\n      fr: fr.toArray(),\n      bl: bl.toArray(),\n      br: br.toArray(),\n    };\n    if (onMoveThrottledRef.current) {\n      onMoveThrottledRef.current(wheelPositions);\n    }\n\n    // @TODO: Move the logic of label content population to the evolution components.\n    // Car shouldn't know about the evolution loss function.\n    if (withLabel && onUpdateLabelThrottledRef.current) {\n      onUpdateLabelThrottledRef.current(wheelPositions);\n    }\n  });\n\n  let distanceColor = 'black';\n  if (carLoss !== null) {\n    if (carLoss <= LOSS_VALUE_GOOD_THRESHOLD) {\n      distanceColor = 'limegreen';\n    } else if (carLoss <= LOSS_VALUE_BAD_THRESHOLD) {\n      distanceColor = 'orange';\n    } else {\n      distanceColor = 'red';\n    }\n  }\n  const label = withLabel ? (\n    <span>\n      Loss:\n      {' '}\n      <span style={{color: distanceColor, fontWeight: 'bold'}}>\n        {formatLossValue(carLoss)}\n      </span>\n    </span>\n  ) : null;\n\n  return (\n    <group ref={vehicle}>\n      <Chassis\n        ref={chassis}\n        sensorsNum={car.sensorsNum || SENSORS_NUM}\n        chassisPosition={CHASSIS_RELATIVE_POSITION}\n        styled={styled}\n        wireframe={wireframe}\n        movable={movable}\n        label={label}\n        withSensors={withSensors}\n        visibleSensors={visibleSensors}\n        baseColor={baseColor}\n        bodyProps={{ ...bodyProps }}\n        onCollide={(event) => onCollide(carMetaData, event)}\n        onSensors={onSensors}\n        userData={carMetaData}\n        collisionFilterGroup={collisionFilterGroup}\n        collisionFilterMask={collisionFilterMask}\n        performanceBoost={performanceBoost}\n      />\n      <Wheel\n        ref={flWheel}\n        radius={wheelRadius}\n        bodyProps={wheelBodyProps}\n        styled={styled}\n        wireframe={wireframe}\n        baseColor={baseColor}\n        performanceBoost={performanceBoost}\n        isLeft\n      />\n      <Wheel\n        ref={frWheel}\n        radius={wheelRadius}\n        bodyProps={wheelBodyProps}\n        styled={styled}\n        wireframe={wireframe}\n        baseColor={baseColor}\n        performanceBoost={performanceBoost}\n      />\n      <Wheel\n        ref={blWheel}\n        radius={wheelRadius}\n        bodyProps={wheelBodyProps}\n        styled={styled}\n        wireframe={wireframe}\n        baseColor={baseColor}\n        performanceBoost={performanceBoost}\n        isLeft\n      />\n      <Wheel\n        ref={brWheel}\n        radius={wheelRadius}\n        bodyProps={wheelBodyProps}\n        styled={styled}\n        wireframe={wireframe}\n        baseColor={baseColor}\n        performanceBoost={performanceBoost}\n      />\n    </group>\n  )\n}\n\nexport default Car;\n","import React, { useRef, useState } from 'react';\n\nimport Car from '../car/Car';\nimport { NumVec3 } from '../../../types/vectors';\nimport { CHASSIS_BASE_COLOR, CHASSIS_BASE_TOUCHED_COLOR, CHASSIS_LENGTH, CHASSIS_WIDTH } from '../car/constants';\nimport { CarMetaData } from '../types/car';\nimport { generateStaticCarUUID } from '../utils/uuid';\n\ntype CarBaseColors = Record<string, string>;\n\ntype StaticCarsProps = {\n  rows: number,\n  cols: number,\n  collisionFilterGroup: number,\n  collisionFilterMask: number,\n  skipCells?: number[][],\n  performanceBoost?: boolean,\n};\n\nfunction StaticCars(props: StaticCarsProps) {\n  const {\n    rows,\n    cols,\n    collisionFilterGroup,\n    collisionFilterMask,\n    skipCells = [[]],\n    performanceBoost = false,\n  } = props;\n\n  const [carBaseColors, setCarBaseColors] = useState<CarBaseColors>({});\n  const carBaseColorsRef = useRef<CarBaseColors>({});\n\n  const onCollide = (carMetaData: CarMetaData, event: any) => {\n    const touchedCarUUID = carMetaData.uuid;\n    if (!touchedCarUUID) {\n      return;\n    }\n    const newCarBaseColors = {\n      ...carBaseColorsRef.current,\n      [touchedCarUUID]: CHASSIS_BASE_TOUCHED_COLOR,\n    };\n    carBaseColorsRef.current = newCarBaseColors;\n    setCarBaseColors(newCarBaseColors);\n  };\n\n  const staticCarPositions: NumVec3[] = [];\n  for (let row = 0; row < rows; row += 1) {\n    for (let col = 0; col < cols; col += 1) {\n      if (skipCells.find(([skipRow, skipCol]) => (skipRow === row && skipCol === col))) {\n        continue;\n      }\n      const marginedLength = 1.4 * CHASSIS_LENGTH;\n      const marginedWidth = 3.5 * CHASSIS_WIDTH;\n      const x = -0.5 * marginedWidth + row * marginedWidth;\n      const z = -2 * marginedLength + col * marginedLength;\n      staticCarPositions.push([x, 0.6, z]);\n    }\n  }\n\n  const staticCars = staticCarPositions.map((position: NumVec3, index: number) => {\n    const uuid = generateStaticCarUUID(index);\n    const baseColor = uuid in carBaseColors ? carBaseColors[uuid] : CHASSIS_BASE_COLOR;\n    return (\n      <Car\n        key={index}\n        uuid={uuid}\n        bodyProps={{ position }}\n        wireframe={false}\n        styled={false}\n        movable={false}\n        baseColor={baseColor}\n        collisionFilterGroup={collisionFilterGroup}\n        collisionFilterMask={collisionFilterMask}\n        onCollide={onCollide}\n        performanceBoost={performanceBoost}\n      />\n    );\n  });\n\n  return (\n    <>\n      {staticCars}\n    </>\n  );\n}\n\nexport default StaticCars;\n","import { userCarUUID } from '../types/car';\n\nexport const generateStaticCarUUID = (carIndex: number): userCarUUID => {\n  return `car-static-${carIndex}`;\n};\n","export type DynamicCarsPosition = 'middle' | 'front' | 'rear';\n\nexport const DYNAMIC_CARS_POSITION_REAR: DynamicCarsPosition = 'rear';\nexport const DYNAMIC_CARS_POSITION_MIDDLE: DynamicCarsPosition = 'middle';\nexport const DYNAMIC_CARS_POSITION_FRONT: DynamicCarsPosition = 'front';\n","import React, { useRef } from 'react';\n\nimport Car, { OnCarReadyArgs } from '../car/Car';\nimport { CarType, EngineOptionsType, SensorValuesType, userCarUUID, WheelOptionsType } from '../types/car';\nimport { carEvents, off, on } from '../utils/events';\nimport {\n  onEngineBackward,\n  onEngineForward,\n  onEngineNeutral, onPressBreak, onReleaseBreak,\n  onWheelsLeft,\n  onWheelsRight,\n  onWheelsStraight\n} from '../utils/controllers';\nimport { getRandomColor } from '../../../utils/colors';\nimport { RectanglePoints } from '../../../types/vectors';\nimport { CHASSIS_SIMPLIFIED_BASE_COLOR } from '../car/constants';\nimport { DynamicCarsPosition, DYNAMIC_CARS_POSITION_FRONT } from '../constants/cars';\n\ntype DynamicCarsProps = {\n  cars: CarType[],\n  collisionFilterGroup?: number,\n  collisionFilterMask?: number,\n  withSensors?: boolean,\n  withLabels?: boolean,\n  visibleSensors?: boolean,\n  controllable?: boolean,\n  withRandomColors?: boolean,\n  withRandomStartingPoint?: boolean,\n  performanceBoost?: boolean,\n  carsPosition?: DynamicCarsPosition,\n};\n\nfunction DynamicCars(props: DynamicCarsProps) {\n  const {\n    cars,\n    collisionFilterGroup,\n    collisionFilterMask,\n    withSensors = false,\n    visibleSensors = false,\n    withLabels = false,\n    controllable = false,\n    withRandomColors = false,\n    withRandomStartingPoint = false,\n    performanceBoost = false,\n    carsPosition = DYNAMIC_CARS_POSITION_FRONT,\n  } = props;\n  const carsUUIDs = useRef<userCarUUID[]>([]);\n  const carsAPIs = useRef<Record<userCarUUID, OnCarReadyArgs>>({});\n\n  const activeCars = cars.map((car) => {\n    const uuid = car.licencePlate;\n    carsUUIDs.current.push(uuid);\n\n    const onForward = () => { onEngineForward(carsAPIs.current[uuid].api) };\n    const onBackward = () => { onEngineBackward(carsAPIs.current[uuid].api) };\n    const onNeutral = () => { onEngineNeutral(carsAPIs.current[uuid].api) };\n    const onLeft = () => { onWheelsLeft(carsAPIs.current[uuid].api) };\n    const onRight = () => { onWheelsRight(carsAPIs.current[uuid].api) };\n    const onStraight = () => { onWheelsStraight(carsAPIs.current[uuid].api) };\n    const onBreak = () => { onPressBreak(carsAPIs.current[uuid].api) };\n    const onBreakRelease = () => { onReleaseBreak(carsAPIs.current[uuid].api) };\n\n    const onCarReady = (args: OnCarReadyArgs) => {\n      carsAPIs.current[uuid] = args;\n      if (controllable) {\n        on(carEvents.engineForward, onForward);\n        on(carEvents.engineBackward, onBackward);\n        on(carEvents.engineNeutral, onNeutral);\n        on(carEvents.wheelsLeft, onLeft);\n        on(carEvents.wheelsRight, onRight);\n        on(carEvents.wheelsStraight, onStraight);\n        on(carEvents.pressBreak, onBreak);\n        on(carEvents.releaseBreak, onBreakRelease);\n      }\n    };\n\n    const onCarDestroy = () => {\n      if (controllable) {\n        off(carEvents.engineForward, onForward);\n        off(carEvents.engineBackward, onBackward);\n        off(carEvents.engineNeutral, onNeutral);\n        off(carEvents.wheelsLeft, onLeft);\n        off(carEvents.wheelsRight, onRight);\n        off(carEvents.wheelsStraight, onStraight);\n        off(carEvents.pressBreak, onBreak);\n        off(carEvents.releaseBreak, onBreakRelease);\n      }\n    };\n\n    const onSensors = (sensors: SensorValuesType): void => {\n      if (car.onEngine) {\n        const engineOption: EngineOptionsType = car.onEngine(sensors);\n        switch (engineOption) {\n          case 'backwards':\n            onBackward();\n            break;\n          case 'neutral':\n            onNeutral();\n            break;\n          case 'forward':\n            onForward();\n            break;\n        }\n      }\n      if (car.onWheel) {\n        const wheelOption: WheelOptionsType = car.onWheel(sensors);\n        switch (wheelOption) {\n          case 'left':\n            onLeft();\n            break;\n          case 'straight':\n            onStraight();\n            break;\n          case 'right':\n            onRight();\n            break;\n        }\n      }\n    };\n\n    const onMove = (wheelsPositions: RectanglePoints) => {\n      if (car.onMove) {\n        car.onMove(wheelsPositions);\n      }\n    };\n\n    const zPositions: Record<DynamicCarsPosition, number> = {\n      'rear': withRandomStartingPoint ? -7 - 2 * Math.random() : -7,\n      'middle': 0,\n      'front': withRandomStartingPoint ? 7 + 2 * Math.random() : 7,\n    };\n\n    const z = zPositions[carsPosition]\n    const position = [0, 2, z];\n    const angularVelocity = [-0.2, 0, 0];\n\n    const styledCar = !withRandomColors;\n    const carColor = withRandomColors\n      ? getRandomColor()\n      : performanceBoost\n        ? CHASSIS_SIMPLIFIED_BASE_COLOR\n        : undefined;\n\n    return (\n      <Car\n        key={uuid}\n        uuid={uuid}\n        bodyProps={{\n          position,\n          angularVelocity,\n        }}\n        wireframe={false}\n        collisionFilterGroup={collisionFilterGroup}\n        collisionFilterMask={collisionFilterMask}\n        withSensors={withSensors}\n        visibleSensors={visibleSensors}\n        onCarReady={onCarReady}\n        onCarDestroy={onCarDestroy}\n        onSensors={onSensors}\n        onMove={onMove}\n        movable\n        styled={styledCar}\n        baseColor={carColor}\n        car={car}\n        withLabel={withLabels}\n        performanceBoost={performanceBoost}\n      />\n    );\n  });\n\n  return (\n    <>\n      {activeCars}\n    </>\n  );\n}\n\nexport default DynamicCars;\n","import { RaycastVehiclePublicApi } from '../types/car';\nimport { CAR_MAX_BREAK_FORCE, CAR_MAX_FORCE, CAR_MAX_STEER_VALUE } from '../car/constants';\n\nexport const onEngineForward = (carAPI: RaycastVehiclePublicApi, wheelsNum: number = 4): void => {\n  for (let wheelIdx = 0; wheelIdx < wheelsNum; wheelIdx += 1) {\n    carAPI.setBrake(0, wheelIdx);\n  }\n  carAPI.applyEngineForce(-CAR_MAX_FORCE, 2);\n  carAPI.applyEngineForce(-CAR_MAX_FORCE, 3);\n};\n\nexport const onEngineBackward = (carAPI: RaycastVehiclePublicApi, wheelsNum: number = 4): void => {\n  for (let wheelIdx = 0; wheelIdx < wheelsNum; wheelIdx += 1) {\n    carAPI.setBrake(0, wheelIdx);\n  }\n  carAPI.applyEngineForce(CAR_MAX_FORCE, 2);\n  carAPI.applyEngineForce(CAR_MAX_FORCE, 3);\n};\n\nexport const onEngineNeutral = (carAPI: RaycastVehiclePublicApi): void => {\n  carAPI.applyEngineForce(0, 2);\n  carAPI.applyEngineForce(0, 3);\n};\n\nexport const onWheelsLeft = (carAPI: RaycastVehiclePublicApi): void => {\n  carAPI.setSteeringValue(CAR_MAX_STEER_VALUE, 0);\n  carAPI.setSteeringValue(CAR_MAX_STEER_VALUE, 1);\n};\n\nexport const onWheelsRight = (carAPI: RaycastVehiclePublicApi): void => {\n  carAPI.setSteeringValue(-CAR_MAX_STEER_VALUE, 0);\n  carAPI.setSteeringValue(-CAR_MAX_STEER_VALUE, 1);\n};\n\nexport const onWheelsStraight = (carAPI: RaycastVehiclePublicApi,): void => {\n  carAPI.setSteeringValue(0, 0);\n  carAPI.setSteeringValue(0, 1);\n};\n\nexport const onPressBreak = (carAPI: RaycastVehiclePublicApi, wheelsNum: number = 4): void => {\n  for (let wheelIdx = 0; wheelIdx < wheelsNum; wheelIdx += 1) {\n    carAPI.setBrake(CAR_MAX_BREAK_FORCE, wheelIdx);\n  }\n};\n\nexport const onReleaseBreak = (carAPI: RaycastVehiclePublicApi, wheelsNum: number = 4): void => {\n  for (let wheelIdx = 0; wheelIdx < wheelsNum; wheelIdx += 1) {\n    carAPI.setBrake(0, wheelIdx);\n  }\n};\n","import colors from 'nice-color-palettes';\n\nexport const getRandomColor = (): string => {\n  const flatColors = colors.flat();\n  const colorIndex = Math.floor(Math.random() * flatColors.length);\n  return flatColors[colorIndex];\n};\n","import React from 'react';\nimport { Line } from '@react-three/drei';\nimport { PARKING_SPOT_INNER_CORNERS, PARKING_SPOT_OUTER_CORNERS } from '../constants/parking';\n\ntype ParkingSpotProps = {\n  color?: string,\n};\n\n// @TODO: Parking lot size should be a configurable from the outside.\n// Move this constants to the component parameters.\n\nconst innerLineVisible = false;\n\nfunction ParkingSpot(props: ParkingSpotProps) {\n  const { color = 'yellow' } = props;\n\n  const innerLineComponent = innerLineVisible ? (\n    <Line\n      points={[\n        ...PARKING_SPOT_INNER_CORNERS,\n        PARKING_SPOT_INNER_CORNERS[0], // Closing the line.\n      ]}\n      color={color}\n      lineWidth={4}\n      dashed={false}\n    />\n  ) : null;\n\n  return (\n    <>\n      <Line\n        points={[\n          ...PARKING_SPOT_OUTER_CORNERS,\n          PARKING_SPOT_OUTER_CORNERS[0], // Closing the line.\n        ]}\n        color={color}\n        lineWidth={4}\n        dashed={false}\n      />\n      {innerLineComponent}\n    </>\n  );\n}\n\nexport default ParkingSpot;\n","import React from 'react';\n\nimport Ground from '../surroundings/Ground';\nimport StaticCars from '../cars/StaticCars';\nimport DynamicCars from '../cars/DynamicCars';\nimport { DYNAMIC_CARS_POSITION_MIDDLE } from '../constants/cars';\nimport ParkingSpot from '../surroundings/ParkingSpot';\n\n// Collision groups and masks must be powers of 2.\n// @see: https://github.com/schteppe/cannon.js/blob/master/demos/collisionFilter.html\nconst COLLISION_GROUP_ACTIVE_CARS = 0b0001;\nconst COLLISION_GROUP_STATIC_OBJECTS = 0b0010;\nconst COLLISION_MASK_ACTIVE_CARS = COLLISION_GROUP_STATIC_OBJECTS // It can only collide with static objects.\nconst COLLISION_MASK_STATIC_OBJECTS = COLLISION_GROUP_ACTIVE_CARS // It can only collide with active cars.\n\ntype ParkingManualProps = {\n  withLabels?: boolean,\n  withSensors?: boolean,\n  performanceBoost?: boolean,\n};\n\nfunction ParkingManual(props: ParkingManualProps) {\n  const {\n    withLabels = false,\n    withSensors = false,\n    performanceBoost = false,\n  } = props;\n\n  return (\n    <>\n      <Ground\n        userData={{ uuid: 'ground' }}\n        collisionFilterGroup={COLLISION_GROUP_STATIC_OBJECTS}\n        collisionFilterMask={COLLISION_MASK_STATIC_OBJECTS}\n      />\n      <ParkingSpot />\n      <DynamicCars\n        cars={[{licencePlate: 'manual-car', generationIndex: 0, genomeIndex: 0}]}\n        collisionFilterGroup={COLLISION_GROUP_ACTIVE_CARS}\n        collisionFilterMask={COLLISION_MASK_ACTIVE_CARS}\n        withSensors={withSensors}\n        withLabels={withLabels}\n        performanceBoost={performanceBoost}\n        carsPosition={DYNAMIC_CARS_POSITION_MIDDLE}\n        controllable\n        visibleSensors\n      />\n      <StaticCars\n        rows={2}\n        cols={5}\n        skipCells={[[0, 2]]}\n        collisionFilterGroup={COLLISION_GROUP_STATIC_OBJECTS}\n        collisionFilterMask={COLLISION_MASK_STATIC_OBJECTS}\n        performanceBoost={performanceBoost}\n      />\n    </>\n  );\n}\n\nexport default ParkingManual;\n","import React from 'react';\nimport { Block } from 'baseui/block';\nimport { Notification } from 'baseui/notification';\n\nimport World from '../world/World';\nimport ParkingManual from '../world/parkings/ParkingManual';\n\nfunction EvolutionTabManual() {\n  return (\n    <Block>\n      <World\n        performanceBoost={false}\n        withJoystickControl\n        withKeyboardControl\n      >\n        <ParkingManual\n          performanceBoost={false}\n          withLabels\n          withSensors\n        />\n      </World>\n      <Block marginTop=\"20px\">\n        <Notification overrides={{Body: {style: {width: 'auto'}}}}>\n          Try to park the car by yourself<br/><br/>\n          <small>WASD keys to drive, SPACE to break, Joystick for mobile</small>\n        </Notification>\n      </Block>\n    </Block>\n  );\n}\n\nexport default EvolutionTabManual;\n","// Picks the random item based on its weight.\n// The items with higher weight will be picked more often.\nexport const weightedRandom = <T>(items: T[], weights: number[]): { item: T, index: number } => {\n  if (items.length !== weights.length) {\n    throw new Error('Items and weights must be of the same size');\n  }\n\n  // Preparing the cumulative weights array.\n  // For example:\n  // - weights = [1, 4, 3]\n  // - cumulativeWeights = [1, 5, 8]\n  const cumulativeWeights: number[] = [];\n  for (let i = 0; i < weights.length; i += 1) {\n    cumulativeWeights[i] = weights[i] + (cumulativeWeights[i - 1] || 0);\n  }\n\n  // Getting the random number in a range [0...sum(weights)]\n  // For example:\n  // - weights = [1, 4, 3]\n  // - maxCumulativeWeight = 8\n  // - range for the random number is [0...8]\n  const maxCumulativeWeight = cumulativeWeights[cumulativeWeights.length - 1];\n  const randomNumber = maxCumulativeWeight * Math.random();\n\n  // Picking the random item based on its weight.\n  // The items with higher weight will be picked more often.\n  for (let i = 0; i < items.length; i += 1) {\n    if (cumulativeWeights[i] >= randomNumber) {\n      return {\n        item: items[i],\n        index: i,\n      };\n    }\n  }\n  return {\n    item: items[items.length - 1],\n    index: items.length - 1,\n  };\n};\n","import { weightedRandom } from './math/probability';\n\nexport type Gene = 0 | 1;\n\nexport type Genome = Gene[];\n\nexport type Generation = Genome[];\n\nexport type GenerationParams = {\n  generationSize: number,\n  genomeLength: number,\n};\n\nfunction createGenome(length: number): Genome {\n  return new Array(length)\n    .fill(null)\n    .map(() => (Math.random() < 0.5 ? 0 : 1));\n}\n\nexport function createGeneration(params: GenerationParams): Generation {\n  const { generationSize, genomeLength } = params;\n  return new Array(generationSize)\n    .fill(null)\n    .map(() => createGenome(genomeLength));\n}\n\n// The number between 0 and 1.\nexport type Probability = number;\n\n// The number between 0 and 100.\nexport type Percentage = number;\n\n// @see: https://en.wikipedia.org/wiki/Mutation_(genetic_algorithm)\nfunction mutate(genome: Genome, mutationProbability: Probability): Genome {\n  // Conceive children.\n  for (let geneIndex = 0; geneIndex < genome.length; geneIndex += 1) {\n    const gene: Gene = genome[geneIndex];\n    const mutatedGene: Gene = gene === 0 ? 1 : 0;\n    genome[geneIndex] = Math.random() < mutationProbability ? mutatedGene : gene;\n  }\n  return genome;\n}\n\ntype SelectionOptions = {\n  mutationProbability: Probability,\n  longLivingChampionsPercentage: Percentage,\n};\n\n// Performs Uniform Crossover: each bit is chosen from either parent with equal probability.\n// @see: https://en.wikipedia.org/wiki/Crossover_(genetic_algorithm)\nfunction mate(\n  father: Genome,\n  mother: Genome,\n  mutationProbability: Probability,\n): [Genome, Genome] {\n  if (father.length !== mother.length) {\n    throw new Error('Cannot mate different species');\n  }\n\n  const firstChild: Genome = [];\n  const secondChild: Genome = [];\n\n  // Conceive children.\n  for (let geneIndex = 0; geneIndex < father.length; geneIndex += 1) {\n    firstChild.push(\n      Math.random() < 0.5 ? father[geneIndex] : mother[geneIndex]\n    );\n    secondChild.push(\n      Math.random() < 0.5 ? father[geneIndex] : mother[geneIndex]\n    );\n  }\n\n  return [\n    mutate(firstChild, mutationProbability),\n    mutate(secondChild, mutationProbability),\n  ];\n}\n\nexport type FitnessFunction = (genome: Genome) => number;\n\n// @see: https://en.wikipedia.org/wiki/Selection_(genetic_algorithm)\nexport function select(\n  generation: Generation,\n  fitness: FitnessFunction,\n  options: SelectionOptions,\n) {\n  const {\n    mutationProbability,\n    longLivingChampionsPercentage,\n  } = options;\n\n  const newGeneration: Generation = [];\n\n  const oldGeneration = [...generation];\n  // First one - the fittest one.\n  oldGeneration.sort((genomeA: Genome, genomeB: Genome): number => {\n    const fitnessA = fitness(genomeA);\n    const fitnessB = fitness(genomeB);\n    if (fitnessA < fitnessB) {\n      return 1;\n    }\n    if (fitnessA > fitnessB) {\n      return -1;\n    }\n    return 0;\n  });\n\n  // Let long-liver champions continue living in the new generation.\n  const longLiversCount = Math.floor(longLivingChampionsPercentage * oldGeneration.length / 100);\n  if (longLiversCount) {\n    oldGeneration.slice(0, longLiversCount).forEach((longLivingGenome: Genome) => {\n      newGeneration.push(longLivingGenome);\n    });\n  }\n\n  // Get the data about he fitness of each individuum.\n  const fitnessPerOldGenome: number[] = oldGeneration.map((genome: Genome) => fitness(genome));\n\n  // Populate the next generation until it becomes the same size as a old generation.\n  while (newGeneration.length < generation.length) {\n    // Select random father and mother from the population.\n    // The fittest individuums have higher chances to be selected.\n    let father: Genome | null = null;\n    let fatherGenomeIndex: number | null = null;\n    let mother: Genome | null = null;\n    let matherGenomeIndex: number | null = null;\n\n    // To produce children the father and mother need each other.\n    // It must be two different individuums.\n    while (!father || !mother || fatherGenomeIndex === matherGenomeIndex) {\n      const {\n        item: randomFather,\n        index: randomFatherGenomeIndex,\n      } = weightedRandom<Genome>(generation, fitnessPerOldGenome);\n\n      const {\n        item: randomMother,\n        index: randomMotherGenomeIndex,\n      } = weightedRandom<Genome>(generation, fitnessPerOldGenome);\n\n      father = randomFather;\n      fatherGenomeIndex = randomFatherGenomeIndex;\n\n      mother = randomMother;\n      matherGenomeIndex = randomMotherGenomeIndex;\n    }\n\n    // Let father and mother produce two children.\n    const [firstChild, secondChild] = mate(father, mother, mutationProbability);\n\n    newGeneration.push(firstChild);\n\n    // Depending on the number of long-living champions it is possible that\n    // there will be the place for only one child, sorry.\n    if (newGeneration.length < generation.length) {\n      newGeneration.push(secondChild);\n    }\n  }\n\n  return newGeneration;\n}\n","import React from 'react';\nimport { Block } from 'baseui/block';\n\ntype FormElementsRowProps = {\n  nodes: React.ReactNode[],\n  buttons?: React.ReactNode,\n  alignBottom?: boolean,\n};\n\nconst marginX = '10px';\n\nconst FormElementsRow = (props: FormElementsRowProps) => {\n  const {nodes, buttons, alignBottom = false} = props;\n\n  const rows = nodes.map((node: React.ReactNode, nodeIndex: number) => {\n    const marginLeft = nodeIndex === 0 ? 0 : marginX;\n    const marginRight = nodeIndex === (nodes.length - 1) && !buttons ? 0 : marginX;\n\n    return (\n      <Block\n        key={nodeIndex}\n        display=\"flex\"\n        flex={1}\n        marginLeft={[0, marginLeft, marginLeft]}\n        marginRight={[0, marginRight, marginRight]}\n        flexDirection=\"column\"\n        justifyContent=\"flex-end\"\n      >\n        {node}\n      </Block>\n    );\n  });\n\n  const buttonsRow = buttons ? (\n    <Block\n      display=\"flex\"\n      marginLeft={[0, marginX, marginX]}\n      flexDirection=\"column\"\n      justifyContent=\"flex-end\"\n    >\n      {buttons}\n    </Block>\n  ) : null;\n\n  const alignItems = alignBottom ? 'flex-end' : 'flex-start';\n\n  return (\n    <Block\n      display=\"flex\"\n      flex={1}\n      flexDirection={['column', 'row', 'row']}\n      alignItems={['stretch', alignItems, alignItems]}\n      justifyContent=\"center\"\n    >\n      {rows}\n      {buttonsRow}\n    </Block>\n  );\n};\n\nexport default FormElementsRow;\n","import React from 'react';\nimport { GoInfo } from 'react-icons/all';\nimport { Button, SHAPE as BUTTON_SHAPE, KIND as BUTTON_KIND } from 'baseui/button';\nimport { StatefulTooltip } from 'baseui/tooltip';\n\ntype HintProps = {\n  hint: string,\n};\n\nconst Hint = (props: HintProps) => {\n  const {hint} = props;\n\n  return (\n    <StatefulTooltip\n      accessibilityType={'tooltip'}\n      content={hint}\n    >\n      <Button\n        shape={BUTTON_SHAPE.round}\n        kind={BUTTON_KIND.minimal}\n        overrides={{\n          BaseButton: {\n            style: {\n              paddingTop: 0,\n              paddingBottom: 0,\n              paddingLeft: 0,\n              paddingRight: 0,\n            },\n          },\n        }}\n      >\n        <GoInfo />\n      </Button>\n    </StatefulTooltip>\n  );\n};\n\nexport default Hint;\n","import React from 'react';\nimport { Block } from 'baseui/block';\n\ntype RowProps = {\n  children: React.ReactNode,\n};\n\nconst Row = (props: RowProps) => {\n  const {children} = props;\n\n  return (\n    <Block\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      {children}\n    </Block>\n  );\n};\n\nexport default Row;\n","import React, { useEffect, useState } from 'react';\nimport { Block } from 'baseui/block';\nimport { OnChangeParams, Select, SIZE as SELECT_SIZE } from 'baseui/select';\nimport { FormControl } from 'baseui/form-control';\nimport { \n  Button,\n  SIZE as BUTTON_SIZE,\n  SHAPE as BUTTON_SHAPE,\n  KIND as BUTTON_KIND,\n} from 'baseui/button';\nimport { Slider } from 'baseui/slider';\nimport { BiReset } from 'react-icons/all';\nimport { Checkbox, LABEL_PLACEMENT } from 'baseui/checkbox';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  ModalButton,\n  SIZE,\n  ROLE\n} from 'baseui/modal';\nimport { Notification, KIND as NOTIFICATION_KIND } from 'baseui/notification';\n\nimport { Percentage, Probability } from '../../libs/genetic';\nimport FormElementsRow from '../shared/FormElementsRow';\nimport Hint from '../shared/Hint';\nimport Row from '../shared/Row';\nimport { GENOME_LENGTH } from '../../libs/carGenetic';\n\nexport const SECOND: number = 1000;\n\nconst GENERATION_SIZES: number[] = [4, 10, 50, 100, 200, 500, 1000, 2000];\nconst BATCH_SIZES: number[] = [1, 2, 3, 5, 10, 15, 20, 30, 50, 100];\n\nexport const DEFAULT_PERFORMANCE_BOOST: boolean = false;\nexport const DEFAULT_GENERATION_SIZE: number = 100;\nexport const DEFAULT_BATCH_SIZE: number = 2;\nexport const DEFAULT_MUTATION_PROBABILITY: Probability = 0.04;\nexport const DEFAULT_LONG_LIVING_CHAMPIONS_PERCENTAGE: Percentage = 6;\nexport const DEFAULT_GENERATION_LIFETIME: number = 17;\nexport const TRAINED_CAR_GENERATION_LIFETIME: number = DEFAULT_GENERATION_LIFETIME;\n\ntype EvolutionBoardParamsProps = {\n  generationSize: number,\n  batchSize: number,\n  mutationProbability: Probability,\n  longLivingChampionsPercentage: Percentage,\n  generationLifetime: number,\n  performanceBoost: boolean,\n  onGenerationSizeChange: (size: number) => void,\n  onBatchSizeChange: (size: number) => void,\n  onGenerationLifetimeChange: (time: number) => void,\n  onMutationProbabilityChange: (probability: Probability) => void,\n  onLongLivingChampionsPercentageChange: (percentage: Percentage) => void,\n  onPerformanceBoost: (state: boolean) => void,\n  onReset: () => void,\n};\n\nfunction EvolutionBoardParams(props: EvolutionBoardParamsProps) {\n  const {\n    generationSize,\n    batchSize,\n    generationLifetime,\n    longLivingChampionsPercentage,\n    onGenerationSizeChange,\n    performanceBoost,\n    onBatchSizeChange,\n    onGenerationLifetimeChange,\n    mutationProbability,\n    onMutationProbabilityChange,\n    onLongLivingChampionsPercentageChange,\n    onPerformanceBoost,\n    onReset,\n  } = props;\n\n  const [mutationProbabilityInternal, setMutationProbabilityInternal] = useState<Probability>(mutationProbability);\n  const [generationLifetimeInternal, setGenerationLifetimeInternal] = useState<number>(generationLifetime);\n  const [longLivingChampionsPercentageInternal, setLongLivingChampionsPercentageInternal] = useState<Percentage>(longLivingChampionsPercentage);\n  const [confirmationModalOpen, setConfirmationModalOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    setMutationProbabilityInternal(mutationProbability);\n    setGenerationLifetimeInternal(generationLifetime);\n    setLongLivingChampionsPercentageInternal(longLivingChampionsPercentage);\n  }, [mutationProbability, generationLifetime, longLivingChampionsPercentage]);\n\n  const onConfirmationModalOpen = () => {\n    setConfirmationModalOpen(true);\n  };\n\n  const onConfirmationModalClose = () => {\n    setConfirmationModalOpen(false);\n  };\n\n  const onConfirmationModalConfirm = () => {\n    setConfirmationModalOpen(false);\n    onReset();\n  };\n\n  const generationSizeCurrentValue = [{\n    id: `${generationSize}`,\n    size: generationSize,\n  }];\n  const generationSizes = GENERATION_SIZES.map((size: number) => {\n    return {\n      id: `${size}`,\n      size,\n    };\n  });\n  const generationSizeSelector = (\n    <FormControl label={() => 'Generation size'}>\n      <Select\n        options={generationSizes}\n        value={generationSizeCurrentValue}\n        onChange={(params: OnChangeParams) => onGenerationSizeChange(params.value[0].size)}\n        labelKey=\"id\"\n        valueKey=\"size\"\n        size={SELECT_SIZE.compact}\n        clearable={false}\n        searchable={false}\n      />\n    </FormControl>\n  );\n\n  const batchSizeCurrentValue = [{\n    id: `${batchSize}`,\n    size: batchSize,\n  }];\n  const batchSizes = BATCH_SIZES.map((size: number) => {\n    return {\n      id: `${size}`,\n      size,\n    };\n  });\n  const batchSizeSelector = (\n    <FormControl label={() => 'Group size'}>\n      <Select\n        options={batchSizes}\n        value={batchSizeCurrentValue}\n        onChange={(params: OnChangeParams) => onBatchSizeChange(params.value[0].size)}\n        labelKey=\"id\"\n        valueKey=\"size\"\n        size={SELECT_SIZE.compact}\n        clearable={false}\n        searchable={false}\n      />\n    </FormControl>\n  );\n\n  const sliderOverrides = {\n    TickBar: {\n      style: {\n        paddingBottom: 0,\n      },\n    },\n    InnerThumb: ({$value, $thumbIndex}: {$value: number[], $thumbIndex: number}) => (\n      <React.Fragment>{$value[$thumbIndex]}</React.Fragment>\n    ),\n    ThumbValue: () => null,\n    Thumb: {\n      style: () => ({\n        color: 'white',\n        fontSize: '10px',\n        fontWeight: 600,\n      }),\n    },\n  };\n\n  const generationLifetimeChanger = (\n    <FormControl\n      label={() => 'Generation lifetime, s'}\n      caption={() => 'Time the cars have for parking'}\n    >\n      <Slider\n        step={1}\n        marks={false}\n        persistentThumb\n        min={10}\n        max={30}\n        value={[generationLifetimeInternal]}\n        onChange={({ value }) => value && setGenerationLifetimeInternal(value[0])}\n        onFinalChange={({value}) => onGenerationLifetimeChange(value[0])}\n        valueToLabel={(value) => `${value}s`}\n        overrides={sliderOverrides}\n      />\n    </FormControl>\n  );\n\n  const genesToBeMutated = Math.floor(GENOME_LENGTH * mutationProbabilityInternal);\n\n  const mutationProbabilityChanger = (\n    <FormControl\n      label={() => 'Gene mutation probability, %'}\n      caption={() => `≈${genesToBeMutated} out of ${GENOME_LENGTH} car genes will be mutated`}\n    >\n      <Slider\n        step={1}\n        marks={false}\n        persistentThumb\n        min={0}\n        max={100}\n        value={[Math.floor(mutationProbabilityInternal * 100)]}\n        onChange={({ value }) => value && setMutationProbabilityInternal(value[0] / 100)}\n        onFinalChange={({value}) => onMutationProbabilityChange(value[0] / 100)}\n        valueToLabel={(value) => `${value}%`}\n        overrides={sliderOverrides}\n      />\n    </FormControl>\n  );\n\n  const longLivingChampionsCount = Math.floor(generationSize * longLivingChampionsPercentageInternal / 100);\n  const longLivingChampionsChanger = (\n    <FormControl\n      label={() => 'Long-living champions, %'}\n      caption={() => `${longLivingChampionsCount} best cars will be copied to the next generation`}\n    >\n      <Slider\n        step={1}\n        marks={false}\n        persistentThumb\n        min={0}\n        max={100}\n        value={[longLivingChampionsPercentageInternal]}\n        onChange={({ value }) => value && setLongLivingChampionsPercentageInternal(value[0])}\n        onFinalChange={({value}) => onLongLivingChampionsPercentageChange(value[0])}\n        valueToLabel={(value) => `${value}%`}\n        overrides={sliderOverrides}\n      />\n    </FormControl>\n  );\n\n  const resetButton = (\n    <FormControl>\n      <Button\n        size={BUTTON_SIZE.compact}\n        shape={BUTTON_SHAPE.pill}\n        onClick={onConfirmationModalOpen}\n        startEnhancer={() => <BiReset size={18} />}\n        overrides={{\n          BaseButton: {\n            props: {\n              title: 'Reset evolution configuration and training progress',\n            },\n          },\n        }}\n      >\n        Reset\n      </Button>\n    </FormControl>\n  );\n\n  const performanceBooster = (\n    <Block>\n      <FormControl>\n        <Block marginTop=\"10px\">\n          <Checkbox\n            checked={performanceBoost}\n            // @ts-ignore\n            onChange={e => onPerformanceBoost(e.target.checked)}\n            labelPlacement={LABEL_PLACEMENT.right}\n          >\n            <Row>\n              <Block marginRight=\"5px\">\n                <small>Performance boost</small>\n              </Block>\n              <Hint\n                hint=\"Speed up the simulation by simplifying the geometry\"\n              />\n            </Row>\n          </Checkbox>\n        </Block>\n      </FormControl>\n    </Block>\n  );\n\n  const resetConfirmationModal = (\n    <Modal\n      onClose={onConfirmationModalClose}\n      closeable\n      isOpen={confirmationModalOpen}\n      animate\n      autoFocus\n      size={SIZE.default}\n      role={ROLE.dialog}\n    >\n      <ModalHeader>\n        Confirm evolution resetting\n      </ModalHeader>\n      <ModalBody>\n        <Notification\n          kind={NOTIFICATION_KIND.warning}\n          overrides={{\n            Body: {style: {width: 'auto'}},\n          }}\n        >\n          Resetting will clear the evolution configuration and also the training progress\n        </Notification>\n      </ModalBody>\n      <ModalFooter>\n        <ModalButton\n          size={BUTTON_SIZE.compact}\n          shape={BUTTON_SHAPE.pill}\n          onClick={onConfirmationModalClose}\n          kind={BUTTON_KIND.tertiary}\n        >\n          Cancel\n        </ModalButton>\n        <ModalButton\n          size={BUTTON_SIZE.compact}\n          shape={BUTTON_SHAPE.pill}\n          onClick={onConfirmationModalConfirm}\n          kind={BUTTON_KIND.primary}\n          startEnhancer={() => <BiReset size={18} />}\n        >\n          Reset\n        </ModalButton>\n      </ModalFooter>\n    </Modal>\n  );\n\n  return (\n    <Block display=\"flex\" flexDirection=\"column\">\n      <FormElementsRow\n        nodes={[\n          generationLifetimeChanger,\n          mutationProbabilityChanger,\n          longLivingChampionsChanger,\n        ]}\n      />\n      <FormElementsRow\n        nodes={[\n          generationSizeSelector,\n          batchSizeSelector,\n        ]}\n        buttons={resetButton}\n        alignBottom\n      />\n      <FormElementsRow\n        nodes={[\n          performanceBooster,\n        ]}\n      />\n      {resetConfirmationModal}\n    </Block>\n  );\n}\n\nexport default EvolutionBoardParams;\n","import React from 'react';\nimport { Block } from 'baseui/block';\nimport { Table, DIVIDER, SIZE as TABLE_SIZE } from 'baseui/table-semantic';\nimport { Tag, VARIANT as TAG_VARIANT, KIND as TAG_KIND } from 'baseui/tag';\nimport { StyledSpinnerNext } from 'baseui/spinner';\nimport { withStyle } from 'baseui';\n\nimport { CarLicencePlateType, CarsType, CarType } from '../world/types/car';\nimport { formatLossValue } from './utils/evolution';\nimport FadeIn from '../shared/FadeIn';\nimport { FITNESS_ALPHA, LOSS_VALUE_BAD_THRESHOLD, LOSS_VALUE_GOOD_THRESHOLD } from './constants/evolution';\nimport { carLossToFitness } from '../../libs/carGenetic';\n\nexport type CarsInProgressType = Record<CarLicencePlateType, boolean>;\nexport type CarsLossType = Record<CarLicencePlateType, number | null>;\n\ntype PopulationTableProps = {\n  cars: CarsType,\n  carsInProgress: CarsInProgressType,\n  carsLoss: CarsLossType,\n};\n\nconst sortTable = true;\n\nconst CellSpinner = withStyle(StyledSpinnerNext, {\n  width: '18px',\n  height: '18px',\n  borderLeftWidth: '3px',\n  borderRightWidth: '3px',\n  borderTopWidth: '3px',\n  borderBottomWidth: '3px',\n  borderTopColor: 'black',\n});\n\nfunction PopulationTable(props: PopulationTableProps) {\n  const { cars, carsInProgress, carsLoss } = props;\n  const carsArray: CarType[] = Object.values<CarType>(cars);\n\n  const columns = [\n    'Licence Plate',\n    'Loss',\n    'Fitness',\n  ];\n\n  const rowsData: React.ReactNode[][] = carsArray\n    .sort((carA: CarType, carB: CarType): number => {\n      if (!sortTable) {\n        return 0;\n      }\n      const lossA = getCarLoss(carsLoss, carA);\n      const lossB = getCarLoss(carsLoss, carB);\n      if (lossA === null && lossB !== null) {\n        return 1;\n      }\n      if (lossA !== null && lossB === null) {\n        return -1;\n      }\n      if (lossA === null || lossB === null) {\n        return 0;\n      }\n      if (lossA === lossB) {\n        return 0;\n      }\n      if (lossA <= lossB) {\n        return -1;\n      }\n      return 1;\n    })\n    .map((car: CarType) => {\n      const licencePlateCell = (\n        <Tag\n          closeable={false}\n          kind={TAG_KIND.neutral}\n          variant={TAG_VARIANT.light}\n        >\n          {car.licencePlate}\n        </Tag>\n      );\n\n      const carLossFormatted: number | null = getCarLoss(carsLoss, car);\n      let carLossColor = '';\n      if (carLossFormatted !== null) {\n        if (carLossFormatted < LOSS_VALUE_GOOD_THRESHOLD) {\n          carLossColor = 'limegreen';\n        } else if (carLossFormatted < LOSS_VALUE_BAD_THRESHOLD) {\n          carLossColor = 'orange';\n        } else {\n          carLossColor = 'red';\n        }\n      }\n      const lossCell = carsInProgress[car.licencePlate] ? (\n        <FadeIn>\n          <CellSpinner />\n        </FadeIn>\n      ) : (\n        <Block color={carLossColor}>\n          {carLossFormatted}\n        </Block>\n      );\n\n      const fitnessValue: number | null = getCarFitness(carsLoss, car);\n      const fitnessCell = carsInProgress[car.licencePlate] ? (\n        <FadeIn>\n          <CellSpinner />\n        </FadeIn>\n      ) : (\n        <Block color={carLossColor}>\n          {fitnessValue}\n        </Block>\n      );\n\n      return [\n        licencePlateCell,\n        lossCell,\n        fitnessCell,\n      ];\n    });\n\n  return (\n    <Block>\n      <Table\n        columns={columns}\n        data={rowsData}\n        emptyMessage=\"No population yet\"\n        divider={DIVIDER.grid}\n        size={TABLE_SIZE.compact}\n        overrides={{\n          Root: {\n            style: {\n              maxHeight: '343px',\n            },\n          },\n          TableBodyCell: {\n            style: {\n              verticalAlign: 'center',\n            },\n          },\n        }}\n      />\n    </Block>\n  );\n}\n\nfunction getCarLoss(carsLoss: CarsLossType, car: CarType): number | null {\n  return carsLoss.hasOwnProperty(car.licencePlate) && typeof carsLoss[car.licencePlate] === 'number'\n    ? formatLossValue(carsLoss[car.licencePlate])\n    : null;\n}\n\nfunction getCarFitness(carsLoss: CarsLossType, car: CarType): number | null {\n  return carsLoss.hasOwnProperty(car.licencePlate) && typeof carsLoss[car.licencePlate] === 'number'\n    ? formatLossValue(carLossToFitness(carsLoss[car.licencePlate] || 0, FITNESS_ALPHA))\n    : null;\n}\n\nexport default PopulationTable;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Label1 } from 'baseui/typography';\nimport { Block } from 'baseui/block';\n\nimport './Timer.css';\n\ntype TimeMs = number;\n\ntype TimerProps = {\n  timeout?: TimeMs,\n  interval?: TimeMs,\n  version?: string,\n}\n\nfunction Timer(props: TimerProps) {\n  const {timeout = null, interval = 1000, version = ''} = props;\n\n  const [timePassed, setTimePassed] = useState<number>(0);\n  const timePassedRef = useRef<number>(0);\n\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  const reversedTime = timeout !== null;\n\n  const onInterval = () => {\n    timePassedRef.current += interval;\n    setTimePassed(timePassedRef.current);\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const onIntervalCallback = useCallback(onInterval, [timeout, interval]);\n\n  useEffect(() => {\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n    timePassedRef.current = 0;\n    setTimePassed(0);\n    timerRef.current = setInterval(onIntervalCallback, interval);\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [onIntervalCallback, interval, version]);\n\n  const formattedTime = timeout !== null\n    ? formatTime(timeout - timePassed)\n    : formatTime(timePassed);\n\n  return (\n    <Block display=\"flex\" flexDirection=\"row\" alignItems=\"flex-end\">\n      <Block marginRight=\"5px\">\n        <div className={reversedTime ? 'timer-loader-reverse' : 'timer-loader'} />\n      </Block>\n      <Label1>\n        <b><code>{formattedTime}</code></b>\n      </Label1>\n    </Block>\n  );\n}\n\nfunction formatTime(timeMs: TimeMs): string {\n  let timeSec = Math.max(Math.floor(timeMs / 1000), 0);\n  let secPrefix = '';\n  if (timeSec < 60) {\n    secPrefix = timeSec < 10 ? '0' : '';\n    return `${secPrefix}${timeSec}s`;\n  }\n  const timeMin = Math.floor(timeSec / 60);\n  timeSec = timeSec % 60;\n  secPrefix = timeSec < 10 ? '0' : '';\n  return `${timeMin}m${secPrefix}${timeSec}s`;\n}\n\nexport default Timer;\n","import React from 'react';\nimport { Label3 } from 'baseui/typography';\nimport {Tag, VARIANT as TAG_VARIANT} from 'baseui/tag';\nimport { Block } from 'baseui/block';\nimport {Notification, KIND as NOTIFICATION_KIND} from 'baseui/notification';\nimport { VscDebugRestart } from 'react-icons/all';\n\nimport Timer from '../shared/Timer';\n\ntype EvolutionTimingProps = {\n  generationIndex?: number | null,\n  totalBatches?: number | null,\n  batchIndex?: number | null,\n  generationLifetimeMs?: number,\n  batchVersion?: string,\n  worldVersion?: string,\n  retry?: boolean,\n  groupLabel?: string,\n  batchLifetimeLabel?: string,\n};\n\nfunction EvolutionTiming(props: EvolutionTimingProps) {\n  const {\n    generationIndex,\n    batchIndex,\n    totalBatches,\n    generationLifetimeMs,\n    batchVersion,\n    worldVersion,\n    retry = false,\n    groupLabel = 'Group',\n    batchLifetimeLabel = 'Group lifetime',\n  } = props;\n\n  const batchesCounter = retry ? (\n    <Block marginBottom=\"-2px\">\n      <VscDebugRestart title=\"Retrying the first group since the loss value increased\" />\n    </Block>\n  ) : (\n    <>\n      <small>#</small>{(batchIndex || 0) + 1}\n      {totalBatches && (<span> / {totalBatches}</span>)}\n    </>\n  );\n\n  const generationInfo = generationIndex !== undefined ? (\n    <TimingColumn caption=\"Generation\">\n      <Tag closeable={false} variant={TAG_VARIANT.solid} kind=\"neutral\">\n        <small>#</small>{(generationIndex || 0) + 1}\n      </Tag>\n    </TimingColumn>\n  ) : null;\n\n  const groupInfo = batchIndex !== undefined ? (\n    <TimingColumn caption={groupLabel}>\n      <Tag closeable={false} variant={TAG_VARIANT.solid} kind=\"neutral\">\n        {batchesCounter}\n      </Tag>\n    </TimingColumn>\n  ) : null;\n\n  const groupLifetime = generationLifetimeMs !== undefined && batchVersion !== undefined ? (\n    <TimingColumn caption={batchLifetimeLabel}>\n      <Block padding=\"3px\">\n        <Timer timeout={generationLifetimeMs} version={batchVersion} />\n      </Block>\n    </TimingColumn>\n  ) : null;\n\n  const worldAge = worldVersion !== undefined ? (\n    <TimingColumn caption=\"World age\">\n      <Block padding=\"3px\">\n        <Timer version={worldVersion} />\n      </Block>\n    </TimingColumn>\n  ) : null;\n\n  return (\n    <Notification\n      closeable={false}\n      kind={NOTIFICATION_KIND.warning}\n      overrides={{\n        Body: {style: {width: 'auto'}},\n        InnerContainer: {style: {flex: 1}},\n      }}\n    >\n      <Block\n        display=\"flex\"\n        flexDirection={['column', 'row', 'row']}\n        alignItems={['flex-start', 'flex-end', 'center']}\n        justifyContent=\"space-between\"\n        width=\"auto\"\n        flex=\"1\"\n      >\n        {generationInfo}\n        {groupInfo}\n        {groupLifetime}\n        {worldAge}\n      </Block>\n    </Notification>\n  );\n}\n\ntype TimingColumnProps = {\n  caption: string,\n  children: React.ReactNode,\n};\n\nfunction TimingColumn(props: TimingColumnProps) {\n  const {caption, children} = props;\n  return (\n    <Block\n      display=\"flex\"\n      flexDirection={['row', 'column', 'row']}\n      alignItems=\"center\"\n      marginLeft=\"5px\"\n      marginRight=\"5px\"\n    >\n      <Block\n        marginRight={['5px', '0', '5px']}\n        marginBottom={['0', '5px', '0']}\n        color=\"black\"\n        $style={{textAlign: 'center'}}\n      >\n        {caption}:\n      </Block>\n      <Label3>\n        {children}\n      </Label3>\n    </Block>\n  );\n}\n\nexport default EvolutionTiming;\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { Block } from 'baseui/block';\nimport { Datum, Point, ResponsiveLine, Serie } from '@nivo/line';\nimport { Checkbox } from 'baseui/checkbox';\n\nimport { formatLossValue } from './utils/evolution';\n\ntype LossHistoryProps = {\n  history: number[],\n  avgHistory: number[],\n};\n\n// @see: Nivo docs: https://nivo.rocks/line\nfunction LossHistory(props: LossHistoryProps) {\n  const {history, avgHistory} = props;\n\n  const [showAvgHistory, setShowAvgHistory] = useState<boolean>(true);\n  const [showMinLoss, setShowMinLoss] = useState<boolean>(true);\n\n  const emptyStateHistoryData: [number] = [0];\n  const historyData: Datum[] = (history.length ? history : emptyStateHistoryData).map(\n    (loss: number, generationIndex: number): Datum => {\n      const miss = loss === Infinity ? null : formatLossValue(loss);\n      return {\n        x: generationIndex,\n        y: miss,\n      };\n    }\n  );\n\n  const emptyStateAvgHistoryData: [number] = [0];\n  const avgHistoryData: Datum[] = (avgHistory.length ? avgHistory : emptyStateAvgHistoryData).map(\n    (loss: number, generationIndex: number): Datum => {\n      const miss = loss === Infinity ? null : formatLossValue(loss);\n      return {\n        x: generationIndex,\n        y: miss,\n      };\n    }\n  );\n\n  const chartData: Serie[] = [];\n\n  const minLossSeriesId = 'Min Loss';\n  const avgLossSeriesId = 'P50 Avg Loss';\n\n  if (showMinLoss) {\n    chartData.push({\n      id: minLossSeriesId,\n      data: historyData,\n      color: 'black',\n    });\n  }\n\n  if (showAvgHistory) {\n    chartData.push({\n      id: avgLossSeriesId,\n      data: avgHistoryData,\n      color: '#AAAAAA',\n    });\n  }\n\n  const chart = (\n    <ResponsiveLine\n      data={chartData}\n      margin={{ top: 3, right: 10, bottom: 42, left: 50 }}\n      xScale={history.length <= 20\n        ? { type: 'point' }\n        : { type: 'linear', min: 0, max: 'auto' }\n      }\n      yScale={{ type: 'linear', min: 0, max: 'auto' }}\n      yFormat=\" >-.2f\"\n      curve={'monotoneX'}\n      axisBottom={{\n        legend: 'Generation #',\n        legendOffset: 36,\n        legendPosition: 'middle',\n      }}\n      axisLeft={{\n        legend: 'Loss',\n        legendOffset: -40,\n        legendPosition: 'middle',\n      }}\n      pointSize={6}\n      pointColor={(datum: Datum) => {\n        return datum.color || 'black';\n      }}\n      pointBorderWidth={1}\n      pointBorderColor={'white'}\n      useMesh={true}\n      enableCrosshair={true}\n      enableSlices={false}\n      colors={(datum: Datum) => {\n        return datum.color || 'black';\n      }}\n      tooltip={({point}: {point: Point}) => {\n        const {data, serieId} = point;\n        return (\n          <Block $style={{\n            backgroundColor: 'white',\n            padding: '8px',\n            borderRadius: '8px',\n            boxShadow: '0 2px 1px -1px rgba(0,0,0,0.2), 0 1px 1px 0 rgba(0,0,0,0.14), 0 1px 3px 0 rgba(0,0,0,0.12)'\n          }}>\n            <Block marginBottom=\"3px\">\n              <small>\n                Generation: <b>{data.xFormatted}</b>\n              </small>\n            </Block>\n            <Block>\n              <small>\n                {serieId}: <b>{data.yFormatted}</b>\n              </small>\n            </Block>\n          </Block>\n        );\n      }}\n      legends={[\n        {\n          anchor: 'top-right',\n          direction: 'column',\n          justify: false,\n          translateX: -10,\n          translateY: 0,\n          itemsSpacing: 0,\n          itemDirection: 'left-to-right',\n          itemWidth: 80,\n          itemHeight: 20,\n          itemOpacity: 1,\n          symbolSize: 8,\n          symbolShape: 'circle',\n          symbolBorderColor: 'rgba(0, 0, 0, .5)',\n        }\n      ]}\n    />\n  );\n\n  const chartControls = (\n    <Block display=\"flex\" flexDirection=\"row\" marginTop=\"20px\" marginLeft=\"47px\">\n      <Block marginRight=\"30px\">\n        <Checkbox\n          disabled={!showAvgHistory}\n          checked={showMinLoss}\n          onChange={() => setShowMinLoss(!showMinLoss)}\n        >\n          {minLossSeriesId}\n        </Checkbox>\n      </Block>\n\n      <Block>\n        <Checkbox\n          disabled={!showMinLoss}\n          checked={showAvgHistory}\n          onChange={() => setShowAvgHistory(!showAvgHistory)}\n        >\n          {avgLossSeriesId}\n        </Checkbox>\n      </Block>\n    </Block>\n  );\n\n  return (\n    <Block>\n      <Block\n        height=\"300px\"\n        $style={{\n          fontFamily: 'system-ui, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n          fontSize: '14px',\n        }}\n      >\n        {chart}\n      </Block>\n      <Block>\n        {chartControls}\n      </Block>\n    </Block>\n  );\n}\n\nexport default LossHistory;\n","import * as React from 'react';\nimport { Block } from 'baseui/block';\nimport { CSSProperties, FormEvent, useState } from 'react';\nimport { Textarea } from 'baseui/textarea';\nimport { Button, SHAPE as BUTTON_SHAPE, KIND as BUTTON_KIND, SIZE as BUTTON_SIZE } from 'baseui/button';\nimport { BiEdit, FaRegSave } from 'react-icons/all';\n\nimport { Gene, Genome } from '../../libs/genetic';\nimport { CarLicencePlateType } from '../world/types/car';\nimport { FormControl } from 'baseui/form-control';\nimport { formatLossValue } from './utils/evolution';\nimport { CAR_SENSORS_NUM, carLossToFitness, decodeGenome, FormulaCoefficients } from '../../libs/carGenetic';\nimport { FITNESS_ALPHA } from './constants/evolution';\n\ntype GenomePreviewProps = {\n  genome: Genome | null,\n  title?: string,\n  licencePlate?: CarLicencePlateType | null,\n  loss?: number | null,\n  editable?: boolean,\n  onGenomeEdit?: (genome: Genome) => void,\n};\n\nconst genomeSeparator = ' ';\n\nconst commonGenomeStyles: CSSProperties = {\n  paddingTop: '15px',\n  paddingRight: '15px',\n  paddingBottom: '15px',\n  paddingLeft: '15px',\n  fontSize: '12px',\n  backgroundColor: '#FFFFFF',\n  lineHeight: '20px',\n  fontFamily: 'monospace',\n};\n\nfunction GenomePreview(props: GenomePreviewProps) {\n  const {\n    title,\n    genome,\n    licencePlate,\n    loss,\n    editable = false,\n    onGenomeEdit = (genome: Genome) => {},\n  } = props;\n\n  const [shortEngineFormula] = useState<boolean>(true);\n  const [shortWheelsFormula] = useState<boolean>(true);\n\n  const [isEditableGenome, setIsEditableGenome] = useState<boolean>(false);\n  const [editedGenome, setEditedGenome] = useState<Genome | null>(genome);\n  const [genomeError, setGenomeError] = useState<string | null>(null);\n\n  const onGenomeUpdate = (genomeString: string) => {\n    if (!genome) {\n      return;\n    }\n\n    const genomeFromString: Genome = genomeString\n      .trim()\n      .split('')\n      .filter((geneString: string) => ['0', '1'].includes(geneString))\n      .map((geneString: string) => {\n        const gene: Gene = geneString === '0' ? 0 : 1;\n        return gene;\n      });\n    setEditedGenome(genomeFromString);\n\n    if (genomeFromString.length !== genome.length) {\n      setGenomeError(`Genome must have ${genome.length} genes. Currently it has ${genomeFromString.length} genes.`);\n    } else {\n      setGenomeError(null);\n    }\n  };\n\n  const onEditToggle = () => {\n    if (editedGenome && isEditableGenome && !genomeError) {\n      onGenomeEdit(editedGenome)\n    }\n    setIsEditableGenome(!isEditableGenome);\n  };\n\n  const genomeCaption = (\n    <Block display=\"flex\" flexDirection=\"row\">\n      {genome && (\n        <Block marginRight=\"10px\">\n          Genes: <b>{genome.length}</b>\n        </Block>\n      )}\n      {licencePlate && (\n        <Block marginRight=\"15px\">\n          Licence plate: <b>{licencePlate}</b>\n        </Block>\n      )}\n      {loss && (\n        <Block marginRight=\"15px\">\n          Loss: <b>{formatLossValue(loss)}</b>\n        </Block>\n      )}\n      {loss && (\n        <Block>\n          Fitness: <b>{formatLossValue(carLossToFitness(loss, FITNESS_ALPHA))}</b>\n        </Block>\n      )}\n    </Block>\n  );\n\n  const label = title || 'Car genome';\n\n  const genomeEditButtonIcon = !isEditableGenome ? (\n    <BiEdit title=\"Edit genome\" />\n  ) : null;\n\n  const genomeSaveButtonIcon = isEditableGenome ? (\n    <FaRegSave title=\"Save genome\" />\n  ) : null;\n\n  const genomeEditButtons = editable ? (\n    <Block\n      display=\"flex\"\n      flexDirection=\"row\"\n      justifyContent=\"flex-end\"\n      alignItems=\"center\"\n      marginBottom=\"-30px\"\n    >\n      <Button\n        onClick={onEditToggle}\n        shape={BUTTON_SHAPE.pill}\n        kind={BUTTON_KIND.minimal}\n        size={BUTTON_SIZE.default}\n        disabled={!!genomeError}\n        overrides={{\n          BaseButton: {\n            style: {\n              paddingTop: 0,\n              paddingRight: 0,\n              paddingBottom: 0,\n              paddingLeft: 0,\n              marginTop: '5px',\n              display: 'block',\n            },\n            props: {\n              title: isEditableGenome ? 'Save genome' : 'Edit genome',\n            },\n          },\n        }}\n      >\n        <Block>\n          {genomeEditButtonIcon}\n          {genomeSaveButtonIcon}\n        </Block>\n      </Button>\n    </Block>\n  ) : null;\n\n  const genomePreviewLabel = (\n    <Block>\n      {label}\n    </Block>\n  );\n\n  const genomeString = (genome || []).join(genomeSeparator);\n  const genomePreviewOutput = (\n    <FormControl\n      label={genomePreviewLabel}\n      caption={genomeCaption}\n    >\n      <CodeBlock>\n        {genomeString}\n      </CodeBlock>\n    </FormControl>\n  );\n\n  const editedGenomeString = (editedGenome || []).join(genomeSeparator);\n  const genomeEditableOutput = (\n    <FormControl\n      label={() => genomePreviewLabel}\n      caption={(\n        <span>\n          Copy/paste whole genome or double-click the specific gene and change it\n        </span>\n      )}\n      error={genomeError}\n    >\n      <Textarea\n        value={editedGenomeString}\n        onChange={(event: FormEvent<HTMLTextAreaElement>) => {\n          // @ts-ignore\n          onGenomeUpdate(event.target.value);\n        }}\n        overrides={{\n          Input: {\n            style: {\n              ...commonGenomeStyles,\n              height: '120px',\n            },\n          },\n        }}\n        error={!!genomeError}\n        autoFocus\n      />\n    </FormControl>\n  );\n\n  const genomeOutput = isEditableGenome ? genomeEditableOutput : genomePreviewOutput;\n\n  let decodedEngineFormula = null;\n  let decodedWheelsFormula = null;\n  if (genome) {\n    const { engineFormulaCoefficients, wheelsFormulaCoefficients } = decodeGenome(genome);\n    decodedEngineFormula = (\n      <Coefficients\n        label=\"Engine formula\"\n        caption={\n          `Multipliers for ${CAR_SENSORS_NUM} car sensors (+1 bias unit) that define the engine mode (backward, neutral, forward)`\n        }\n        coefficients={engineFormulaCoefficients}\n        shortNumbers={shortEngineFormula}\n      />\n    );\n    decodedWheelsFormula = (\n      <Coefficients\n        label=\"Wheels formula\"\n        caption={\n          `Multipliers for ${CAR_SENSORS_NUM} car sensors (+1 bias unit) that define the wheels direction (left, straight, right)`\n        }\n        coefficients={wheelsFormulaCoefficients}\n        shortNumbers={shortWheelsFormula}\n      />\n    );\n  }\n\n  const blocksMarginBottom = '30px';\n\n  return (\n    <Block>\n      <Block marginBottom={blocksMarginBottom}>\n        {genomeEditButtons}\n        {genomeOutput}\n      </Block>\n\n      <Block marginBottom={blocksMarginBottom}>\n        {decodedEngineFormula}\n      </Block>\n\n      <Block marginBottom={blocksMarginBottom}>\n        {decodedWheelsFormula}\n      </Block>\n    </Block>\n  );\n}\n\ntype CoefficientsProps = {\n  label: string,\n  caption: string,\n  coefficients: FormulaCoefficients,\n  shortNumbers: boolean,\n};\n\nfunction Coefficients(props: CoefficientsProps) {\n  const {coefficients, label, caption, shortNumbers} = props;\n  const coefficientsString = coefficients\n    .map((coefficient: number) => formatCoefficient(coefficient, shortNumbers))\n    .join(', ');\n  return (\n    <Block>\n      <FormControl\n        label={() => label}\n        caption={() => caption}\n      >\n        <CodeBlock>\n          {coefficientsString}\n        </CodeBlock>\n      </FormControl>\n    </Block>\n  );\n}\n\ntype CodeBlockProps = {\n  children: React.ReactNode,\n};\n\nfunction CodeBlock(props: CodeBlockProps) {\n  const {children} = props;\n  return (\n    <>\n      <Block $style={{\n        ...commonGenomeStyles,\n        border: '1px dotted #CCCCCC',\n        borderRadius: '3px',\n      }}>\n        <code>\n          {children}\n        </code>\n      </Block>\n    </>\n  );\n}\n\nfunction formatCoefficient(coefficient: number, shortNumber: boolean = true): number {\n  if (shortNumber) {\n    return Math.ceil(coefficient * 1000) / 1000;\n  }\n  return coefficient;\n}\n\nexport default GenomePreview;\n","import React from 'react';\nimport { Panel, StatelessAccordion } from 'baseui/accordion';\nimport { Genome } from '../../libs/genetic';\nimport GenomePreview from './GenomePreview';\nimport { CarLicencePlateType } from '../world/types/car';\n\nconst GENOME_PANELS = {\n  firstBestGenome: 'first-best-genome',\n  secondBestGenome: 'second-best-genome',\n};\n\ntype BestGenomesProps = {\n  bestGenomePanelTitle?: string,\n  bestGenome: Genome | null,\n  bestCarLicencePlate?: CarLicencePlateType | null,\n  minLoss?: number | null,\n  secondBestGenomePanelTitle?: string,\n  secondBestGenome?: Genome | null,\n  secondBestCarLicencePlate?: CarLicencePlateType | null,\n  secondMinLoss?: number | null,\n  editable?: boolean,\n  onBestGenomeEdit?: (genome: Genome) => void,\n};\n\nfunction BestGenomes(props: BestGenomesProps): React.ReactElement {\n  const {\n    bestGenomePanelTitle = '1st Best Car Genome',\n    bestGenome,\n    bestCarLicencePlate,\n    minLoss,\n    secondBestGenomePanelTitle = '2nd Best Car Genome',\n    secondBestGenome,\n    secondBestCarLicencePlate,\n    secondMinLoss,\n    editable = false,\n    onBestGenomeEdit = (genome: Genome) => {},\n  } = props;\n\n  const [genomeExpandedTabs, setGenomeExpandedTabs] = React.useState<React.Key[]>([\n    GENOME_PANELS.firstBestGenome\n  ]);\n\n  const onPanelChange = (\n    {key, expanded}: {key: React.Key, expanded: React.Key[]}\n  ) => {\n    const newGenomeExpandedTabs = [...genomeExpandedTabs];\n    const openedTabIndex = newGenomeExpandedTabs.indexOf(key);\n    if (openedTabIndex === -1) {\n      newGenomeExpandedTabs.push(key);\n    } else {\n      newGenomeExpandedTabs.splice(openedTabIndex);\n    }\n    setGenomeExpandedTabs(newGenomeExpandedTabs);\n  };\n\n  const bestGenomePreview = (\n    <GenomePreview\n      genome={bestGenome}\n      licencePlate={bestCarLicencePlate}\n      loss={minLoss}\n      editable={editable}\n      onGenomeEdit={onBestGenomeEdit}\n    />\n  );\n\n  const secondBestGenomePreview = secondBestGenome !== undefined ? (\n    <GenomePreview\n      genome={secondBestGenome}\n      licencePlate={secondBestCarLicencePlate}\n      loss={secondMinLoss}\n    />\n  ) : null;\n\n  const panels = [];\n\n  const firstBestGenomePanel = (\n    <Panel title={bestGenomePanelTitle} key={GENOME_PANELS.firstBestGenome}>\n      {bestGenomePreview}\n    </Panel>\n  );\n\n  const secondBestGenomePanel = secondBestGenomePreview ? (\n    <Panel title={secondBestGenomePanelTitle} key={GENOME_PANELS.secondBestGenome}>\n      {secondBestGenomePreview}\n    </Panel>\n  ) : null;\n\n  panels.push(firstBestGenomePanel);\n  if (secondBestGenomePanel) {\n    panels.push(secondBestGenomePanel);\n  }\n\n  return (\n    <StatelessAccordion\n      expanded={genomeExpandedTabs}\n      onChange={onPanelChange}\n    >\n      {panels}\n    </StatelessAccordion>\n  );\n}\n\nexport default BestGenomes;\n","import React from 'react';\nimport { Block } from 'baseui/block';\n\nimport PopulationTable, { CarsInProgressType, CarsLossType } from './PopulationTable';\nimport EvolutionBoardParams from './EvolutionBoardParams';\nimport EvolutionTiming from './EvolutionTiming';\nimport LossHistory from './LossHistory';\nimport BestGenomes from './BestGenomes';\nimport { CarLicencePlateType, CarsType } from '../world/types/car';\nimport { Genome, Percentage, Probability } from '../../libs/genetic';\n\ntype EvolutionAnalyticsProps = {\n  generationIndex: number | null,\n  carsBatchIndex: number | null,\n  totalBatches: number | null,\n  worldIndex: number,\n  generationLifetimeMs: number,\n  generationSize: number,\n  carsBatchSize: number,\n  mutationProbability: Probability,\n  performanceBoost: boolean,\n  needToRetry: boolean,\n  longLivingChampionsPercentage: Percentage,\n  generationLifetime: number,\n  batchVersion: string,\n  onGenerationSizeChange: (size: number) => void,\n  onBatchSizeChange: (size: number) => void,\n  onGenerationLifetimeChange: (time: number) => void,\n  onReset: () => void,\n  onMutationProbabilityChange: (probability: Probability) => void,\n  onLongLivingChampionsPercentageChange: (percentage: Percentage) => void,\n  onPerformanceBoost: (state: boolean) => void,\n  lossHistory: number[],\n  avgLossHistory: number[],\n  cars: CarsType,\n  carsInProgress: CarsInProgressType,\n  carsLoss: CarsLossType[],\n  bestGenome: Genome | null,\n  bestCarLicencePlate: CarLicencePlateType | null,\n  minLoss: number | null,\n  secondBestGenome: Genome | null,\n  secondBestCarLicencePlate: CarLicencePlateType | null,\n  secondMinLoss: number | null,\n};\n\nfunction EvolutionAnalytics(props: EvolutionAnalyticsProps) {\n  const {\n    generationIndex,\n    carsBatchIndex,\n    totalBatches,\n    needToRetry,\n    mutationProbability,\n    longLivingChampionsPercentage,\n    worldIndex,\n    generationLifetimeMs,\n    generationSize,\n    performanceBoost,\n    carsBatchSize,\n    generationLifetime,\n    batchVersion,\n    onGenerationSizeChange,\n    onBatchSizeChange,\n    onGenerationLifetimeChange,\n    onReset,\n    onMutationProbabilityChange,\n    onLongLivingChampionsPercentageChange,\n    onPerformanceBoost,\n    lossHistory,\n    avgLossHistory,\n    cars,\n    carsInProgress,\n    carsLoss,\n    bestGenome,\n    bestCarLicencePlate,\n    minLoss,\n    secondBestGenome,\n    secondBestCarLicencePlate,\n    secondMinLoss,\n  } = props;\n\n  const timingDetails = (\n    <Block marginBottom=\"30px\" marginTop=\"20px\">\n      <EvolutionTiming\n        generationIndex={generationIndex}\n        batchIndex={carsBatchIndex}\n        totalBatches={totalBatches}\n        batchVersion={batchVersion}\n        worldVersion={`${worldIndex}`}\n        generationLifetimeMs={generationLifetimeMs}\n        retry={needToRetry}\n      />\n    </Block>\n  );\n\n  const evolutionParams = (\n    <Block marginBottom=\"30px\">\n      <EvolutionBoardParams\n        generationSize={generationSize}\n        batchSize={carsBatchSize}\n        mutationProbability={mutationProbability}\n        generationLifetime={generationLifetime}\n        longLivingChampionsPercentage={longLivingChampionsPercentage}\n        performanceBoost={performanceBoost}\n        onGenerationSizeChange={onGenerationSizeChange}\n        onBatchSizeChange={onBatchSizeChange}\n        onGenerationLifetimeChange={onGenerationLifetimeChange}\n        onMutationProbabilityChange={onMutationProbabilityChange}\n        onLongLivingChampionsPercentageChange={onLongLivingChampionsPercentageChange}\n        onPerformanceBoost={onPerformanceBoost}\n        onReset={onReset}\n      />\n    </Block>\n  );\n\n  const lossHistoryChart = (\n    <Block marginBottom=\"30px\">\n      <LossHistory\n        history={lossHistory}\n        avgHistory={avgLossHistory}\n      />\n    </Block>\n  );\n\n  const populationTable = (\n    <Block>\n      <PopulationTable\n        cars={cars}\n        carsInProgress={carsInProgress}\n        carsLoss={\n          generationIndex !== null && carsLoss[generationIndex]\n            ? carsLoss[generationIndex]\n            : {}\n        }\n      />\n    </Block>\n  );\n\n  return (\n    <>\n      {timingDetails}\n      {evolutionParams}\n      <Block display=\"flex\" flexDirection={['column', 'column', 'row-reverse']}>\n        <Block flex={2} marginBottom=\"30px\" marginLeft={['0px', '0px', '15px']}>\n          {lossHistoryChart}\n        </Block>\n        <Block flex={1} marginBottom=\"30px\" marginRight={['0px', '0px', '15px']}>\n          {populationTable}\n        </Block>\n      </Block>\n      <BestGenomes\n        bestGenome={bestGenome}\n        bestCarLicencePlate={bestCarLicencePlate}\n        minLoss={minLoss}\n        secondBestGenome={secondBestGenome}\n        secondBestCarLicencePlate={secondBestCarLicencePlate}\n        secondMinLoss={secondMinLoss}\n      />\n    </>\n  );\n}\n\nexport default EvolutionAnalytics;\n","import React from 'react';\n\nimport Ground from '../surroundings/Ground';\nimport StaticCars from '../cars/StaticCars';\nimport DynamicCars from '../cars/DynamicCars';\nimport { DynamicCarsPosition } from '../constants/cars';\nimport ParkingSpot from '../surroundings/ParkingSpot';\nimport { CarType } from '../types/car';\n\n// Collision groups and masks must be powers of 2.\n// @see: https://github.com/schteppe/cannon.js/blob/master/demos/collisionFilter.html\nconst COLLISION_GROUP_ACTIVE_CARS = 0b0001;\nconst COLLISION_GROUP_STATIC_OBJECTS = 0b0010;\nconst COLLISION_MASK_ACTIVE_CARS = COLLISION_GROUP_STATIC_OBJECTS // It can only collide with static objects.\nconst COLLISION_MASK_STATIC_OBJECTS = COLLISION_GROUP_ACTIVE_CARS // It can only collide with active cars.\n\ntype ParkingAutomaticProps = {\n  cars: CarType[],\n  withVisibleSensors?: boolean,\n  withLabels?: boolean,\n  performanceBoost?: boolean,\n  carsPosition?: DynamicCarsPosition,\n};\n\nfunction ParkingAutomatic(props: ParkingAutomaticProps) {\n  const {\n    cars,\n    withVisibleSensors = false,\n    withLabels = false,\n    performanceBoost = false,\n    carsPosition,\n  } = props;\n\n  return (\n    <>\n      <Ground\n        userData={{ uuid: 'ground' }}\n        collisionFilterGroup={COLLISION_GROUP_STATIC_OBJECTS}\n        collisionFilterMask={COLLISION_MASK_STATIC_OBJECTS}\n      />\n      <ParkingSpot />\n      <DynamicCars\n        cars={cars}\n        collisionFilterGroup={COLLISION_GROUP_ACTIVE_CARS}\n        collisionFilterMask={COLLISION_MASK_ACTIVE_CARS}\n        controllable\n        withSensors\n        visibleSensors={withVisibleSensors}\n        withLabels={withLabels}\n        withRandomColors={false}\n        performanceBoost={performanceBoost}\n        carsPosition={carsPosition}\n      />\n      <StaticCars\n        rows={2}\n        cols={5}\n        skipCells={[[0, 2]]}\n        collisionFilterGroup={COLLISION_GROUP_STATIC_OBJECTS}\n        collisionFilterMask={COLLISION_MASK_STATIC_OBJECTS}\n        performanceBoost={performanceBoost}\n      />\n    </>\n  );\n}\n\nexport default ParkingAutomatic;\n","import React, { useState } from 'react';\nimport { Block } from 'baseui/block';\nimport { \n  Button,\n  SIZE as BUTTON_SIZE,\n  SHAPE as BUTTON_SHAPE,\n  KIND as BUTTON_KIND,\n} from 'baseui/button';\nimport { BiDownload, BiUpload } from 'react-icons/all';\nimport { saveAs } from 'file-saver';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  SIZE,\n  ROLE\n} from 'baseui/modal';\nimport { FileUploader } from 'baseui/file-uploader';\nimport { Notification, KIND as NOTIFICATION_KIND } from 'baseui/notification';\nimport { Paragraph3 } from 'baseui/typography';\n\nimport Row from '../shared/Row';\nimport { Generation, Percentage, Probability } from '../../libs/genetic';\nimport { CHECKPOINTS_PATH } from '../../constants/links';\nimport demoCheckpoint from '../../checkpoints/ckpt--population-1000--generation-36.json';\n\nexport type EvolutionCheckpoint = {\n  dateTime: string,\n  generationIndex: number,\n  lossHistory: number[],\n  avgLossHistory: number[],\n  performanceBoost: boolean,\n  generationSize: number,\n  generationLifetime: number,\n  carsBatchSize: number,\n  mutationProbability: Probability,\n  longLivingChampionsPercentage: Percentage,\n  generation: Generation,\n};\n\ntype EvolutionCheckpointSaverProps = {\n  onRestoreFromCheckpoint: (checkpoint: EvolutionCheckpoint) => void,\n  onCheckpointToFile: () => EvolutionCheckpoint,\n};\n\nfunction EvolutionCheckpointSaver(props: EvolutionCheckpointSaverProps) {\n  const {\n    onRestoreFromCheckpoint,\n    onCheckpointToFile,\n  } = props;\n\n  const [showCheckpointModal, setShowCheckpointModal] = useState<boolean>(false);\n  const [checkpointIsProcessing, setCheckpointIsProcessing] = useState<boolean>(false);\n  const [checkpointErrorMessage, setCheckpointErrorMessage] = useState<string | null>(null);\n\n  const onSaveEvolution = () => {\n    const checkpoint: EvolutionCheckpoint = onCheckpointToFile();\n    const fileName = `ckpt--population-${checkpoint.generationSize}--generation-${checkpoint.generationIndex}.json`;\n    const checkpointString: string = JSON.stringify(checkpoint);\n    const checkpointBlob = new Blob(\n      [checkpointString],\n      { type: 'application/json' },\n    );\n    saveAs(checkpointBlob, fileName);\n  };\n\n  const onCheckpointModalOpen = () => {\n    setCheckpointErrorMessage(null);\n    setCheckpointIsProcessing(false);\n    setShowCheckpointModal(true);\n  };\n\n  const onCheckpointModalClose = () => {\n    setShowCheckpointModal(false);\n  };\n\n  const onCancelCheckpointUpload = () => {\n    setCheckpointIsProcessing(false);\n  };\n\n  const onFileDrop = (acceptedFiles: File[]) => {\n    try {\n      setCheckpointIsProcessing(true);\n\n      const onFileReaderLoaded = (event: Event) => {\n        // @ts-ignore\n        const checkpoint: EvolutionCheckpoint = JSON.parse(event.target.result);\n        onRestoreFromCheckpoint(checkpoint);\n        setCheckpointIsProcessing(false);\n        onCheckpointModalClose();\n      };\n  \n      const fileReader = new FileReader();\n      fileReader.onload = onFileReaderLoaded;\n      fileReader.readAsText(acceptedFiles[0]);\n    } catch (error: any) {\n      setCheckpointErrorMessage(error.message);\n      setCheckpointIsProcessing(false);\n    }\n  };\n\n  const onUseDemoCheckpoint = () => {\n    try {\n      // @ts-ignore\n      onRestoreFromCheckpoint(demoCheckpoint);\n      onCheckpointModalClose();\n    } catch (error: any) {\n      setCheckpointErrorMessage(error.message);\n    }\n  };\n\n  const checkpointError = checkpointErrorMessage ? (\n    <Notification\n      kind={NOTIFICATION_KIND.negative}\n      overrides={{\n        Body: {style: {width: 'auto'}},\n      }}\n    >\n      {checkpointErrorMessage}\n    </Notification>\n  ) : null;\n\n  const checkpointModal = (\n    <Modal\n      onClose={onCheckpointModalClose}\n      closeable\n      isOpen={showCheckpointModal}\n      animate\n      autoFocus\n      size={SIZE.default}\n      role={ROLE.dialog}\n    >\n      <ModalHeader>Restore evolution from the checkpoint file</ModalHeader>\n      <ModalBody>\n        {checkpointError}\n        <Paragraph3>\n          Checkpoint is a <code>json</code> file that contain the history of the evolution and the list of genomes from the latest generation.\n        </Paragraph3>\n        <Paragraph3>\n          You may save your own evolution progress to the checkpoint file or use <a style={{color: 'black'}} href={CHECKPOINTS_PATH}>one of the pre-trained checkpoints</a>.\n        </Paragraph3>\n\n        <Block marginBottom=\"20px\">\n          <Button\n            size={BUTTON_SIZE.compact}\n            shape={BUTTON_SHAPE.pill}\n            kind={BUTTON_KIND.secondary}\n            onClick={onUseDemoCheckpoint}\n          >\n            Use demo checkpoint  \n          </Button>\n        </Block>\n\n        <FileUploader\n          onCancel={onCancelCheckpointUpload}\n          onDrop={onFileDrop}\n          accept=\"application/json\"\n          multiple={false}\n          progressMessage={checkpointIsProcessing ? 'Processing...' : ''}\n        />\n      </ModalBody>\n    </Modal>\n  );\n\n  return (\n    <>\n      <Row>\n        <Block marginRight=\"5px\">\n          <Button\n            startEnhancer={() => <BiDownload size={18} />}\n            size={BUTTON_SIZE.compact}\n            shape={BUTTON_SHAPE.pill}\n            onClick={onSaveEvolution}\n          >\n            Save evolution\n          </Button>\n        </Block>\n\n        <Block marginLeft=\"5px\">\n          <Button\n            startEnhancer={() => <BiUpload size={18} />}\n            size={BUTTON_SIZE.compact}\n            shape={BUTTON_SHAPE.pill}\n            onClick={onCheckpointModalOpen}\n          >\n            Restore evolution\n          </Button>\n        </Block>\n      </Row>\n\n      {checkpointModal}\n    </>\n  );\n}\n\nexport default EvolutionCheckpointSaver;\n","import React, { useEffect, useRef, useState } from 'react';\nimport _ from 'lodash';\nimport { Block } from 'baseui/block';\nimport { useSnackbar, DURATION } from 'baseui/snackbar';\nimport { Check } from 'baseui/icon';\nimport { BiUpload } from 'react-icons/all';\nimport { Notification } from 'baseui/notification';\n\nimport { createGeneration, Generation, Genome, Percentage, Probability, select } from '../../libs/genetic';\nimport { CarsLossType, CarsInProgressType } from './PopulationTable';\nimport { CarLicencePlateType, CarsType, CarType } from '../world/types/car';\nimport {\n  DEFAULT_BATCH_SIZE,\n  DEFAULT_GENERATION_LIFETIME,\n  DEFAULT_GENERATION_SIZE,\n  DEFAULT_LONG_LIVING_CHAMPIONS_PERCENTAGE,\n  DEFAULT_MUTATION_PROBABILITY,\n  DEFAULT_PERFORMANCE_BOOST,\n  SECOND,\n} from './EvolutionBoardParams';\nimport { carLossToFitness, GENOME_LENGTH } from '../../libs/carGenetic';\nimport {\n  generateWorldVersion,\n  generationToCars,\n  loadGenerationFromStorage,\n  removeGenerationFromStorage,\n  saveGenerationToStorage\n} from './utils/evolution';\nimport { \n  deleteSearchParam,\n  getBooleanSearchParam,\n  getFloatSearchParam,\n  getIntSearchParam,\n  setSearchParam,\n} from '../../utils/url';\nimport EvolutionAnalytics from './EvolutionAnalytics';\nimport { loggerBuilder } from '../../utils/logger';\nimport ParkingAutomatic from '../world/parkings/ParkingAutomatic';\nimport World from '../world/World';\nimport { BAD_SIMULATION_BATCH_INDEX_CHECK, BAD_SIMULATION_MIN_LOSS_INCREASE_PERCENTAGE, BAD_SIMULATION_RETRIES_ENABLED, BAD_SIMULATION_RETRIES_NUM, FITNESS_ALPHA } from './constants/evolution';\nimport EvolutionCheckpointSaver, { EvolutionCheckpoint } from './EvolutionCheckpointSaver';\nimport { ARTICLE_LINK } from '../../constants/links';\nimport { DynamicCarsPosition } from '../world/constants/cars';\nimport { DYNAMIC_CARS_POSITION_FRONT } from '../world/constants/cars';\n\nconst GENERATION_SIZE_URL_PARAM = 'generation';\nconst GROUP_SIZE_URL_PARAM = 'group';\nconst GENERATION_LIFETIME_URL_PARAM = 'lifetime';\nconst MUTATION_PROBABILITY_URL_PARAM = 'mutation';\nconst LONG_LIVING_CHAMPIONS_URL_PARAM = 'champions';\nconst PERFORMANCE_BOOST_URL_PARAM = 'boost';\n\n//  Genome array, concatenated to a string (i.e. '1010011')\ntype GenomeKey = string;\n\ntype GenomeLossType = Record<GenomeKey, number | null>;\n\nfunction EvolutionTabEvolution() {\n  const {enqueue} = useSnackbar();\n\n  const [performanceBoost, setPerformanceBoost] = useState<boolean>(\n    getBooleanSearchParam(PERFORMANCE_BOOST_URL_PARAM, DEFAULT_PERFORMANCE_BOOST)\n  );\n\n  const [worldIndex, setWorldIndex] = useState<number>(0);\n\n  const [generationSize, setGenerationSize] = useState<number>(\n    getIntSearchParam(GENERATION_SIZE_URL_PARAM, DEFAULT_GENERATION_SIZE)\n  );\n  const [restoredFromGenerationIndex, setRestoredFromGenerationIndex] = useState<number | null>(null);\n  const [generationIndex, setGenerationIndex] = useState<number | null>(null);\n  const [generation, setGeneration] = useState<Generation>([]);\n  const [generationLifetime, setGenerationLifetime] = useState<number>(\n    getIntSearchParam(GENERATION_LIFETIME_URL_PARAM, DEFAULT_GENERATION_LIFETIME)\n  );\n\n  const [cars, setCars] = useState<CarsType>({});\n  const [carsBatch, setCarsBatch] = useState<CarType[]>([]);\n  const [carsBatchSize, setCarsBatchSize] = useState<number>(\n    getIntSearchParam(GROUP_SIZE_URL_PARAM, DEFAULT_BATCH_SIZE)\n  );\n  const [carsBatchIndex, setCarsBatchIndex] = useState<number | null>(null);\n  const carsRef = useRef<CarsType>({});\n\n  const [bestGenome, setBestGenome] = useState<Genome | null>(null);\n  const [minLoss, setMinLoss] = useState<number | null>(null);\n  const [bestCarLicencePlate, setBestCarLicencePlate] = useState<CarLicencePlateType | null>(null);\n  const [secondBestGenome, setSecondBestGenome] = useState<Genome | null>(null);\n  const [secondMinLoss, setSecondMinLoss] = useState<number | null>(null);\n  const [secondBestCarLicencePlate, setSecondBestCarLicencePlate] = useState<CarLicencePlateType | null>(null);\n\n  const [dynamicCarsPosition] = useState<DynamicCarsPosition>(DYNAMIC_CARS_POSITION_FRONT);\n\n  const batchTimer = useRef<NodeJS.Timeout | null>(null);\n\n  const carsLossRef = useRef<CarsLossType[]>([{}]);\n  const [carsLoss, setCarsLoss] = useState<CarsLossType[]>([{}]);\n  const [lossHistory, setLossHistory] = useState<number[]>([]);\n  const [avgLossHistory, setAvgLossHistory] = useState<number[]>([]);\n  const genomeLossRef = useRef<GenomeLossType[]>([{}]);\n\n  const [mutationProbability, setMutationProbability] = useState<Probability>(\n    getFloatSearchParam(MUTATION_PROBABILITY_URL_PARAM, DEFAULT_MUTATION_PROBABILITY)\n  );\n  const [longLivingChampionsPercentage, setLongLivingChampionsPercentage] = useState<Percentage>(\n    getIntSearchParam(LONG_LIVING_CHAMPIONS_URL_PARAM, DEFAULT_LONG_LIVING_CHAMPIONS_PERCENTAGE)\n  );\n\n  const [badSimulationRetriesNum, setBadSimulationRetriesNum] = useState<number>(BAD_SIMULATION_RETRIES_NUM);\n\n  const logger = loggerBuilder({ context: 'EvolutionTab' });\n  const carsBatchesTotal: number = Math.ceil(Object.keys(cars).length / carsBatchSize);\n  const carsInProgress: CarsInProgressType = carsBatch.reduce((cars: CarsInProgressType, car: CarType) => {\n    cars[car.licencePlate] = true;\n    return cars;\n  }, {});\n  const batchVersion = generateWorldVersion(generationIndex, carsBatchIndex);\n  const generationLifetimeMs = generationLifetime * SECOND;\n\n  const onCommonStateReset = () => {\n    setGeneration([]);\n    setCarsBatch([]);\n    setCars({});\n    setCarsLoss([{}]);\n    carsRef.current = {};\n    carsLossRef.current = [{}];\n    genomeLossRef.current = [{}];\n    setLossHistory([]);\n    setAvgLossHistory([]);\n    setBestGenome(null);\n    setMinLoss(null);\n    setBestCarLicencePlate(null);\n    setSecondBestGenome(null);\n    setSecondMinLoss(null);\n    setSecondBestCarLicencePlate(null);\n  };\n\n  const onEvolutionRestart = () => {\n    cancelBatchTimer();\n    onCommonStateReset();\n    setWorldIndex(worldIndex + 1);\n    setGenerationIndex(0);\n    setCarsBatchIndex(null);\n  };\n\n  const onCarLossUpdate = (licensePlate: CarLicencePlateType, loss: number) => {\n    if (generationIndex === null) {\n      return;\n    }\n\n    // Save the car loss to the \"LicencePlate → Loss\" map.\n    if (!carsLossRef.current[generationIndex]) {\n      carsLossRef.current[generationIndex] = {};\n    }\n    carsLossRef.current[generationIndex][licensePlate] = loss;\n\n    // Save the car loss to the \"GenomeKey → Loss\" map.\n    if (!genomeLossRef.current[generationIndex]) {\n      genomeLossRef.current[generationIndex] = {};\n    }\n    if (carsRef.current[licensePlate]) {\n      const carGenomeIndex = carsRef.current[licensePlate].genomeIndex;\n      const carGenome: Genome = generation[carGenomeIndex];\n      const carGenomeKey: GenomeKey = carGenome.join('');\n      genomeLossRef.current[generationIndex][carGenomeKey] = loss;\n    }\n  };\n\n  const onGenerationSizeChange = (size: number) => {\n    setGenerationSize(size);\n    setSearchParam(GENERATION_SIZE_URL_PARAM, `${size}`);\n    onEvolutionRestart();\n  };\n\n  const onSetDefaultFilterValues = () => {\n    deleteSearchParam(GENERATION_SIZE_URL_PARAM);\n    deleteSearchParam(GROUP_SIZE_URL_PARAM);\n    deleteSearchParam(GENERATION_LIFETIME_URL_PARAM);\n    deleteSearchParam(MUTATION_PROBABILITY_URL_PARAM);\n    deleteSearchParam(LONG_LIVING_CHAMPIONS_URL_PARAM);\n    deleteSearchParam(PERFORMANCE_BOOST_URL_PARAM);\n\n    setGenerationSize(DEFAULT_GENERATION_SIZE);\n    setCarsBatchSize(DEFAULT_BATCH_SIZE);\n    setGenerationLifetime(DEFAULT_GENERATION_LIFETIME);\n    setMutationProbability(DEFAULT_MUTATION_PROBABILITY);\n    setLongLivingChampionsPercentage(DEFAULT_LONG_LIVING_CHAMPIONS_PERCENTAGE);\n    setPerformanceBoost(DEFAULT_PERFORMANCE_BOOST);\n  };\n\n  const onReset = () => {\n    removeGenerationFromStorage();\n    onSetDefaultFilterValues();\n    onEvolutionRestart();\n    enqueue({\n      message: 'Evolution setup and training progress have been reset',\n      startEnhancer: ({size}) => <Check size={size} />,\n    }, DURATION.medium);\n  };\n\n  const onMutationProbabilityChange = (probability: Probability) => {\n    setMutationProbability(probability);\n    setSearchParam(MUTATION_PROBABILITY_URL_PARAM, `${probability}`);\n  };\n\n  const onLongLivingChampionsPercentageChange = (percentage: Percentage) => {\n    setLongLivingChampionsPercentage(percentage);\n    setSearchParam(LONG_LIVING_CHAMPIONS_URL_PARAM, `${percentage}`);\n  };\n\n  const onPerformanceBoost = (state: boolean) => {\n    setPerformanceBoost(state);\n    setSearchParam(PERFORMANCE_BOOST_URL_PARAM, `${state ? 'true' : 'false'}`);\n  };\n\n  const onBatchSizeChange = (size: number) => {\n    setCarsBatchSize(size);\n    setSearchParam(GROUP_SIZE_URL_PARAM, `${size}`);\n    onEvolutionRestart();\n  };\n\n  const onGenerationLifetimeChange = (time: number) => {\n    setGenerationLifetime(time);\n    setSearchParam(GENERATION_LIFETIME_URL_PARAM, `${time}`);\n  };\n\n  const onRestoreFromCheckpoint = (checkpoint: EvolutionCheckpoint) => {\n    cancelBatchTimer();\n    \n    setSearchParam(MUTATION_PROBABILITY_URL_PARAM, `${checkpoint.mutationProbability}`);\n    setSearchParam(LONG_LIVING_CHAMPIONS_URL_PARAM, `${checkpoint.longLivingChampionsPercentage}`);\n    setSearchParam(GENERATION_LIFETIME_URL_PARAM, `${checkpoint.generationLifetime}`);\n    setSearchParam(PERFORMANCE_BOOST_URL_PARAM, `${checkpoint.performanceBoost ? 'true' : 'false'}`);\n    setSearchParam(GENERATION_SIZE_URL_PARAM, `${checkpoint.generationSize}`);\n    setSearchParam(GROUP_SIZE_URL_PARAM, `${checkpoint.carsBatchSize}`);\n\n    saveGenerationToStorage({\n      generation: checkpoint.generation,\n      generationIndex: checkpoint.generationIndex,\n      lossHistory: checkpoint.lossHistory,\n      avgLossHistory: checkpoint.avgLossHistory,\n    });\n\n    document.location.reload();\n  };\n\n  const onCheckpointToFile = (): EvolutionCheckpoint => {\n    const checkpoint: EvolutionCheckpoint = {\n      dateTime: (new Date()).toISOString(),\n      generationIndex: generationIndex || 0,\n      performanceBoost,\n      generationSize,\n      generationLifetime,\n      carsBatchSize,\n      mutationProbability,\n      longLivingChampionsPercentage,\n      lossHistory,\n      avgLossHistory,\n      generation,\n    };\n    return checkpoint;\n  };\n\n  const cancelBatchTimer = () => {\n    logger.info('Trying to cancel batch timer');\n    if (batchTimer.current === null) {\n      return;\n    }\n    clearTimeout(batchTimer.current);\n    batchTimer.current = null;\n  };\n\n  const syncBestGenome = (): string | null | undefined => {\n    if (generationIndex === null) {\n      return;\n    }\n\n    const generationLoss: CarsLossType = carsLossRef.current[generationIndex];\n    if (!generationLoss) {\n      return;\n    }\n\n    let bestCarLicensePlate: CarLicencePlateType | null = null;\n    let minLoss: number = Infinity;\n    let bestGenomeIndex: number = -1;\n\n    Object.keys(generationLoss).forEach((licencePlate: CarLicencePlateType) => {\n      const carLoss: number | null = generationLoss[licencePlate];\n      if (carLoss === null) {\n        return;\n      }\n      if (carLoss < minLoss) {\n        minLoss = carLoss;\n        bestCarLicensePlate = licencePlate;\n        bestGenomeIndex = cars[licencePlate].genomeIndex;\n      }\n    });\n\n    if (bestGenomeIndex === -1) {\n      return;\n    }\n\n    setMinLoss(minLoss);\n    setBestGenome(generation[bestGenomeIndex]);\n    setBestCarLicencePlate(bestCarLicensePlate);\n\n    return bestCarLicensePlate;\n  };\n\n  const syncSecondBestGenome = (\n    bestLicensePlateSoFar: string | null | undefined\n  ): string | null | undefined => {\n    if (generationIndex === null || !bestLicensePlateSoFar) {\n      return;\n    }\n\n    const generationLoss: CarsLossType = carsLossRef.current[generationIndex];\n    if (!generationLoss) {\n      return;\n    }\n\n    let secondBestCarLicensePlate: CarLicencePlateType | null = null;\n    let secondMinLoss: number = Infinity;\n    let secondBestGenomeIndex: number = -1;\n\n    Object.keys(generationLoss).forEach((licencePlate: CarLicencePlateType) => {\n      // Skipping the best car genome.\n      if (licencePlate === bestLicensePlateSoFar) {\n        return;\n      }\n      const carLoss: number | null = generationLoss[licencePlate];\n      if (carLoss === null) {\n        return;\n      }\n      if (carLoss < secondMinLoss) {\n        secondMinLoss = carLoss;\n        secondBestCarLicensePlate = licencePlate;\n        secondBestGenomeIndex = cars[licencePlate].genomeIndex;\n      }\n    });\n\n    if (secondBestGenomeIndex === -1) {\n      return;\n    }\n\n    setSecondMinLoss(secondMinLoss);\n    setSecondBestGenome(generation[secondBestGenomeIndex]);\n    setSecondBestCarLicencePlate(secondBestCarLicensePlate);\n\n    return secondBestCarLicensePlate;\n  };\n\n  const syncLossHistory = () => {\n    if (generationIndex === null) {\n      return;\n    }\n    const generationLoss: CarsLossType = carsLossRef.current[generationIndex];\n\n    // Sync min loss history.\n    const newLossHistory = [...lossHistory];\n    if (generationLoss) {\n      newLossHistory[generationIndex] = Object.values(generationLoss).reduce(\n        (minVal: number, currVal: number | null) => {\n          if (currVal === null) {\n            return minVal;\n          }\n          return Math.min(minVal, currVal);\n        },\n        Infinity\n      );\n    } else {\n      newLossHistory[generationIndex] = Infinity;\n    }\n    setLossHistory(newLossHistory);\n\n    // Sync avg loss history.\n    const newAvgLossHistory = [...avgLossHistory];\n    if (generationLoss) {\n      let nonNullLosses = 0;\n\n      const ascSortedGenerationLoss = Object.values<number | null>(generationLoss)\n        .sort((a: number | null, b: number | null): number => {\n          const aTuned: number = a === null ? Infinity : a;\n          const bTuned: number = b === null ? Infinity : b;\n          if (aTuned < bTuned) {\n            return -1;\n          }\n          if (aTuned > bTuned) {\n            return 1;\n          }\n          return 0;\n        }\n      );\n\n      const P50GenerationLoss = ascSortedGenerationLoss.slice(\n        0,\n        Math.ceil(ascSortedGenerationLoss.length * 0.5),\n      );\n\n      const lossSum = P50GenerationLoss.reduce(\n        (sum: number, currVal: number | null) => {\n          if (currVal === null) {\n            return sum;\n          }\n          nonNullLosses += 1;\n          return sum + currVal;\n        },\n        0\n      );\n      newAvgLossHistory[generationIndex] = nonNullLosses ? lossSum / nonNullLosses : 0;\n    } else {\n      newAvgLossHistory[generationIndex] = Infinity;\n    }\n    setAvgLossHistory(newAvgLossHistory);\n  };\n\n  const carFitnessFunction = (generationIndex: number) => (genome: Genome): number => {\n    const genomeKey = genome.join('');\n    if (\n      generationIndex === null ||\n      !genomeLossRef.current[generationIndex] ||\n      typeof genomeLossRef.current[generationIndex][genomeKey] !== 'number'\n    ) {\n      throw new Error('Fitness value for specified genome is undefined');\n    }\n    const loss = genomeLossRef.current[generationIndex][genomeKey];\n    if (typeof loss !== 'number') {\n      throw new Error('Loss value is not a number');\n    }\n    return carLossToFitness(loss, FITNESS_ALPHA);\n  };\n\n  const isValidGenerationFromStorage = (generation: Generation | null): boolean => {\n    return !!(\n      generation &&\n      generation.length === generationSize &&\n      generation[0].length === GENOME_LENGTH\n    );\n  };\n\n  const getGenerationIndexFromStorage = (): number | null => {\n    const {\n      generation: generationFromStorage,\n      generationIndex: generationIndexFromStorage,\n    } = loadGenerationFromStorage();\n    if (\n      isValidGenerationFromStorage(generationFromStorage) &&\n      generationIndexFromStorage\n    ) {\n      return generationIndexFromStorage;\n    }\n    return null;\n  };\n\n  const getLossHistoryFromStorage = (): number[] | null => {\n    const {\n      lossHistory: lossHistoryFromStorage,\n      generation: generationFromStorage,\n    } = loadGenerationFromStorage();\n    if (\n      isValidGenerationFromStorage(generationFromStorage) &&\n      lossHistoryFromStorage\n    ) {\n      return lossHistoryFromStorage;\n    }\n    return null;\n  };\n\n  const getAvgLossHistoryFromStorage = (): number[] | null => {\n    const {\n      avgLossHistory: avgLossHistoryFromStorage,\n      generation: generationFromStorage,\n    } = loadGenerationFromStorage();\n    if (\n      isValidGenerationFromStorage(generationFromStorage) &&\n      avgLossHistoryFromStorage\n    ) {\n      return avgLossHistoryFromStorage;\n    }\n    return null;\n  };\n\n  const getGenerationFromStorage = (): Generation | null => {\n    const {\n      generation: generationFromStorage,\n    } = loadGenerationFromStorage();\n    if (isValidGenerationFromStorage(generationFromStorage)) {\n      return generationFromStorage;\n    }\n    if (generationFromStorage) {\n      try {\n        const debugGenerationSize = generationFromStorage.length;\n        const debugGenomeLength = generationFromStorage[0].length;\n        logger.warn(`Generation from storage is invalid: generation size ${debugGenerationSize}, genome length ${debugGenomeLength}`);\n      } catch (err) {\n        logger.warn('Generation from storage is invalid');\n      }\n    }\n    return null;\n  };\n\n  const startEvolution = () => {\n    logger.info('Start evolution');\n    let generationStartIndex = 0;\n\n    const generationIndexFromStorage = getGenerationIndexFromStorage();\n    const lossHistoryFromStorage = getLossHistoryFromStorage();\n    const avgLossHistoryFromStorage = getAvgLossHistoryFromStorage();\n\n    if (generationIndexFromStorage && lossHistoryFromStorage && avgLossHistoryFromStorage) {\n      generationStartIndex = generationIndexFromStorage;\n      setRestoredFromGenerationIndex(generationIndexFromStorage);\n      setLossHistory(lossHistoryFromStorage);\n      setAvgLossHistory(avgLossHistoryFromStorage);\n    }\n\n    setGenerationIndex(generationStartIndex);\n  };\n\n  const createFirstGeneration = () => {\n    if (generationIndex === null) {\n      return;\n    }\n    logger.info('Create first generation');\n    let firstGeneration: Generation = createGeneration({\n      generationSize,\n      genomeLength: GENOME_LENGTH,\n    });\n\n    const generationFromStorage: Generation | null = getGenerationFromStorage();\n    const generationIndexFromStorage: number | null = getGenerationIndexFromStorage();\n    if (generationFromStorage && generationIndexFromStorage) {\n      firstGeneration = generationFromStorage;\n      enqueue({\n        message:\n          `Generation #${generationIndexFromStorage} has been restored from the saved checkpoint. To start from scratch, press the Reset button.`,\n        startEnhancer: ({size}) => <BiUpload size={size} />,\n      }, DURATION.medium);\n    }\n\n    setGeneration(firstGeneration);\n    setBestGenome(firstGeneration[0]);\n    setSecondBestGenome(firstGeneration[1]);\n  };\n\n  const mateExistingGeneration = () => {\n    if (generationIndex === null) {\n      return;\n    }\n    logger.info(`Mate generation #${generationIndex}`);\n    try {\n      const newGeneration = select(\n        generation,\n        carFitnessFunction(generationIndex - 1),\n        {\n          mutationProbability,\n          longLivingChampionsPercentage: longLivingChampionsPercentage,\n        },\n      );\n      setGeneration(newGeneration);\n      saveGenerationToStorage({\n        generation: newGeneration,\n        generationIndex,\n        lossHistory,\n        avgLossHistory,\n      });\n    } catch (e: any) {\n      // If selection failed for some reason, clone the existing generation and try again.\n      setGeneration([...generation]);\n      const errorMessage = 'The selection for the new generation has failed. Cloning the existing generation to try it next time.';\n      const exceptionMessage = e && e.message ? e.message : '';\n      logger.warn(errorMessage, exceptionMessage);\n    }\n  };\n\n  const createCarsFromGeneration = () => {\n    if (!generation || !generation.length) {\n      return;\n    }\n    logger.info(`Create cars from generation #${generationIndex}`);\n    const cars = generationToCars({\n      generation,\n      generationIndex,\n      onLossUpdate: onCarLossUpdate,\n    });\n    setCars(cars);\n    setCarsBatchIndex(0);\n    carsRef.current = _.cloneDeep(cars);\n  };\n\n  const generateNextCarsBatch = () => {\n    if (carsBatchIndex === null || generationIndex === null) {\n      return;\n    }\n    if (!cars || !Object.keys(cars).length) {\n      return;\n    }\n    if (carsBatchIndex >= carsBatchesTotal) {\n      return;\n    }\n    logger.info(`Generate cars batch #${carsBatchIndex}`);\n    const batchStart = carsBatchSize * carsBatchIndex;\n    const batchEnd = batchStart + carsBatchSize;\n    const carsBatch: CarType[] = Object.values(cars).slice(batchStart, batchEnd);\n    setCarsBatch(carsBatch);\n  };\n\n  const needToRetry = \n    BAD_SIMULATION_RETRIES_ENABLED &&\n    carsBatchIndex === BAD_SIMULATION_BATCH_INDEX_CHECK &&\n    badSimulationRetriesNum > 0 &&\n    lossHistory.length > 1 &&\n    lossHistory[lossHistory.length - 1] > (lossHistory[lossHistory.length - 2] * BAD_SIMULATION_MIN_LOSS_INCREASE_PERCENTAGE / 100);\n\n  const onBatchLifetimeEnd = () => {\n    if (carsBatchIndex === null) {\n      return;\n    }\n    logger.info(`Batch #${carsBatchIndex} lifetime ended`);\n    setCarsLoss(_.cloneDeep<CarsLossType[]>(carsLossRef.current));\n    syncLossHistory();\n    const bestLicensePlate = syncBestGenome();\n    syncSecondBestGenome(bestLicensePlate);\n    let nextBatchIndex = carsBatchIndex + 1;\n\n    // Retrying logic\n    if (BAD_SIMULATION_RETRIES_ENABLED && carsBatchIndex) {\n      if (badSimulationRetriesNum === 0) {\n        if (carsBatchIndex > BAD_SIMULATION_BATCH_INDEX_CHECK) {\n          logger.info(`Resetting the simulation retries counter back to #${BAD_SIMULATION_RETRIES_NUM}`);\n          setBadSimulationRetriesNum(BAD_SIMULATION_RETRIES_NUM);\n        }\n      } else if (needToRetry) {\n        logger.info(`Retry needed. Number of retries left: ${badSimulationRetriesNum - 1}`);\n        setBadSimulationRetriesNum(badSimulationRetriesNum - 1);\n        nextBatchIndex = 0;\n      }\n    }\n\n    if (nextBatchIndex >= carsBatchesTotal) {\n      setCarsBatch([]);\n      if (generationIndex !== null) {\n        setCarsBatchIndex(null);\n        setGenerationIndex(generationIndex + 1);\n      }\n      return;\n    }\n    setCarsBatchIndex(nextBatchIndex);\n  };\n\n  const countDownBatchLifetime = (onLifetimeEnd: () => void) => {\n    if (carsBatchIndex === null) {\n      return;\n    }\n    if (!carsBatch || !carsBatch.length) {\n      return;\n    }\n    logger.info(`Batch #${carsBatchIndex} lifetime started`);\n    cancelBatchTimer();\n    batchTimer.current = setTimeout(onLifetimeEnd, generationLifetimeMs);\n  };\n\n  // Start the evolution.\n  useEffect(() => {\n    startEvolution();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Once generation index is changed we need to create (or mate) a new generation.\n  useEffect(() => {\n    if (generationIndex === 0 || generationIndex === restoredFromGenerationIndex) {\n      createFirstGeneration();\n    } else {\n      mateExistingGeneration();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [generationIndex, worldIndex]);\n\n  // Once generation is changed we need to create cars.\n  useEffect(() => {\n    createCarsFromGeneration();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [generation]);\n\n  // Once the cars batch index is updated we need to generate a cars batch.\n  useEffect(() => {\n    generateNextCarsBatch();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [carsBatchIndex]);\n\n  // Once the new cars batch is created we need to start generation timer.\n  useEffect(() => {\n    countDownBatchLifetime(onBatchLifetimeEnd);\n    return () => {\n      cancelBatchTimer();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [carsBatch]);\n\n  return (\n    <Block>\n      <World\n        version={batchVersion}\n        performanceBoost={performanceBoost}\n      >\n        <ParkingAutomatic\n          performanceBoost={performanceBoost}\n          cars={carsBatch}\n          withVisibleSensors\n          withLabels\n          carsPosition={dynamicCarsPosition}\n        />\n      </World>\n      <Block marginTop=\"20px\">\n        <Notification overrides={{Body: {style: {width: 'auto'}}}}>\n          Train the car to do self-parking using genetic algorithm<br/><br/>\n          <small>For better results, increase the population size to 500-1000 and wait for 50-100 generations. <a style={{color: 'rgb(30, 84, 183)'}} href={ARTICLE_LINK}>More about params setup</a></small>\n        </Notification>\n      </Block>\n      <EvolutionAnalytics\n        mutationProbability={mutationProbability}\n        onMutationProbabilityChange={onMutationProbabilityChange}\n        longLivingChampionsPercentage={longLivingChampionsPercentage}\n        generationIndex={generationIndex}\n        carsBatchIndex={carsBatchIndex}\n        totalBatches={carsBatchesTotal}\n        worldIndex={worldIndex}\n        needToRetry={needToRetry}\n        generationLifetimeMs={generationLifetimeMs}\n        generationSize={generationSize}\n        performanceBoost={performanceBoost}\n        carsBatchSize={carsBatchSize}\n        generationLifetime={generationLifetime}\n        batchVersion={batchVersion}\n        onGenerationSizeChange={onGenerationSizeChange}\n        onBatchSizeChange={onBatchSizeChange}\n        onGenerationLifetimeChange={onGenerationLifetimeChange}\n        onLongLivingChampionsPercentageChange={onLongLivingChampionsPercentageChange}\n        onPerformanceBoost={onPerformanceBoost}\n        onReset={onReset}\n        lossHistory={lossHistory}\n        avgLossHistory={avgLossHistory}\n        cars={cars}\n        carsInProgress={carsInProgress}\n        carsLoss={carsLoss}\n        bestGenome={bestGenome}\n        bestCarLicencePlate={bestCarLicencePlate}\n        minLoss={minLoss}\n        secondBestGenome={secondBestGenome}\n        secondBestCarLicencePlate={secondBestCarLicencePlate}\n        secondMinLoss={secondMinLoss}\n      />\n\n      <Block marginTop=\"30px\">\n        <EvolutionCheckpointSaver\n          onRestoreFromCheckpoint={onRestoreFromCheckpoint}\n          onCheckpointToFile={onCheckpointToFile}\n        />\n      </Block>\n    </Block>\n  );\n}\n\nexport default EvolutionTabEvolution;\n","import { Genome } from '../../../libs/genetic';\nimport { DynamicCarsPosition } from '../../world/constants/cars';\nimport { genomeStringToGenome } from '../utils/evolution';\n\nexport const BEST_GENOMES: Record<DynamicCarsPosition, Genome[]> = {\n  'rear': [].map<Genome>((genomeString: string) => genomeStringToGenome(genomeString)),\n  'middle': [\n    '0 1 0 1 1 1 0 1 1 0 1 1 0 1 0 0 0 1 1 1 1 1 0 1 0 1 1 0 0 0 1 1 0 1 0 0 1 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 1 0 0 1 0 0 0 1 0 0 1 1 1 1 0 1 1 1 0 1 0 0 1 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 1 0 1 0 1 1 0 0 1 0 0 0 1 1 1 0 0 1 0 0 0 1 1 1 1 1 0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 1 0 0 1',\n    '0 0 1 0 1 0 1 1 0 0 1 1 1 1 0 1 1 1 0 0 1 1 0 1 0 0 0 1 1 0 0 1 0 1 1 1 0 1 1 0 1 0 1 0 0 0 0 1 1 0 1 0 0 0 1 1 1 0 0 0 0 1 1 0 0 1 0 0 1 1 1 0 0 1 0 0 0 1 1 1 0 0 1 0 0 1 1 1 0 1 0 1 1 0 1 0 0 1 1 0 1 1 0 0 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 0 1 1 0 1 0 0 0 0 0 1 1 0 1 1 0 0 1 0 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 1',\n  ].map<Genome>((genomeString: string) => genomeStringToGenome(genomeString)),\n  'front': [\n    '0 1 0 1 1 0 0 0 1 1 0 0 0 1 0 1 1 1 0 0 1 1 1 0 0 0 1 1 1 0 0 1 0 1 1 1 0 0 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 0 1 1 0 0 1 0 1 0 0 1 0 1 0 1 1 0 1 1 0 0 0 0 1 1 0 0 0 1 1 0 0 1 0 0 1 1 1 0 0 1 1 0 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 1 1 1 1 0 0 0 1 1 1 1 1 1 0 1 1 0 1 0 0 1 0 0 0 1 0 0 0',\n    '0 0 0 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 0 0 1 0 0 0 1 1 1 1 0 1 0 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 0 0 1 0 1 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 1 0 1 1 0 0 0 1 0 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 0 0 1 1 1 0 1 1 0 0 1 0 1 0 1 1 0 1 1 1 0 1 1 0 1 0 1 1 1 0 1 0 0 1 1 0 1',\n    '0 1 0 1 1 1 1 1 0 1 1 0 0 1 0 1 0 0 0 1 1 0 1 0 1 1 0 1 0 0 1 1 0 1 0 0 0 1 0 1 0 0 0 1 1 1 0 0 0 0 1 0 0 1 0 1 0 0 1 0 1 0 1 1 0 1 1 1 0 1 1 0 0 0 1 1 1 1 0 1 0 0 1 0 0 0 0 0 1 0 0 1 0 1 0 1 0 0 1 1 1 0 1 0 0 1 1 1 0 0 1 0 1 1 1 1 0 0 0 0 0 1 1 0 0 1 0 1 1 1 1 1 0 0 1 0 0 0 1 1 0 0 1 1 0 1 1 0 1 1 0 0 0 0 0 1 1 1 1 0 1 0 1 1 1 1 0 1 1 0 1 0 1 0 0 0 1 0 1 0',\n    '1 1 0 0 1 1 0 1 1 1 0 0 0 1 0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 1 1 1 1 0 0 1 0 1 1 0 1 1 1 1 0 0 1 0 0 1 1 1 0 1 0 0 1 1 0 0 0 1 1 0 0 0 0 1 0 1 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 1 0 1 1 0 1 0 0 1 0 1 1 1 0 0 0 1 0 1 0 1 0 0 1 0 0 0 0 1 1 1 1 0 0 1 1 1 0 1 1 0 1 1 0 1 1 0 0 0 0 1 1 0 0 1 0 0 0 1 0 0 1 1 1 0 0 1 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 0 0 0 1 1 0 0 1 0',\n    // '0 1 1 1 0 1 0 1 1 1 1 0 0 0 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 1 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 1 1 0 0 0 1 1 1 0 1 0 1 0 1 0 1 0 0 1 0 1 1 1 0 0 0 0 1 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 1 0 0 1 0 0 0 1 0 0 1 1 0 1 0 0 1 1 0 1 1 1 0 0 1 0 1 1 0 0 0 0 0 1 1 0 0 0 0 1 0 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 0 0 1 0 0 1 1 1 1 0',\n    // '1 0 0 0 1 0 1 1 1 1 0 0 1 1 1 0 1 1 0 0 1 0 0 0 0 1 1 1 0 0 0 1 0 1 0 0 1 0 0 1 0 1 0 0 1 1 1 1 0 0 1 1 1 0 1 1 0 0 0 1 0 0 0 0 0 1 1 0 0 1 1 1 1 1 1 0 1 0 1 1 0 0 0 0 1 1 1 1 1 1 0 1 1 0 0 1 0 1 1 1 0 0 1 0 0 0 1 1 1 0 1 0 1 1 1 0 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 1 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 0 1 0 1 1 0 1 0 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0',\n    // '1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 1 1 0 1 1 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 1 1 0 0 1 1 0 0 0 0 0 1 1 1 0 0 0 1 1 1 1 1 1 0 0 0 1 0 0 1 0 0 0 0 1 1 1 0 1 1 0 1 1 1 0 1 1 1 0 0 1 1 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 1 0 1 1 1 1 0 1 1 1 0 1 0 0 1 0 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 0 0 1 0 1 0 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 1 0 1',\n  ].map<Genome>((genomeString: string) => genomeStringToGenome(genomeString)),\n};\n","import React from 'react';\nimport { Block } from 'baseui/block';\nimport { Button, SIZE as BUTTON_SIZE, KIND as BUTTON_KIND, SHAPE as BUTTON_SHAPE } from 'baseui/button';\nimport { Checkbox, LABEL_PLACEMENT } from 'baseui/checkbox';\nimport { ButtonGroup, MODE as BUTTON_GROUP_MODE, SIZE as BUTTON_GROUP_SIZE } from 'baseui/button-group';\n\nimport EvolutionTiming from './EvolutionTiming';\nimport BestGenomes from './BestGenomes';\nimport { Genome } from '../../libs/genetic';\nimport { FormControl } from 'baseui/form-control';\nimport Row from '../shared/Row';\nimport Hint from '../shared/Hint';\nimport { DynamicCarsPosition } from '../world/constants/cars';\n\ntype AutomaticParkingAnalyticsProps = {\n  genomes: Genome[],\n  generationLifetimeMs: number,\n  batchVersion: string,\n  bestGenome: Genome | null,\n  minLoss: number | null,\n  carsBatchIndex: number | null,\n  performanceBoost: boolean,\n  selectedGenomeIndex: number,\n  carsPosition: DynamicCarsPosition,\n  onCarsPositionChange: (carsPosition: DynamicCarsPosition) => void,\n  onChangeGenomeIndex: (index: number) => void,\n  onBestGenomeEdit?: (genome: Genome) => void,\n  onPerformanceBoost: (state: boolean) => void,\n};\n\nfunction AutomaticParkingAnalytics(props: AutomaticParkingAnalyticsProps) {\n  const {\n    genomes,\n    bestGenome,\n    generationLifetimeMs,\n    batchVersion,\n    minLoss,\n    carsBatchIndex,\n    selectedGenomeIndex,\n    performanceBoost,\n    carsPosition,\n    onCarsPositionChange,\n    onChangeGenomeIndex,\n    onPerformanceBoost,\n    onBestGenomeEdit = (genome: Genome) => {},\n  } = props;\n\n  const timingDetails = (\n    <Block marginBottom=\"20px\" marginTop=\"20px\">\n      <EvolutionTiming\n        batchIndex={carsBatchIndex}\n        batchVersion={batchVersion}\n        generationLifetimeMs={generationLifetimeMs}\n        groupLabel=\"Parking attempt\"\n        batchLifetimeLabel=\"Lifetime\"\n      />\n    </Block>\n  );\n\n  const carLicencePlates = genomes.map((genome: Genome, genomeIndex: number) => (\n    <Block\n      key={genomeIndex}\n      display=\"inline-block\"\n      marginRight=\"4px\"\n      marginBottom=\"4px\"\n    >\n      <Button \n        size={BUTTON_SIZE.compact}\n        shape={BUTTON_SHAPE.pill}\n        kind={genomeIndex === selectedGenomeIndex ? BUTTON_KIND.primary : BUTTON_KIND.secondary}\n        onClick={() => {\n          onChangeGenomeIndex(genomeIndex);\n        }}\n      >\n        CAR-{genomeIndex}\n      </Button>\n    </Block>\n  ));\n\n  const carsSwitcher = (\n    <Block marginTop=\"20px\" marginBottom=\"20px\">\n      <FormControl\n        label={() => 'Select the pre-trained car genome'}\n      >\n        <Block>\n          {carLicencePlates}\n        </Block>\n      </FormControl>\n    </Block>\n  );\n\n  const performanceBooster = (\n    <FormControl>\n      <Block>\n        <Checkbox\n          checked={performanceBoost}\n          // @ts-ignore\n          onChange={e => onPerformanceBoost(e.target.checked)}\n          labelPlacement={LABEL_PLACEMENT.right}\n        >\n          <Row>\n            <Block marginRight=\"5px\">\n              <small>Performance boost</small>\n            </Block>\n            <Hint\n              hint=\"Speed up the simulation by simplifying the geometry\"\n            />\n          </Row>\n        </Checkbox>\n      </Block>\n    </FormControl>\n  );\n\n  const selectedCarsPosition: Record<DynamicCarsPosition, number> = {\n    'middle': 0,\n    'front': 1,\n    'rear': 3,\n  };\n\n  const carsPositionFromIndex = (positionIndex: number): DynamicCarsPosition => {\n    // @ts-ignore\n    const positions: DynamicCarsPosition[] = Object.keys(selectedCarsPosition);\n    return positions[positionIndex];\n  };\n\n  const carsStartPositionChanger = (\n    <Block>\n      <FormControl label=\"Car start position\">\n        <ButtonGroup\n          mode={BUTTON_GROUP_MODE.radio}\n          size={BUTTON_GROUP_SIZE.compact}\n          selected={selectedCarsPosition[carsPosition]}\n          onClick={(_event, index) => {\n            onCarsPositionChange(carsPositionFromIndex(index));\n          }}\n        >\n          <Button>Center</Button>\n          <Button>Right</Button>\n      </ButtonGroup>\n      </FormControl>\n    </Block>\n  );\n\n  return (\n    <>\n      {timingDetails}\n\n      <Block\n        display=\"flex\"\n        flexDirection=\"row\"\n        alignItems=\"flex-end\"\n      >\n        <Block marginRight=\"20px\">\n          {carsStartPositionChanger}\n        </Block>\n        <Block marginBottom=\"5px\">\n          {performanceBooster}\n        </Block>\n      </Block>\n\n      {carsSwitcher}\n\n      <BestGenomes\n        bestGenomePanelTitle=\"Self-parking car genome\"\n        bestGenome={bestGenome}\n        minLoss={minLoss}\n        onBestGenomeEdit={onBestGenomeEdit}\n        editable\n      />\n    </>\n  );\n}\n\nexport default AutomaticParkingAnalytics;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Block } from 'baseui/block';\nimport { useSnackbar, DURATION } from 'baseui/snackbar';\nimport { Check } from 'baseui/icon';\nimport { Notification } from 'baseui/notification';\n\nimport { Generation, Genome } from '../../libs/genetic';\nimport { CarLicencePlateType, CarType } from '../world/types/car';\nimport {\n  SECOND,\n  TRAINED_CAR_GENERATION_LIFETIME\n} from './EvolutionBoardParams';\nimport { generationToCars } from './utils/evolution';\nimport { loggerBuilder } from '../../utils/logger';\nimport { BEST_GENOMES } from './constants/genomes';\nimport AutomaticParkingAnalytics from './AutomaticParkingAnalytics';\nimport World from '../world/World';\nimport ParkingAutomatic from '../world/parkings/ParkingAutomatic';\nimport { DynamicCarsPosition, DYNAMIC_CARS_POSITION_MIDDLE } from '../world/constants/cars';\nimport { DYNAMIC_CARS_POSITION_FRONT } from '../world/constants/cars';\nimport { getIntSearchParam, getStringSearchParam, setSearchParam } from '../../utils/url';\n\nconst defaultGenomeIndex = 0;\n\nconst GENOME_IDX_URL_PARAM = 'genome_idx';\nconst START_POSITION_URL_PARAM = 'position';\nconst DEFAULT_START_POSITION = DYNAMIC_CARS_POSITION_FRONT;\n\nfunction EvolutionTabAutomatic() {\n  const {enqueue} = useSnackbar();\n\n  const bestTrainedCarLossRef = useRef<number | null>(null);\n  const onTrainedCarLossUpdate = (licensePlate: CarLicencePlateType, loss: number) => {\n    bestTrainedCarLossRef.current = loss;\n  };\n\n  const [performanceBoost, setPerformanceBoost] = useState<boolean>(false);\n\n  const [selectedGenomeIndex, setSelectedGenomeIndex] = useState<number>(\n    getIntSearchParam(GENOME_IDX_URL_PARAM, defaultGenomeIndex)\n  );\n\n  const [dynamicCarsPosition, setDynamicCarsPosition] = useState<DynamicCarsPosition>(getCarsPositionFromURL());\n\n  const bestDefaultTrainedGeneration: Generation = [\n    BEST_GENOMES[dynamicCarsPosition][defaultGenomeIndex],\n  ];\n\n  const [bestTrainedCarLoss, setBestTrainedCarLoss] = useState<number | null>(null);\n  const [bestTrainedCarCycleIndex, setBestTrainedCarCycleIndex] = useState<number>(0);\n  const [bestTrainedGeneration, setBestTrainedGeneration] = useState<Generation>(bestDefaultTrainedGeneration);\n  const [bestTrainedCars, setBestTrainedCars] = useState<CarType[]>(\n    Object.values(\n      generationToCars({\n        generation: bestDefaultTrainedGeneration,\n        generationIndex: 0,\n        onLossUpdate: onTrainedCarLossUpdate,\n      })\n    )\n  );\n\n  const automaticParkingLifetimeTimer = useRef<NodeJS.Timeout | null>(null);\n\n  const logger = loggerBuilder({ context: 'AutomaticTab' });\n\n  const automaticParkingCycleLifetimeMs = TRAINED_CAR_GENERATION_LIFETIME * SECOND;\n  const automaticWorldVersion = `automatic-${bestTrainedCarCycleIndex}`;\n\n  const onAutomaticCycleLifetimeEnd = () => {\n    logger.info(`Automatic cycle #${bestTrainedCarCycleIndex} lifetime ended`);\n    setBestTrainedCarLoss(bestTrainedCarLossRef.current);\n    setBestTrainedCarCycleIndex(bestTrainedCarCycleIndex + 1);\n  };\n\n  const cancelAutomaticCycleTimer = () => {\n    logger.info('Trying to cancel automatic parking cycle timer');\n    if (automaticParkingLifetimeTimer.current === null) {\n      return;\n    }\n    clearTimeout(automaticParkingLifetimeTimer.current);\n    automaticParkingLifetimeTimer.current = null;\n  };\n\n  const countDownAutomaticParkingCycleLifetime = (onLifetimeEnd: () => void) => {\n    logger.info(`Automatic parking cycle started`);\n    cancelAutomaticCycleTimer();\n    automaticParkingLifetimeTimer.current = setTimeout(onLifetimeEnd, automaticParkingCycleLifetimeMs);\n  };\n\n  const onPerformanceBoost = (state: boolean) => {\n    setPerformanceBoost(state);\n  };\n\n  const onBestGenomeEdit = (editedGenome: Genome) => {\n    logger.info('Updating genome', editedGenome);\n\n    const updatedGeneration: Generation = [editedGenome];\n\n    setBestTrainedGeneration(updatedGeneration);\n\n    setBestTrainedCars(Object.values(\n      generationToCars({\n        generation: updatedGeneration,\n        generationIndex: 0,\n        onLossUpdate: onTrainedCarLossUpdate,\n      })\n    ));\n\n    bestTrainedCarLossRef.current = null;\n    setBestTrainedCarLoss(null);\n    setBestTrainedCarCycleIndex(bestTrainedCarCycleIndex + 1);\n\n    countDownAutomaticParkingCycleLifetime(onAutomaticCycleLifetimeEnd);\n\n    enqueue({\n      message: 'Genome has been updated and applied to the displayed car',\n      startEnhancer: ({size}) => <Check size={size} />,\n    }, DURATION.medium);\n  };\n\n  const onChangeGenomeIndex = (index: number) => {\n    setSelectedGenomeIndex(index);\n    onBestGenomeEdit(BEST_GENOMES[dynamicCarsPosition][index]);\n    setSearchParam(GENOME_IDX_URL_PARAM, `${index}`);\n  };\n\n  const onCarsPositionChange = (position: DynamicCarsPosition) => {\n    setDynamicCarsPosition(position);\n    setSelectedGenomeIndex(defaultGenomeIndex);\n    onBestGenomeEdit(BEST_GENOMES[position][defaultGenomeIndex]);\n    setSearchParam(START_POSITION_URL_PARAM, position);\n    setSearchParam(GENOME_IDX_URL_PARAM, `${defaultGenomeIndex}`);\n  };\n\n  // Start the automatic parking cycles.\n  useEffect(() => {\n    countDownAutomaticParkingCycleLifetime(onAutomaticCycleLifetimeEnd);\n    return () => {\n      cancelAutomaticCycleTimer();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [bestTrainedCarCycleIndex]);\n\n  return (\n    <Block>\n      <World\n        version={automaticWorldVersion}\n        performanceBoost={performanceBoost}\n      >\n        <ParkingAutomatic\n          performanceBoost={performanceBoost}\n          cars={bestTrainedCars}\n          carsPosition={dynamicCarsPosition}\n          withVisibleSensors\n          withLabels\n        />\n      </World>\n      <Block marginTop=\"20px\">\n        <Notification overrides={{Body: {style: {width: 'auto'}}}}>\n          See the trained (almost) self-parking car in action<br/><br/>\n          <small>You may also update genome values to see how it affects the car's behavior</small>\n        </Notification>\n      </Block>\n      <AutomaticParkingAnalytics\n        genomes={BEST_GENOMES[dynamicCarsPosition]}\n        bestGenome={bestTrainedGeneration[0]}\n        minLoss={bestTrainedCarLoss}\n        generationLifetimeMs={automaticParkingCycleLifetimeMs}\n        batchVersion={automaticWorldVersion}\n        carsBatchIndex={bestTrainedCarCycleIndex}\n        performanceBoost={performanceBoost}\n        selectedGenomeIndex={selectedGenomeIndex}\n        carsPosition={dynamicCarsPosition}\n        onCarsPositionChange={onCarsPositionChange}\n        onBestGenomeEdit={onBestGenomeEdit}\n        onChangeGenomeIndex={onChangeGenomeIndex}\n        onPerformanceBoost={onPerformanceBoost}\n      />\n    </Block>\n  );\n}\n\nfunction getCarsPositionFromURL(): DynamicCarsPosition {\n  // @ts-ignore\n  const carPositionFromUrl: DynamicCarsPosition = getStringSearchParam(\n    START_POSITION_URL_PARAM,\n    DEFAULT_START_POSITION\n  );\n  if ([DYNAMIC_CARS_POSITION_FRONT, DYNAMIC_CARS_POSITION_MIDDLE].includes(carPositionFromUrl)) {\n    return carPositionFromUrl;\n  }\n  return DEFAULT_START_POSITION;\n}\n\nexport default EvolutionTabAutomatic;\n","import React, { useState } from 'react';\nimport { Tab, Tabs } from 'baseui/tabs';\nimport { Block } from 'baseui/block';\n\nimport { StyleObject } from 'styletron-standard';\nimport ErrorBoundary from '../shared/ErrorBoundary';\nimport { getSearchParam, setSearchParam } from '../../utils/url';\nimport EvolutionTabManual from './EvolutionTabManual';\nimport EvolutionTabEvolution from './EvolutionTabEvolution';\nimport EvolutionTabAutomatic from './EvolutionTabAutomatic';\nimport { BiDna } from 'react-icons/bi';\nimport { FaRegHandSpock } from 'react-icons/fa';\nimport { RiGuideLine } from 'react-icons/ri';\n\nconst WORLD_SEARCH_PARAM = 'parking';\n\nconst TAB_KEYS: Record<string, string> = {\n  evolution: 'evolution',\n  automatic: 'automatic',\n  manual: 'manual',\n};\n\nconst tabBarStyle: StyleObject = {\n  paddingLeft: 0,\n  paddingRight: 0,\n  overflow: 'hidden',\n};\n\nconst tabContentStyle: StyleObject = {\n  paddingLeft: 0,\n  paddingRight: 0,\n  paddingTop: 0,\n  paddingBottom: 0,\n};\n\nconst tabStyle: StyleObject = {\n  marginLeft: 0,\n  marginRight: 0,\n  paddingLeft: '20px',\n  paddingRight: '20px',\n};\n\nfunction EvolutionTabs() {\n  let worldKey: string = getSearchParam(WORLD_SEARCH_PARAM) || TAB_KEYS.evolution;\n  if (!TAB_KEYS.hasOwnProperty(worldKey)) {\n    worldKey = TAB_KEYS.evolution;\n  }\n\n  const [activeWorldKey, setActiveWorldKey] = useState<string | number>(worldKey);\n\n  const onTabSwitch = ({ activeKey }: {activeKey: React.Key}) => {\n    setActiveWorldKey(activeKey);\n    setSearchParam(WORLD_SEARCH_PARAM, `${activeKey}`);\n  }\n\n  return (\n    <Tabs\n      overrides={{\n        TabBar: { style: tabBarStyle },\n        TabContent: { style: tabContentStyle },\n        Tab: { style: tabStyle },\n      }}\n      onChange={onTabSwitch}\n      activeKey={activeWorldKey}\n    >\n      <Tab\n        key={TAB_KEYS.evolution}\n        title={(\n          <TabTitle\n            icon={<BiDna size={16} />}\n            title=\"Parking Evolution\"\n          />\n        )}\n      >\n        <ErrorBoundary>\n          <EvolutionTabEvolution />\n        </ErrorBoundary>\n      </Tab>\n\n      <Tab\n        key={TAB_KEYS.automatic}\n        title={(\n          <TabTitle\n            icon={<RiGuideLine  size={16} />}\n            title=\"Automatic Parking\"\n          />\n        )}\n      >\n        <ErrorBoundary>\n          <EvolutionTabAutomatic />\n        </ErrorBoundary>\n      </Tab>\n\n      <Tab\n        key={TAB_KEYS.manual}\n        title={(\n          <TabTitle\n            icon={<FaRegHandSpock size={15} />}\n            title=\"Manual Parking\"\n          />\n        )}\n      >\n        <ErrorBoundary>\n          <EvolutionTabManual />\n        </ErrorBoundary>\n      </Tab>\n    </Tabs>\n  );\n}\n\ntype TabTitleProps = {\n  icon: React.ReactNode,\n  title: string,\n};\n\nconst TabTitle = (props: TabTitleProps) => {\n  const {icon, title} = props;\n  return (\n    <Block \n      display=\"flex\"\n      flexDirection=\"row\"\n      alignItems=\"center\"\n    >\n      <Block\n        display={['none', 'none', 'flex']}\n        marginRight={['0', '0', '8px']}\n        flexDirection=\"row\"\n        alignItems=\"center\"\n      >\n        {icon}\n      </Block>\n      <Block>\n        {title}\n      </Block>\n    </Block>\n  );\n};\n\nexport default EvolutionTabs;\n","import React from 'react';\n\nimport EvolutionTabs from '../evolution/EvolutionTabs';\n\nfunction HomeScreen() {\n  return (\n    <EvolutionTabs />\n  );\n}\n\nexport default HomeScreen;\n","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nimport Layout from './components/shared/Layout';\nimport { routes } from './constants/routes';\nimport HomeScreen from './components/screens/HomeScreen';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Layout>\n        <Switch>\n          <Route path={[routes.home.path]} exact>\n            <HomeScreen />\n          </Route>\n        </Switch>\n      </Layout>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}